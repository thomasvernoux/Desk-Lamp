
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006d90  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801296c  0801296c  0002296c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012974  08012974  00022974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012978  08012978  00022978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005ec  20000000  0801297c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00027ad4  20000600  08012f68  00030600  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  200280d4  08012f68  000380d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000305ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041680  00000000  00000000  0003061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000083a0  00000000  00000000  00071c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001a55f  00000000  00000000  0007a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a08  00000000  00000000  000945a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002720  00000000  00000000  00095fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00031050  00000000  00000000  000986c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000362a5  00000000  00000000  000c9718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010c8fc  00000000  00000000  000ff9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0020c2b9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005848  00000000  00000000  0020c30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000600 	.word	0x20000600
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bbc4 	.word	0x0800bbc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000604 	.word	0x20000604
 800020c:	0800bbc4 	.word	0x0800bbc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005a8:	4770      	bx	lr

080005aa <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80005aa:	2000      	movs	r0, #0
 80005ac:	4770      	bx	lr
	...

080005b0 <ft5336_ReadID>:
{
 80005b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80005b2:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80005b4:	4c0f      	ldr	r4, [pc, #60]	; (80005f4 <ft5336_ReadID+0x44>)
{
 80005b6:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 80005b8:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80005bc:	7823      	ldrb	r3, [r4, #0]
 80005be:	b91b      	cbnz	r3, 80005c8 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80005c0:	f000 fefc 	bl	80013bc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80005c4:	2301      	movs	r3, #1
 80005c6:	7023      	strb	r3, [r4, #0]
{
 80005c8:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005ca:	b2ed      	uxtb	r5, r5
 80005cc:	3c01      	subs	r4, #1
 80005ce:	21a8      	movs	r1, #168	; 0xa8
 80005d0:	4628      	mov	r0, r5
 80005d2:	f000 ff07 	bl	80013e4 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005d6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005da:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80005de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005e2:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005e4:	d103      	bne.n	80005ee <ft5336_ReadID+0x3e>
  return (ucReadId);
 80005e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80005ea:	b003      	add	sp, #12
 80005ec:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005ee:	2b51      	cmp	r3, #81	; 0x51
 80005f0:	d1ec      	bne.n	80005cc <ft5336_ReadID+0x1c>
 80005f2:	e7f8      	b.n	80005e6 <ft5336_ReadID+0x36>
 80005f4:	2000061c 	.word	0x2000061c

080005f8 <ft5336_TS_DetectTouch>:
{
 80005f8:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80005fa:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fc:	2102      	movs	r1, #2
 80005fe:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8000600:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000604:	f000 feee 	bl	80013e4 <TS_IO_Read>
 8000608:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000618:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d901      	bls.n	8000624 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8000620:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000624:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800062a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800062e:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8000630:	2200      	movs	r2, #0
 8000632:	709a      	strb	r2, [r3, #2]
}
 8000634:	b002      	add	sp, #8
 8000636:	bd10      	pop	{r4, pc}
 8000638:	2000061c 	.word	0x2000061c

0800063c <ft5336_TS_GetXY>:
{
 800063c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000640:	4d2b      	ldr	r5, [pc, #172]	; (80006f0 <ft5336_TS_GetXY+0xb4>)
{
 8000642:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8000644:	2300      	movs	r3, #0
{
 8000646:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000648:	78ac      	ldrb	r4, [r5, #2]
 800064a:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 800064c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000650:	42a2      	cmp	r2, r4
 8000652:	d945      	bls.n	80006e0 <ft5336_TS_GetXY+0xa4>
    switch(ft5336_handle.currActiveTouchIdx)
 8000654:	2c09      	cmp	r4, #9
 8000656:	d846      	bhi.n	80006e6 <ft5336_TS_GetXY+0xaa>
 8000658:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	1d19      	adds	r1, r3, #4
 8000662:	f103 0a03 	add.w	sl, r3, #3
 8000666:	f103 0906 	add.w	r9, r3, #6
 800066a:	3305      	adds	r3, #5
 800066c:	b2c9      	uxtb	r1, r1
 800066e:	fa5f fa8a 	uxtb.w	sl, sl
 8000672:	fa5f f989 	uxtb.w	r9, r9
 8000676:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800067a:	b2c4      	uxtb	r4, r0
 800067c:	4620      	mov	r0, r4
 800067e:	f000 feb1 	bl	80013e4 <TS_IO_Read>
 8000682:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000686:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800068a:	4651      	mov	r1, sl
 800068c:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800068e:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000690:	f000 fea8 	bl	80013e4 <TS_IO_Read>
 8000694:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000698:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800069a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800069e:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80006a0:	88aa      	ldrh	r2, [r5, #4]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006a8:	4313      	orrs	r3, r2
    *X = coord;
 80006aa:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80006ac:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80006ae:	f000 fe99 	bl	80013e4 <TS_IO_Read>
 80006b2:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80006b6:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80006b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80006bc:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80006be:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80006c0:	f000 fe90 	bl	80013e4 <TS_IO_Read>
 80006c4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80006c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006cc:	88aa      	ldrh	r2, [r5, #4]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006d4:	4313      	orrs	r3, r2
 80006d6:	80ab      	strh	r3, [r5, #4]
    *Y = coord;
 80006d8:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80006da:	78ab      	ldrb	r3, [r5, #2]
 80006dc:	3301      	adds	r3, #1
 80006de:	70ab      	strb	r3, [r5, #2]
}
 80006e0:	b002      	add	sp, #8
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006e6:	4698      	mov	r8, r3
 80006e8:	4699      	mov	r9, r3
 80006ea:	469a      	mov	sl, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	e7c4      	b.n	800067a <ft5336_TS_GetXY+0x3e>
 80006f0:	2000061c 	.word	0x2000061c

080006f4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80006f4:	2201      	movs	r2, #1
 80006f6:	21a4      	movs	r1, #164	; 0xa4
 80006f8:	b2c0      	uxtb	r0, r0
 80006fa:	f000 be61 	b.w	80013c0 <TS_IO_Write>

080006fe <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80006fe:	2200      	movs	r2, #0
 8000700:	21a4      	movs	r1, #164	; 0xa4
 8000702:	b2c0      	uxtb	r0, r0
 8000704:	f000 be5c 	b.w	80013c0 <TS_IO_Write>

08000708 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8000708:	f7ff bff9 	b.w	80006fe <ft5336_TS_DisableIT>

0800070c <ft5336_TS_ClearIT>:
 800070c:	4770      	bx	lr
	...

08000710 <ft5336_Init>:
{
 8000710:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 8000712:	4c05      	ldr	r4, [pc, #20]	; (8000728 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8000714:	20c8      	movs	r0, #200	; 0xc8
 8000716:	f000 fe7b 	bl	8001410 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800071a:	7823      	ldrb	r3, [r4, #0]
 800071c:	b91b      	cbnz	r3, 8000726 <ft5336_Init+0x16>
    TS_IO_Init();
 800071e:	f000 fe4d 	bl	80013bc <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000722:	2301      	movs	r3, #1
 8000724:	7023      	strb	r3, [r4, #0]
}
 8000726:	bd10      	pop	{r4, pc}
 8000728:	2000061c 	.word	0x2000061c

0800072c <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 800072c:	2300      	movs	r3, #0
{
 800072e:	b513      	push	{r0, r1, r4, lr}
 8000730:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000732:	b2c0      	uxtb	r0, r0
 8000734:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8000736:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800073a:	f000 fe53 	bl	80013e4 <TS_IO_Read>
 800073e:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8000742:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000746:	6023      	str	r3, [r4, #0]
}
 8000748:	b002      	add	sp, #8
 800074a:	bd10      	pop	{r4, pc}

0800074c <ft5336_TS_GetTouchInfo>:
{
 800074c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000750:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
 8000754:	2400      	movs	r4, #0
{
 8000756:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000758:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 800075a:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800075e:	428b      	cmp	r3, r1
 8000760:	d92c      	bls.n	80007bc <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
 8000762:	2909      	cmp	r1, #9
 8000764:	d82d      	bhi.n	80007c2 <ft5336_TS_GetTouchInfo+0x76>
 8000766:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800076a:	004c      	lsls	r4, r1, #1
 800076c:	b2e4      	uxtb	r4, r4
 800076e:	1ce1      	adds	r1, r4, #3
 8000770:	1de7      	adds	r7, r4, #7
 8000772:	3408      	adds	r4, #8
 8000774:	b2c9      	uxtb	r1, r1
 8000776:	b2ff      	uxtb	r7, r7
 8000778:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	fa5f f880 	uxtb.w	r8, r0
 800077e:	4640      	mov	r0, r8
 8000780:	f000 fe30 	bl	80013e4 <TS_IO_Read>
 8000784:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000788:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800078c:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800078e:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000790:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000792:	099b      	lsrs	r3, r3, #6
 8000794:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000796:	f000 fe25 	bl	80013e4 <TS_IO_Read>
 800079a:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800079e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80007a2:	4621      	mov	r1, r4
 80007a4:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80007a6:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80007a8:	f000 fe1c 	bl	80013e4 <TS_IO_Read>
 80007ac:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80007b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80007b4:	0912      	lsrs	r2, r2, #4
 80007b6:	f002 0204 	and.w	r2, r2, #4
 80007ba:	602a      	str	r2, [r5, #0]
}
 80007bc:	b002      	add	sp, #8
 80007be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80007c2:	4627      	mov	r7, r4
 80007c4:	4621      	mov	r1, r4
 80007c6:	e7d8      	b.n	800077a <ft5336_TS_GetTouchInfo+0x2e>
 80007c8:	2000061c 	.word	0x2000061c

080007cc <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 80007cc:	2901      	cmp	r1, #1
{
 80007ce:	b507      	push	{r0, r1, r2, lr}
 80007d0:	b2c0      	uxtb	r0, r0
  switch (Output) 
 80007d2:	d00f      	beq.n	80007f4 <wm8994_SetOutputMode+0x28>
 80007d4:	2903      	cmp	r1, #3
 80007d6:	d12f      	bne.n	8000838 <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80007d8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80007dc:	2105      	movs	r1, #5
 80007de:	9001      	str	r0, [sp, #4]
 80007e0:	f000 fd8c 	bl	80012fc <AUDIO_IO_Write>
 80007e4:	2201      	movs	r2, #1
 80007e6:	f240 6101 	movw	r1, #1537	; 0x601
 80007ea:	9801      	ldr	r0, [sp, #4]
 80007ec:	f000 fd86 	bl	80012fc <AUDIO_IO_Write>
 80007f0:	2201      	movs	r2, #1
 80007f2:	e00c      	b.n	800080e <wm8994_SetOutputMode+0x42>
 80007f4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80007f8:	2105      	movs	r1, #5
 80007fa:	9001      	str	r0, [sp, #4]
 80007fc:	f000 fd7e 	bl	80012fc <AUDIO_IO_Write>
 8000800:	2200      	movs	r2, #0
 8000802:	f240 6101 	movw	r1, #1537	; 0x601
 8000806:	9801      	ldr	r0, [sp, #4]
 8000808:	f000 fd78 	bl	80012fc <AUDIO_IO_Write>
 800080c:	2200      	movs	r2, #0
 800080e:	f240 6102 	movw	r1, #1538	; 0x602
 8000812:	9801      	ldr	r0, [sp, #4]
 8000814:	f000 fd72 	bl	80012fc <AUDIO_IO_Write>
 8000818:	2202      	movs	r2, #2
 800081a:	f240 6104 	movw	r1, #1540	; 0x604
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	f000 fd6c 	bl	80012fc <AUDIO_IO_Write>
 8000824:	2202      	movs	r2, #2
 8000826:	9801      	ldr	r0, [sp, #4]
 8000828:	f240 6105 	movw	r1, #1541	; 0x605
 800082c:	f000 fd66 	bl	80012fc <AUDIO_IO_Write>
}
 8000830:	2000      	movs	r0, #0
 8000832:	b003      	add	sp, #12
 8000834:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
 8000838:	f240 3203 	movw	r2, #771	; 0x303
 800083c:	2105      	movs	r1, #5
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	f000 fd5c 	bl	80012fc <AUDIO_IO_Write>
 8000844:	2201      	movs	r2, #1
 8000846:	f240 6101 	movw	r1, #1537	; 0x601
 800084a:	9801      	ldr	r0, [sp, #4]
 800084c:	f000 fd56 	bl	80012fc <AUDIO_IO_Write>
 8000850:	2201      	movs	r2, #1
 8000852:	f240 6102 	movw	r1, #1538	; 0x602
 8000856:	9801      	ldr	r0, [sp, #4]
 8000858:	f000 fd50 	bl	80012fc <AUDIO_IO_Write>
 800085c:	2200      	movs	r2, #0
 800085e:	f240 6104 	movw	r1, #1540	; 0x604
 8000862:	9801      	ldr	r0, [sp, #4]
 8000864:	f000 fd4a 	bl	80012fc <AUDIO_IO_Write>
 8000868:	2200      	movs	r2, #0
 800086a:	e7dc      	b.n	8000826 <wm8994_SetOutputMode+0x5a>

0800086c <wm8994_SetFrequency>:
{
 800086c:	b508      	push	{r3, lr}
  switch (AudioFreq)
 800086e:	f245 6322 	movw	r3, #22050	; 0x5622
 8000872:	b2c0      	uxtb	r0, r0
 8000874:	4299      	cmp	r1, r3
 8000876:	d025      	beq.n	80008c4 <wm8994_SetFrequency+0x58>
 8000878:	d80b      	bhi.n	8000892 <wm8994_SetFrequency+0x26>
 800087a:	f642 3311 	movw	r3, #11025	; 0x2b11
 800087e:	4299      	cmp	r1, r3
 8000880:	d01e      	beq.n	80008c0 <wm8994_SetFrequency+0x54>
 8000882:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8000886:	d017      	beq.n	80008b8 <wm8994_SetFrequency+0x4c>
 8000888:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 800088c:	d00d      	beq.n	80008aa <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 800088e:	2283      	movs	r2, #131	; 0x83
 8000890:	e00c      	b.n	80008ac <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 8000892:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000896:	4299      	cmp	r1, r3
 8000898:	d016      	beq.n	80008c8 <wm8994_SetFrequency+0x5c>
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <wm8994_SetFrequency+0x60>)
 800089c:	4299      	cmp	r1, r3
 800089e:	d00d      	beq.n	80008bc <wm8994_SetFrequency+0x50>
 80008a0:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 80008a4:	d1f3      	bne.n	800088e <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 80008a6:	2263      	movs	r2, #99	; 0x63
 80008a8:	e000      	b.n	80008ac <wm8994_SetFrequency+0x40>
 80008aa:	2203      	movs	r2, #3
 80008ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80008b0:	f000 fd24 	bl	80012fc <AUDIO_IO_Write>
}
 80008b4:	2000      	movs	r0, #0
 80008b6:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 80008b8:	2233      	movs	r2, #51	; 0x33
 80008ba:	e7f7      	b.n	80008ac <wm8994_SetFrequency+0x40>
 80008bc:	22a3      	movs	r2, #163	; 0xa3
 80008be:	e7f5      	b.n	80008ac <wm8994_SetFrequency+0x40>
 80008c0:	2213      	movs	r2, #19
 80008c2:	e7f3      	b.n	80008ac <wm8994_SetFrequency+0x40>
 80008c4:	2243      	movs	r2, #67	; 0x43
 80008c6:	e7f1      	b.n	80008ac <wm8994_SetFrequency+0x40>
 80008c8:	2273      	movs	r2, #115	; 0x73
 80008ca:	e7ef      	b.n	80008ac <wm8994_SetFrequency+0x40>
 80008cc:	00017700 	.word	0x00017700

080008d0 <wm8994_Reset>:
 80008d0:	2200      	movs	r2, #0
 80008d2:	b2c0      	uxtb	r0, r0
{
 80008d4:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 80008d6:	4611      	mov	r1, r2
 80008d8:	f000 fd10 	bl	80012fc <AUDIO_IO_Write>
  outputEnabled = 0;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <wm8994_Reset+0x18>)
 80008de:	2000      	movs	r0, #0
  inputEnabled=0;
 80008e0:	e9c3 0000 	strd	r0, r0, [r3]
}
 80008e4:	bd08      	pop	{r3, pc}
 80008e6:	bf00      	nop
 80008e8:	20000624 	.word	0x20000624

080008ec <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 80008ec:	f000 bd04 	b.w	80012f8 <AUDIO_IO_DeInit>

080008f0 <wm8994_ReadID>:
{
 80008f0:	b510      	push	{r4, lr}
 80008f2:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 80008f4:	f000 fcfa 	bl	80012ec <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80008f8:	2100      	movs	r1, #0
 80008fa:	b2e0      	uxtb	r0, r4
 80008fc:	f000 fd12 	bl	8001324 <AUDIO_IO_Read>
}
 8000900:	bd10      	pop	{r4, pc}
	...

08000904 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <wm8994_SetMute+0x44>)
 8000906:	681b      	ldr	r3, [r3, #0]
{
 8000908:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
 800090a:	b183      	cbz	r3, 800092e <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 800090c:	2901      	cmp	r1, #1
 800090e:	b2c0      	uxtb	r0, r0
 8000910:	d111      	bne.n	8000936 <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000916:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800091a:	9001      	str	r0, [sp, #4]
 800091c:	f000 fcee 	bl	80012fc <AUDIO_IO_Write>
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	f240 4122 	movw	r1, #1058	; 0x422
 8000928:	9801      	ldr	r0, [sp, #4]
 800092a:	f000 fce7 	bl	80012fc <AUDIO_IO_Write>
}
 800092e:	2000      	movs	r0, #0
 8000930:	b003      	add	sp, #12
 8000932:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
 8000936:	2210      	movs	r2, #16
 8000938:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800093c:	9001      	str	r0, [sp, #4]
 800093e:	f000 fcdd 	bl	80012fc <AUDIO_IO_Write>
 8000942:	2210      	movs	r2, #16
 8000944:	e7ee      	b.n	8000924 <wm8994_SetMute+0x20>
 8000946:	bf00      	nop
 8000948:	20000624 	.word	0x20000624

0800094c <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800094c:	2100      	movs	r1, #0
 800094e:	f7ff bfd9 	b.w	8000904 <wm8994_SetMute>

08000952 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000952:	2100      	movs	r1, #0
 8000954:	f7ff bfd6 	b.w	8000904 <wm8994_SetMute>

08000958 <wm8994_Pause>:
{  
 8000958:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800095a:	2101      	movs	r1, #1
{  
 800095c:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800095e:	f7ff ffd1 	bl	8000904 <wm8994_SetMute>
 8000962:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000964:	2201      	movs	r2, #1
 8000966:	b2e8      	uxtb	r0, r5
 8000968:	2102      	movs	r1, #2
 800096a:	f000 fcc7 	bl	80012fc <AUDIO_IO_Write>
}
 800096e:	4620      	mov	r0, r4
 8000970:	bd38      	pop	{r3, r4, r5, pc}
	...

08000974 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000974:	2964      	cmp	r1, #100	; 0x64
 8000976:	f04f 0264 	mov.w	r2, #100	; 0x64
  if (outputEnabled != 0)
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <wm8994_SetVolume+0x100>)
{
 800097c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000980:	bf98      	it	ls
 8000982:	ebc1 1781 	rsbls	r7, r1, r1, lsl #6
  if (outputEnabled != 0)
 8000986:	681e      	ldr	r6, [r3, #0]
{
 8000988:	4605      	mov	r5, r0
 800098a:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800098c:	bf88      	it	hi
 800098e:	4617      	movhi	r7, r2
 8000990:	4698      	mov	r8, r3
 8000992:	bf9c      	itt	ls
 8000994:	fbb7 f2f2 	udivls	r2, r7, r2
 8000998:	b2d7      	uxtbls	r7, r2
  if (outputEnabled != 0)
 800099a:	b32e      	cbz	r6, 80009e8 <wm8994_SetVolume+0x74>
    if(convertedvol > 0x3E)
 800099c:	2f3e      	cmp	r7, #62	; 0x3e
 800099e:	d91d      	bls.n	80009dc <wm8994_SetVolume+0x68>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80009a0:	2100      	movs	r1, #0
 80009a2:	f7ff ffaf 	bl	8000904 <wm8994_SetMute>
 80009a6:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80009a8:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80009aa:	f240 127f 	movw	r2, #383	; 0x17f
 80009ae:	211c      	movs	r1, #28
 80009b0:	9000      	str	r0, [sp, #0]
 80009b2:	f000 fca3 	bl	80012fc <AUDIO_IO_Write>
 80009b6:	f240 127f 	movw	r2, #383	; 0x17f
 80009ba:	211d      	movs	r1, #29
 80009bc:	9800      	ldr	r0, [sp, #0]
 80009be:	f000 fc9d 	bl	80012fc <AUDIO_IO_Write>
 80009c2:	f240 127f 	movw	r2, #383	; 0x17f
 80009c6:	2126      	movs	r1, #38	; 0x26
 80009c8:	9800      	ldr	r0, [sp, #0]
 80009ca:	f000 fc97 	bl	80012fc <AUDIO_IO_Write>
 80009ce:	f240 127f 	movw	r2, #383	; 0x17f
 80009d2:	2127      	movs	r1, #39	; 0x27
 80009d4:	9800      	ldr	r0, [sp, #0]
 80009d6:	f000 fc91 	bl	80012fc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80009da:	e005      	b.n	80009e8 <wm8994_SetVolume+0x74>
    else if (Volume == 0)
 80009dc:	2900      	cmp	r1, #0
 80009de:	d130      	bne.n	8000a42 <wm8994_SetVolume+0xce>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80009e0:	2101      	movs	r1, #1
 80009e2:	f7ff ff8f 	bl	8000904 <wm8994_SetMute>
 80009e6:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 80009e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80009ec:	b32b      	cbz	r3, 8000a3a <wm8994_SetVolume+0xc6>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80009ee:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80009f0:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80009f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80009f6:	bf9a      	itte	ls
 80009f8:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
 80009fc:	2464      	movls	r4, #100	; 0x64
 80009fe:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a00:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000a02:	bf9e      	ittt	ls
 8000a04:	0112      	lslls	r2, r2, #4
 8000a06:	fbb2 f2f4 	udivls	r2, r2, r4
 8000a0a:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a10:	9201      	str	r2, [sp, #4]
 8000a12:	f000 fc73 	bl	80012fc <AUDIO_IO_Write>
 8000a16:	9a01      	ldr	r2, [sp, #4]
 8000a18:	f240 4101 	movw	r1, #1025	; 0x401
 8000a1c:	9800      	ldr	r0, [sp, #0]
 8000a1e:	f000 fc6d 	bl	80012fc <AUDIO_IO_Write>
 8000a22:	9a01      	ldr	r2, [sp, #4]
 8000a24:	f240 4104 	movw	r1, #1028	; 0x404
 8000a28:	9800      	ldr	r0, [sp, #0]
 8000a2a:	f000 fc67 	bl	80012fc <AUDIO_IO_Write>
 8000a2e:	9a01      	ldr	r2, [sp, #4]
 8000a30:	f240 4105 	movw	r1, #1029	; 0x405
 8000a34:	9800      	ldr	r0, [sp, #0]
 8000a36:	f000 fc61 	bl	80012fc <AUDIO_IO_Write>
}
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	b002      	add	sp, #8
 8000a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000a42:	2100      	movs	r1, #0
 8000a44:	f7ff ff5e 	bl	8000904 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8000a48:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000a4c:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8000a4e:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a50:	211c      	movs	r1, #28
 8000a52:	9201      	str	r2, [sp, #4]
 8000a54:	9000      	str	r0, [sp, #0]
 8000a56:	f000 fc51 	bl	80012fc <AUDIO_IO_Write>
 8000a5a:	9a01      	ldr	r2, [sp, #4]
 8000a5c:	211d      	movs	r1, #29
 8000a5e:	9800      	ldr	r0, [sp, #0]
 8000a60:	f000 fc4c 	bl	80012fc <AUDIO_IO_Write>
 8000a64:	9a01      	ldr	r2, [sp, #4]
 8000a66:	2126      	movs	r1, #38	; 0x26
 8000a68:	9800      	ldr	r0, [sp, #0]
 8000a6a:	f000 fc47 	bl	80012fc <AUDIO_IO_Write>
 8000a6e:	9a01      	ldr	r2, [sp, #4]
 8000a70:	e7af      	b.n	80009d2 <wm8994_SetVolume+0x5e>
 8000a72:	bf00      	nop
 8000a74:	20000624 	.word	0x20000624

08000a78 <wm8994_Init>:
{
 8000a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7c:	4681      	mov	r9, r0
 8000a7e:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000a80:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 8000a84:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000a86:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000a8a:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 8000a8c:	f000 fc2e 	bl	80012ec <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a90:	2203      	movs	r2, #3
 8000a92:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000a96:	4620      	mov	r0, r4
 8000a98:	f000 fc30 	bl	80012fc <AUDIO_IO_Write>
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f640 0117 	movw	r1, #2071	; 0x817
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f000 fc2a 	bl	80012fc <AUDIO_IO_Write>
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f000 fc24 	bl	80012fc <AUDIO_IO_Write>
 8000ab4:	226c      	movs	r2, #108	; 0x6c
 8000ab6:	2139      	movs	r1, #57	; 0x39
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f000 fc1f 	bl	80012fc <AUDIO_IO_Write>
  if (input_device > 0)
 8000abe:	b3c5      	cbz	r5, 8000b32 <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ac0:	2213      	movs	r2, #19
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f000 fc19 	bl	80012fc <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 8000aca:	2032      	movs	r0, #50	; 0x32
 8000acc:	f8df b4ec 	ldr.w	fp, [pc, #1260]	; 8000fbc <wm8994_Init+0x544>
 8000ad0:	f000 fc40 	bl	8001354 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	f000 809a 	beq.w	8000c0e <wm8994_Init+0x196>
    outputEnabled = 1;
 8000ada:	2701      	movs	r7, #1
    switch (output_device)
 8000adc:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 8000ade:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
 8000ae2:	d07a      	beq.n	8000bda <wm8994_Init+0x162>
 8000ae4:	2e03      	cmp	r6, #3
 8000ae6:	d026      	beq.n	8000b36 <wm8994_Init+0xbe>
 8000ae8:	42be      	cmp	r6, r7
 8000aea:	d176      	bne.n	8000bda <wm8994_Init+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000aec:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000af0:	2105      	movs	r1, #5
 8000af2:	4620      	mov	r0, r4
 8000af4:	f000 fc02 	bl	80012fc <AUDIO_IO_Write>
 8000af8:	2200      	movs	r2, #0
 8000afa:	f240 6101 	movw	r1, #1537	; 0x601
 8000afe:	4620      	mov	r0, r4
 8000b00:	f000 fbfc 	bl	80012fc <AUDIO_IO_Write>
 8000b04:	2200      	movs	r2, #0
 8000b06:	f240 6102 	movw	r1, #1538	; 0x602
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f000 fbf6 	bl	80012fc <AUDIO_IO_Write>
 8000b10:	2202      	movs	r2, #2
 8000b12:	f240 6104 	movw	r1, #1540	; 0x604
 8000b16:	4620      	mov	r0, r4
 8000b18:	f000 fbf0 	bl	80012fc <AUDIO_IO_Write>
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	f240 6105 	movw	r1, #1541	; 0x605
 8000b22:	4620      	mov	r0, r4
 8000b24:	f000 fbea 	bl	80012fc <AUDIO_IO_Write>
  if (input_device > 0)
 8000b28:	bb3d      	cbnz	r5, 8000b7a <wm8994_Init+0x102>
    inputEnabled = 0;
 8000b2a:	462f      	mov	r7, r5
 8000b2c:	f8cb 5004 	str.w	r5, [fp, #4]
 8000b30:	e032      	b.n	8000b98 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b32:	2203      	movs	r2, #3
 8000b34:	e7c5      	b.n	8000ac2 <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000b36:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b3a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000b3e:	f04f 0105 	mov.w	r1, #5
 8000b42:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000b44:	d13f      	bne.n	8000bc6 <wm8994_Init+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b46:	f000 fbd9 	bl	80012fc <AUDIO_IO_Write>
 8000b4a:	4632      	mov	r2, r6
 8000b4c:	f240 6101 	movw	r1, #1537	; 0x601
 8000b50:	4620      	mov	r0, r4
 8000b52:	f000 fbd3 	bl	80012fc <AUDIO_IO_Write>
 8000b56:	4632      	mov	r2, r6
 8000b58:	f240 6102 	movw	r1, #1538	; 0x602
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f000 fbcd 	bl	80012fc <AUDIO_IO_Write>
 8000b62:	4632      	mov	r2, r6
 8000b64:	f240 6104 	movw	r1, #1540	; 0x604
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f000 fbc7 	bl	80012fc <AUDIO_IO_Write>
 8000b6e:	4632      	mov	r2, r6
 8000b70:	f240 6105 	movw	r1, #1541	; 0x605
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 fbc1 	bl	80012fc <AUDIO_IO_Write>
    inputEnabled = 1;
 8000b7a:	2701      	movs	r7, #1
    switch (input_device)
 8000b7c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
 8000b80:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
 8000b84:	f000 809d 	beq.w	8000cc2 <wm8994_Init+0x24a>
 8000b88:	d844      	bhi.n	8000c14 <wm8994_Init+0x19c>
 8000b8a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000b8e:	f000 80c7 	beq.w	8000d20 <wm8994_Init+0x2a8>
 8000b92:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000b96:	d06e      	beq.n	8000c76 <wm8994_Init+0x1fe>
  switch (AudioFreq)
 8000b98:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
 8000b9c:	f000 81cd 	beq.w	8000f3a <wm8994_Init+0x4c2>
 8000ba0:	f200 80c8 	bhi.w	8000d34 <wm8994_Init+0x2bc>
 8000ba4:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
 8000ba8:	f000 81c5 	beq.w	8000f36 <wm8994_Init+0x4be>
 8000bac:	f200 80bb 	bhi.w	8000d26 <wm8994_Init+0x2ae>
 8000bb0:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
 8000bb4:	f000 80ce 	beq.w	8000d54 <wm8994_Init+0x2dc>
 8000bb8:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000bbc:	4598      	cmp	r8, r3
 8000bbe:	f000 81c0 	beq.w	8000f42 <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000bc2:	2283      	movs	r2, #131	; 0x83
 8000bc4:	e0c7      	b.n	8000d56 <wm8994_Init+0x2de>
 8000bc6:	f000 fb99 	bl	80012fc <AUDIO_IO_Write>
 8000bca:	463a      	mov	r2, r7
 8000bcc:	f240 6101 	movw	r1, #1537	; 0x601
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f000 fb93 	bl	80012fc <AUDIO_IO_Write>
 8000bd6:	463a      	mov	r2, r7
 8000bd8:	e795      	b.n	8000b06 <wm8994_Init+0x8e>
 8000bda:	f240 3203 	movw	r2, #771	; 0x303
 8000bde:	2105      	movs	r1, #5
 8000be0:	4620      	mov	r0, r4
 8000be2:	f000 fb8b 	bl	80012fc <AUDIO_IO_Write>
 8000be6:	463a      	mov	r2, r7
 8000be8:	f240 6101 	movw	r1, #1537	; 0x601
 8000bec:	4620      	mov	r0, r4
 8000bee:	f000 fb85 	bl	80012fc <AUDIO_IO_Write>
 8000bf2:	463a      	mov	r2, r7
 8000bf4:	f240 6102 	movw	r1, #1538	; 0x602
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f000 fb7f 	bl	80012fc <AUDIO_IO_Write>
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f240 6104 	movw	r1, #1540	; 0x604
 8000c04:	4620      	mov	r0, r4
 8000c06:	f000 fb79 	bl	80012fc <AUDIO_IO_Write>
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	e787      	b.n	8000b1e <wm8994_Init+0xa6>
    outputEnabled = 0;
 8000c0e:	f8cb 6000 	str.w	r6, [fp]
 8000c12:	e789      	b.n	8000b28 <wm8994_Init+0xb0>
    switch (input_device)
 8000c14:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000c18:	d1be      	bne.n	8000b98 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c1a:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000c1e:	2104      	movs	r1, #4
 8000c20:	4620      	mov	r0, r4
 8000c22:	f000 fb6b 	bl	80012fc <AUDIO_IO_Write>
 8000c26:	22db      	movs	r2, #219	; 0xdb
 8000c28:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f000 fb65 	bl	80012fc <AUDIO_IO_Write>
 8000c32:	22db      	movs	r2, #219	; 0xdb
 8000c34:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f000 fb5f 	bl	80012fc <AUDIO_IO_Write>
 8000c3e:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000c42:	2102      	movs	r1, #2
 8000c44:	4620      	mov	r0, r4
 8000c46:	f000 fb59 	bl	80012fc <AUDIO_IO_Write>
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f240 6106 	movw	r1, #1542	; 0x606
 8000c50:	4620      	mov	r0, r4
 8000c52:	f000 fb53 	bl	80012fc <AUDIO_IO_Write>
 8000c56:	2202      	movs	r2, #2
 8000c58:	f240 6107 	movw	r1, #1543	; 0x607
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f000 fb4d 	bl	80012fc <AUDIO_IO_Write>
 8000c62:	2202      	movs	r2, #2
 8000c64:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f000 fb47 	bl	80012fc <AUDIO_IO_Write>
 8000c6e:	2202      	movs	r2, #2
 8000c70:	f240 6109 	movw	r1, #1545	; 0x609
 8000c74:	e04f      	b.n	8000d16 <wm8994_Init+0x29e>
 8000c76:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f000 fb3d 	bl	80012fc <AUDIO_IO_Write>
 8000c82:	22db      	movs	r2, #219	; 0xdb
 8000c84:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f000 fb37 	bl	80012fc <AUDIO_IO_Write>
 8000c8e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000c92:	2102      	movs	r1, #2
 8000c94:	4620      	mov	r0, r4
 8000c96:	f000 fb31 	bl	80012fc <AUDIO_IO_Write>
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f000 fb2b 	bl	80012fc <AUDIO_IO_Write>
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	f240 6109 	movw	r1, #1545	; 0x609
 8000cac:	4620      	mov	r0, r4
 8000cae:	f000 fb25 	bl	80012fc <AUDIO_IO_Write>
 8000cb2:	220e      	movs	r2, #14
 8000cb4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000cb8:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000cba:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000cbc:	f000 fb1e 	bl	80012fc <AUDIO_IO_Write>
      break;
 8000cc0:	e76a      	b.n	8000b98 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000cc2:	2211      	movs	r2, #17
 8000cc4:	2128      	movs	r1, #40	; 0x28
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f000 fb18 	bl	80012fc <AUDIO_IO_Write>
 8000ccc:	2235      	movs	r2, #53	; 0x35
 8000cce:	2129      	movs	r1, #41	; 0x29
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f000 fb13 	bl	80012fc <AUDIO_IO_Write>
 8000cd6:	2235      	movs	r2, #53	; 0x35
 8000cd8:	212a      	movs	r1, #42	; 0x2a
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f000 fb0e 	bl	80012fc <AUDIO_IO_Write>
 8000ce0:	f240 3203 	movw	r2, #771	; 0x303
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f000 fb08 	bl	80012fc <AUDIO_IO_Write>
 8000cec:	22db      	movs	r2, #219	; 0xdb
 8000cee:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f000 fb02 	bl	80012fc <AUDIO_IO_Write>
 8000cf8:	f246 3250 	movw	r2, #25424	; 0x6350
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f000 fafc 	bl	80012fc <AUDIO_IO_Write>
 8000d04:	2202      	movs	r2, #2
 8000d06:	f240 6106 	movw	r1, #1542	; 0x606
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f000 faf6 	bl	80012fc <AUDIO_IO_Write>
 8000d10:	2202      	movs	r2, #2
 8000d12:	f240 6107 	movw	r1, #1543	; 0x607
 8000d16:	4620      	mov	r0, r4
 8000d18:	f000 faf0 	bl	80012fc <AUDIO_IO_Write>
 8000d1c:	220d      	movs	r2, #13
 8000d1e:	e7c9      	b.n	8000cb4 <wm8994_Init+0x23c>
 8000d20:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000d24:	e7de      	b.n	8000ce4 <wm8994_Init+0x26c>
  switch (AudioFreq)
 8000d26:	f245 6322 	movw	r3, #22050	; 0x5622
 8000d2a:	4598      	cmp	r8, r3
 8000d2c:	f47f af49 	bne.w	8000bc2 <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d30:	2243      	movs	r2, #67	; 0x43
 8000d32:	e010      	b.n	8000d56 <wm8994_Init+0x2de>
  switch (AudioFreq)
 8000d34:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000d38:	4598      	cmp	r8, r3
 8000d3a:	f43f af42 	beq.w	8000bc2 <wm8994_Init+0x14a>
 8000d3e:	4b9d      	ldr	r3, [pc, #628]	; (8000fb4 <wm8994_Init+0x53c>)
 8000d40:	4598      	cmp	r8, r3
 8000d42:	f000 80fc 	beq.w	8000f3e <wm8994_Init+0x4c6>
 8000d46:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000d4a:	4598      	cmp	r8, r3
 8000d4c:	f47f af39 	bne.w	8000bc2 <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d50:	2273      	movs	r2, #115	; 0x73
 8000d52:	e000      	b.n	8000d56 <wm8994_Init+0x2de>
 8000d54:	2203      	movs	r2, #3
 8000d56:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 face 	bl	80012fc <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000d60:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d68:	4620      	mov	r0, r4
 8000d6a:	bf0c      	ite	eq
 8000d6c:	f244 0218 	movweq	r2, #16408	; 0x4018
 8000d70:	f244 0210 	movwne	r2, #16400	; 0x4010
 8000d74:	f000 fac2 	bl	80012fc <AUDIO_IO_Write>
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f240 3102 	movw	r1, #770	; 0x302
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f000 fabc 	bl	80012fc <AUDIO_IO_Write>
 8000d84:	220a      	movs	r2, #10
 8000d86:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f000 fab6 	bl	80012fc <AUDIO_IO_Write>
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 fab0 	bl	80012fc <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	f000 80a9 	beq.w	8000ef4 <wm8994_Init+0x47c>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8000da2:	2e02      	cmp	r6, #2
 8000da4:	d123      	bne.n	8000dee <wm8994_Init+0x376>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	212d      	movs	r1, #45	; 0x2d
 8000dac:	4620      	mov	r0, r4
      if(ColdStartup)
 8000dae:	4e82      	ldr	r6, [pc, #520]	; (8000fb8 <wm8994_Init+0x540>)
 AUDIO_IO_Write(Addr, Reg, Value);
 8000db0:	f000 faa4 	bl	80012fc <AUDIO_IO_Write>
 8000db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db8:	212e      	movs	r1, #46	; 0x2e
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f000 fa9e 	bl	80012fc <AUDIO_IO_Write>
      if(ColdStartup)
 8000dc0:	7833      	ldrb	r3, [r6, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80bf 	beq.w	8000f46 <wm8994_Init+0x4ce>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8000dce:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000dd2:	f000 fa93 	bl	80012fc <AUDIO_IO_Write>
        ColdStartup=0;
 8000dd6:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 8000dd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
 8000ddc:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 8000dde:	f000 fab9 	bl	8001354 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000de8:	4620      	mov	r0, r4
 8000dea:	f000 fa87 	bl	80012fc <AUDIO_IO_Write>
 8000dee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000df2:	2103      	movs	r1, #3
 8000df4:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000df6:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dfa:	f000 fa7f 	bl	80012fc <AUDIO_IO_Write>
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2122      	movs	r1, #34	; 0x22
 8000e02:	4620      	mov	r0, r4
 8000e04:	f000 fa7a 	bl	80012fc <AUDIO_IO_Write>
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2123      	movs	r1, #35	; 0x23
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f000 fa75 	bl	80012fc <AUDIO_IO_Write>
 8000e12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e16:	2136      	movs	r1, #54	; 0x36
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f000 fa6f 	bl	80012fc <AUDIO_IO_Write>
 8000e1e:	f243 0203 	movw	r2, #12291	; 0x3003
 8000e22:	2101      	movs	r1, #1
 8000e24:	4620      	mov	r0, r4
 8000e26:	f000 fa69 	bl	80012fc <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000e2a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e2e:	f04f 0151 	mov.w	r1, #81	; 0x51
 8000e32:	4620      	mov	r0, r4
 8000e34:	bf0c      	ite	eq
 8000e36:	f240 2205 	movweq	r2, #517	; 0x205
 8000e3a:	2205      	movne	r2, #5
 8000e3c:	f000 fa5e 	bl	80012fc <AUDIO_IO_Write>
 8000e40:	f243 3203 	movw	r2, #13059	; 0x3303
 8000e44:	2101      	movs	r1, #1
 8000e46:	4620      	mov	r0, r4
 8000e48:	f000 fa58 	bl	80012fc <AUDIO_IO_Write>
 8000e4c:	2222      	movs	r2, #34	; 0x22
 8000e4e:	2160      	movs	r1, #96	; 0x60
 8000e50:	4620      	mov	r0, r4
 8000e52:	f000 fa53 	bl	80012fc <AUDIO_IO_Write>
 8000e56:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000e5a:	214c      	movs	r1, #76	; 0x4c
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f000 fa4d 	bl	80012fc <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 fa76 	bl	8001354 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	212d      	movs	r1, #45	; 0x2d
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f000 fa45 	bl	80012fc <AUDIO_IO_Write>
 8000e72:	2201      	movs	r2, #1
 8000e74:	212e      	movs	r1, #46	; 0x2e
 8000e76:	4620      	mov	r0, r4
 8000e78:	f000 fa40 	bl	80012fc <AUDIO_IO_Write>
 8000e7c:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000e80:	2103      	movs	r1, #3
 8000e82:	4620      	mov	r0, r4
 8000e84:	f000 fa3a 	bl	80012fc <AUDIO_IO_Write>
 8000e88:	2233      	movs	r2, #51	; 0x33
 8000e8a:	2154      	movs	r1, #84	; 0x54
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f000 fa35 	bl	80012fc <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 8000e92:	f240 1001 	movw	r0, #257	; 0x101
 8000e96:	f000 fa5d 	bl	8001354 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e9a:	22ee      	movs	r2, #238	; 0xee
 8000e9c:	2160      	movs	r1, #96	; 0x60
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f000 fa2c 	bl	80012fc <AUDIO_IO_Write>
 8000ea4:	22c0      	movs	r2, #192	; 0xc0
 8000ea6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f000 fa26 	bl	80012fc <AUDIO_IO_Write>
 8000eb0:	22c0      	movs	r2, #192	; 0xc0
 8000eb2:	f240 6111 	movw	r1, #1553	; 0x611
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f000 fa20 	bl	80012fc <AUDIO_IO_Write>
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f000 fa1a 	bl	80012fc <AUDIO_IO_Write>
 8000ec8:	22c0      	movs	r2, #192	; 0xc0
 8000eca:	f240 6112 	movw	r1, #1554	; 0x612
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f000 fa14 	bl	80012fc <AUDIO_IO_Write>
 8000ed4:	22c0      	movs	r2, #192	; 0xc0
 8000ed6:	f240 6113 	movw	r1, #1555	; 0x613
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 fa0e 	bl	80012fc <AUDIO_IO_Write>
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	f240 4122 	movw	r1, #1058	; 0x422
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f000 fa08 	bl	80012fc <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000eec:	4651      	mov	r1, sl
 8000eee:	4648      	mov	r0, r9
 8000ef0:	f7ff fd40 	bl	8000974 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 8000ef4:	b1e5      	cbz	r5, 8000f30 <wm8994_Init+0x4b8>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000ef6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000efa:	d002      	beq.n	8000f02 <wm8994_Init+0x48a>
 8000efc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000f00:	d12a      	bne.n	8000f58 <wm8994_Init+0x4e0>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f02:	f046 0213 	orr.w	r2, r6, #19
 8000f06:	2101      	movs	r1, #1
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f000 f9f7 	bl	80012fc <AUDIO_IO_Write>
 8000f0e:	2202      	movs	r2, #2
 8000f10:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f14:	4620      	mov	r0, r4
 8000f16:	f000 f9f1 	bl	80012fc <AUDIO_IO_Write>
 8000f1a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f1e:	f240 4111 	movw	r1, #1041	; 0x411
 8000f22:	4620      	mov	r0, r4
 8000f24:	f000 f9ea 	bl	80012fc <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000f28:	4651      	mov	r1, sl
 8000f2a:	4648      	mov	r0, r9
 8000f2c:	f7ff fd22 	bl	8000974 <wm8994_SetVolume>
}
 8000f30:	4638      	mov	r0, r7
 8000f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f36:	2233      	movs	r2, #51	; 0x33
 8000f38:	e70d      	b.n	8000d56 <wm8994_Init+0x2de>
 8000f3a:	2263      	movs	r2, #99	; 0x63
 8000f3c:	e70b      	b.n	8000d56 <wm8994_Init+0x2de>
 8000f3e:	22a3      	movs	r2, #163	; 0xa3
 8000f40:	e709      	b.n	8000d56 <wm8994_Init+0x2de>
 8000f42:	2213      	movs	r2, #19
 8000f44:	e707      	b.n	8000d56 <wm8994_Init+0x2de>
 8000f46:	4620      	mov	r0, r4
 8000f48:	f248 1208 	movw	r2, #33032	; 0x8108
 8000f4c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f50:	f000 f9d4 	bl	80012fc <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 8000f54:	2032      	movs	r0, #50	; 0x32
 8000f56:	e742      	b.n	8000dde <wm8994_Init+0x366>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f58:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000f5c:	d115      	bne.n	8000f8a <wm8994_Init+0x512>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f5e:	f046 0213 	orr.w	r2, r6, #19
 8000f62:	2101      	movs	r1, #1
 8000f64:	4620      	mov	r0, r4
 8000f66:	f000 f9c9 	bl	80012fc <AUDIO_IO_Write>
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000f70:	4620      	mov	r0, r4
 8000f72:	f000 f9c3 	bl	80012fc <AUDIO_IO_Write>
 8000f76:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000f7a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f000 f9bc 	bl	80012fc <AUDIO_IO_Write>
 8000f84:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000f88:	e7c9      	b.n	8000f1e <wm8994_Init+0x4a6>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8000f8a:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000f8e:	d002      	beq.n	8000f96 <wm8994_Init+0x51e>
 8000f90:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000f94:	d1c8      	bne.n	8000f28 <wm8994_Init+0x4b0>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f96:	220b      	movs	r2, #11
 8000f98:	2118      	movs	r1, #24
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f000 f9ae 	bl	80012fc <AUDIO_IO_Write>
 8000fa0:	220b      	movs	r2, #11
 8000fa2:	211a      	movs	r1, #26
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f000 f9a9 	bl	80012fc <AUDIO_IO_Write>
 8000faa:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000fae:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000fb2:	e7b6      	b.n	8000f22 <wm8994_Init+0x4aa>
 8000fb4:	00017700 	.word	0x00017700
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	20000624 	.word	0x20000624

08000fc0 <wm8994_Stop>:
{
 8000fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8000fc2:	4f19      	ldr	r7, [pc, #100]	; (8001028 <wm8994_Stop+0x68>)
{
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8000fc8:	683d      	ldr	r5, [r7, #0]
 8000fca:	b355      	cbz	r5, 8001022 <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	f7ff fc99 	bl	8000904 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8000fd2:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000fd4:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8000fd6:	d024      	beq.n	8001022 <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000fd8:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000fe2:	9001      	str	r0, [sp, #4]
 8000fe4:	f000 f98a 	bl	80012fc <AUDIO_IO_Write>
 8000fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fec:	f240 4122 	movw	r1, #1058	; 0x422
 8000ff0:	9801      	ldr	r0, [sp, #4]
 8000ff2:	f000 f983 	bl	80012fc <AUDIO_IO_Write>
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	212d      	movs	r1, #45	; 0x2d
 8000ffa:	9801      	ldr	r0, [sp, #4]
 8000ffc:	f000 f97e 	bl	80012fc <AUDIO_IO_Write>
 8001000:	2200      	movs	r2, #0
 8001002:	212e      	movs	r1, #46	; 0x2e
 8001004:	9801      	ldr	r0, [sp, #4]
 8001006:	f000 f979 	bl	80012fc <AUDIO_IO_Write>
 800100a:	2200      	movs	r2, #0
 800100c:	2105      	movs	r1, #5
 800100e:	9801      	ldr	r0, [sp, #4]
 8001010:	f000 f974 	bl	80012fc <AUDIO_IO_Write>
 8001014:	2200      	movs	r2, #0
 8001016:	9801      	ldr	r0, [sp, #4]
 8001018:	4611      	mov	r1, r2
 800101a:	f000 f96f 	bl	80012fc <AUDIO_IO_Write>
      outputEnabled = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
}
 8001022:	4628      	mov	r0, r5
 8001024:	b003      	add	sp, #12
 8001026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001028:	20000624 	.word	0x20000624

0800102c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001032:	f003 fe30 	bl	8004c96 <HAL_I2C_GetState>
 8001036:	2800      	cmp	r0, #0
 8001038:	d155      	bne.n	80010e6 <I2Cx_Init+0xba>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 800103c:	2600      	movs	r6, #0
 800103e:	4c4a      	ldr	r4, [pc, #296]	; (8001168 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001040:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001042:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001044:	bf0c      	ite	eq
 8001046:	4a49      	ldreq	r2, [pc, #292]	; (800116c <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001048:	4a49      	ldrne	r2, [pc, #292]	; (8001170 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800104a:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800104c:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <I2Cx_Init+0x148>)
 8001050:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001054:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001058:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800105c:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001060:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001062:	d142      	bne.n	80010ea <I2Cx_Init+0xbe>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001068:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800106a:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800106e:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001070:	6323      	str	r3, [r4, #48]	; 0x30
 8001072:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001074:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800107e:	2312      	movs	r3, #18
 8001080:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001084:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001086:	483c      	ldr	r0, [pc, #240]	; (8001178 <I2Cx_Init+0x14c>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001088:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800108c:	f003 f8a6 	bl	80041dc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001090:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001094:	a905      	add	r1, sp, #20
 8001096:	4838      	ldr	r0, [pc, #224]	; (8001178 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001098:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800109a:	f003 f89f 	bl	80041dc <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800109e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80010a0:	4632      	mov	r2, r6
 80010a2:	210f      	movs	r1, #15
 80010a4:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80010a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010aa:	6423      	str	r3, [r4, #64]	; 0x40
 80010ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80010b6:	6a23      	ldr	r3, [r4, #32]
 80010b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010bc:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80010be:	6a23      	ldr	r3, [r4, #32]
 80010c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010c4:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80010c6:	f002 fc41 	bl	800394c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80010ca:	2048      	movs	r0, #72	; 0x48
 80010cc:	f002 fc70 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80010d0:	2049      	movs	r0, #73	; 0x49
 80010d2:	4632      	mov	r2, r6
 80010d4:	210f      	movs	r1, #15
 80010d6:	f002 fc39 	bl	800394c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80010da:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80010dc:	f002 fc68 	bl	80039b0 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80010e0:	4628      	mov	r0, r5
 80010e2:	f003 fb5e 	bl	80047a2 <HAL_I2C_Init>
  }
}
 80010e6:	b00a      	add	sp, #40	; 0x28
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80010ea:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80010ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80010f2:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010f4:	4821      	ldr	r0, [pc, #132]	; (800117c <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80010f6:	6323      	str	r3, [r4, #48]	; 0x30
 80010f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 80010fa:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001104:	2312      	movs	r3, #18
 8001106:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800110a:	2304      	movs	r3, #4
 800110c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001110:	a905      	add	r1, sp, #20
 8001112:	f003 f863 	bl	80041dc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001116:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800111a:	a905      	add	r1, sp, #20
 800111c:	4817      	ldr	r0, [pc, #92]	; (800117c <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800111e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001120:	f003 f85c 	bl	80041dc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001124:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001126:	4632      	mov	r2, r6
 8001128:	210f      	movs	r1, #15
 800112a:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	6423      	str	r3, [r4, #64]	; 0x40
 8001132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	9304      	str	r3, [sp, #16]
 800113a:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800113c:	6a23      	ldr	r3, [r4, #32]
 800113e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001142:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001144:	6a23      	ldr	r3, [r4, #32]
 8001146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800114a:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800114c:	f002 fbfe 	bl	800394c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001150:	201f      	movs	r0, #31
 8001152:	f002 fc2d 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001156:	2020      	movs	r0, #32
 8001158:	4632      	mov	r2, r6
 800115a:	210f      	movs	r1, #15
 800115c:	f002 fbf6 	bl	800394c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001160:	2020      	movs	r0, #32
 8001162:	e7bb      	b.n	80010dc <I2Cx_Init+0xb0>
 8001164:	2000062c 	.word	0x2000062c
 8001168:	40023800 	.word	0x40023800
 800116c:	40005c00 	.word	0x40005c00
 8001170:	40005400 	.word	0x40005400
 8001174:	40912732 	.word	0x40912732
 8001178:	40021c00 	.word	0x40021c00
 800117c:	40020400 	.word	0x40020400

08001180 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001180:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001182:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8001186:	b085      	sub	sp, #20
 8001188:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800118a:	9402      	str	r4, [sp, #8]
 800118c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001190:	9401      	str	r4, [sp, #4]
 8001192:	9c08      	ldr	r4, [sp, #32]
 8001194:	9400      	str	r4, [sp, #0]
 8001196:	f003 fb6f 	bl	8004878 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800119a:	4604      	mov	r4, r0
 800119c:	b128      	cbz	r0, 80011aa <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800119e:	4628      	mov	r0, r5
 80011a0:	f003 fb51 	bl	8004846 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011a4:	4628      	mov	r0, r5
 80011a6:	f7ff ff41 	bl	800102c <I2Cx_Init>
}
 80011aa:	4620      	mov	r0, r4
 80011ac:	b005      	add	sp, #20
 80011ae:	bd30      	pop	{r4, r5, pc}

080011b0 <I2Cx_ReadMultiple>:
{
 80011b0:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80011b6:	b085      	sub	sp, #20
 80011b8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011ba:	9402      	str	r4, [sp, #8]
 80011bc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80011c0:	9401      	str	r4, [sp, #4]
 80011c2:	9c08      	ldr	r4, [sp, #32]
 80011c4:	9400      	str	r4, [sp, #0]
 80011c6:	f003 fc0d 	bl	80049e4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80011ca:	4604      	mov	r4, r0
 80011cc:	b128      	cbz	r0, 80011da <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80011ce:	4628      	mov	r0, r5
 80011d0:	f003 fb39 	bl	8004846 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80011d4:	4628      	mov	r0, r5
 80011d6:	f7ff ff29 	bl	800102c <I2Cx_Init>
}
 80011da:	4620      	mov	r0, r4
 80011dc:	b005      	add	sp, #20
 80011de:	bd30      	pop	{r4, r5, pc}

080011e0 <BSP_LED_Init>:
{
 80011e0:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 80011e2:	4604      	mov	r4, r0
{
 80011e4:	b087      	sub	sp, #28
  if (Led == LED1)
 80011e6:	b9c8      	cbnz	r0, 800121c <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80011ec:	a901      	add	r1, sp, #4
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 80011f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001208:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800120e:	f002 ffe5 	bl	80041dc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001212:	4622      	mov	r2, r4
 8001214:	4629      	mov	r1, r5
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <BSP_LED_Init+0x44>)
 8001218:	f003 f96e 	bl	80044f8 <HAL_GPIO_WritePin>
}
 800121c:	b007      	add	sp, #28
 800121e:	bd30      	pop	{r4, r5, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40022000 	.word	0x40022000

08001228 <BSP_PB_Init>:
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <BSP_PB_Init+0x94>)
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8001230:	b570      	push	{r4, r5, r6, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001232:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001234:	b08a      	sub	sp, #40	; 0x28
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4604      	mov	r4, r0
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	b990      	cbnz	r0, 8001266 <BSP_PB_Init+0x3e>
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	9b02      	ldr	r3, [sp, #8]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001244:	b9b9      	cbnz	r1, 8001276 <BSP_PB_Init+0x4e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <BSP_PB_Init+0x98>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001248:	9107      	str	r1, [sp, #28]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800124a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800124e:	e9cd 3105 	strd	r3, r1, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001252:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001254:	a905      	add	r1, sp, #20
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001256:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <BSP_PB_Init+0x9c>)
 800125a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800125e:	f002 ffbd 	bl	80041dc <HAL_GPIO_Init>
}
 8001262:	b00a      	add	sp, #40	; 0x28
 8001264:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001266:	2801      	cmp	r0, #1
 8001268:	d102      	bne.n	8001270 <BSP_PB_Init+0x48>
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	9b03      	ldr	r3, [sp, #12]
 800126e:	e7e9      	b.n	8001244 <BSP_PB_Init+0x1c>
 8001270:	9304      	str	r3, [sp, #16]
 8001272:	9b04      	ldr	r3, [sp, #16]
 8001274:	e7e6      	b.n	8001244 <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001276:	2901      	cmp	r1, #1
 8001278:	d1f3      	bne.n	8001262 <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800127a:	4d11      	ldr	r5, [pc, #68]	; (80012c0 <BSP_PB_Init+0x98>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800127c:	2600      	movs	r6, #0
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <BSP_PB_Init+0xa0>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001280:	a905      	add	r1, sp, #20
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001282:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8001286:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001288:	2302      	movs	r3, #2
 800128a:	e9cd 6307 	strd	r6, r3, [sp, #28]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <BSP_PB_Init+0xa4>)
 8001290:	42b4      	cmp	r4, r6
 8001292:	bf18      	it	ne
 8001294:	4613      	movne	r3, r2
 8001296:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <BSP_PB_Init+0x9c>)
 800129a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800129e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80012a2:	f002 ff9b 	bl	80041dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80012a6:	4632      	mov	r2, r6
 80012a8:	f994 0006 	ldrsb.w	r0, [r4, #6]
 80012ac:	210f      	movs	r1, #15
 80012ae:	9001      	str	r0, [sp, #4]
 80012b0:	f002 fb4c 	bl	800394c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80012b4:	9801      	ldr	r0, [sp, #4]
 80012b6:	f002 fb7b 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 80012ba:	e7d2      	b.n	8001262 <BSP_PB_Init+0x3a>
 80012bc:	40023800 	.word	0x40023800
 80012c0:	0800bbdc 	.word	0x0800bbdc
 80012c4:	2000005c 	.word	0x2000005c
 80012c8:	10210000 	.word	0x10210000
 80012cc:	10110000 	.word	0x10110000

080012d0 <BSP_PB_GetState>:
{
 80012d0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <BSP_PB_GetState+0x14>)
 80012d4:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <BSP_PB_GetState+0x18>)
 80012da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80012de:	f003 f905 	bl	80044ec <HAL_GPIO_ReadPin>
}
 80012e2:	bd08      	pop	{r3, pc}
 80012e4:	0800bbdc 	.word	0x0800bbdc
 80012e8:	2000005c 	.word	0x2000005c

080012ec <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 80012ec:	4801      	ldr	r0, [pc, #4]	; (80012f4 <AUDIO_IO_Init+0x8>)
 80012ee:	f7ff be9d 	b.w	800102c <I2Cx_Init>
 80012f2:	bf00      	nop
 80012f4:	2000062c 	.word	0x2000062c

080012f8 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 80012f8:	4770      	bx	lr
	...

080012fc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80012fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80012fe:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001300:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001302:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001306:	f10d 020e 	add.w	r2, sp, #14
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	460a      	mov	r2, r1
 8001310:	4601      	mov	r1, r0
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <AUDIO_IO_Write+0x24>)
 8001314:	f7ff ff34 	bl	8001180 <I2Cx_WriteMultiple>
}
 8001318:	b005      	add	sp, #20
 800131a:	f85d fb04 	ldr.w	pc, [sp], #4
 800131e:	bf00      	nop
 8001320:	2000062c 	.word	0x2000062c

08001324 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001326:	2300      	movs	r3, #0
{
 8001328:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800132a:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 800132e:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001332:	2302      	movs	r3, #2
 8001334:	9100      	str	r1, [sp, #0]
 8001336:	4601      	mov	r1, r0
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <AUDIO_IO_Read+0x2c>)
 800133c:	f7ff ff38 	bl	80011b0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001340:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001344:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8001346:	b280      	uxth	r0, r0
 8001348:	b005      	add	sp, #20
 800134a:	f85d fb04 	ldr.w	pc, [sp], #4
 800134e:	bf00      	nop
 8001350:	2000062c 	.word	0x2000062c

08001354 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001354:	f002 bad6 	b.w	8003904 <HAL_Delay>

08001358 <CAMERA_IO_Init>:
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
  I2Cx_Init(&hI2cExtHandler);
 8001358:	4801      	ldr	r0, [pc, #4]	; (8001360 <CAMERA_IO_Init+0x8>)
 800135a:	f7ff be67 	b.w	800102c <I2Cx_Init>
 800135e:	bf00      	nop
 8001360:	20000678 	.word	0x20000678

08001364 <EEPROM_IO_Init>:
 8001364:	f7ff bff8 	b.w	8001358 <CAMERA_IO_Init>

08001368 <EEPROM_IO_WriteData>:
  * @param  BufferSize: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_WriteData(uint16_t DevAddress, uint16_t MemAddress, uint8_t* pBuffer, uint32_t BufferSize)
{
  return (I2Cx_WriteMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001368:	b29b      	uxth	r3, r3
{
 800136a:	b507      	push	{r0, r1, r2, lr}
  return (I2Cx_WriteMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
 8001370:	460a      	mov	r2, r1
 8001372:	2302      	movs	r3, #2
 8001374:	b2c1      	uxtb	r1, r0
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <EEPROM_IO_WriteData+0x1c>)
 8001378:	f7ff ff02 	bl	8001180 <I2Cx_WriteMultiple>
}
 800137c:	b003      	add	sp, #12
 800137e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001382:	bf00      	nop
 8001384:	20000678 	.word	0x20000678

08001388 <EEPROM_IO_ReadData>:
  * @param  BufferSize: Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_ReadData(uint16_t DevAddress, uint16_t MemAddress, uint8_t* pBuffer, uint32_t BufferSize)
{
  return (I2Cx_ReadMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001388:	b29b      	uxth	r3, r3
{
 800138a:	b507      	push	{r0, r1, r2, lr}
  return (I2Cx_ReadMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 800138c:	e9cd 2300 	strd	r2, r3, [sp]
 8001390:	460a      	mov	r2, r1
 8001392:	2302      	movs	r3, #2
 8001394:	b2c1      	uxtb	r1, r0
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <EEPROM_IO_ReadData+0x1c>)
 8001398:	f7ff ff0a 	bl	80011b0 <I2Cx_ReadMultiple>
}
 800139c:	b003      	add	sp, #12
 800139e:	f85d fb04 	ldr.w	pc, [sp], #4
 80013a2:	bf00      	nop
 80013a4:	20000678 	.word	0x20000678

080013a8 <EEPROM_IO_IsDeviceReady>:
  * @param  DevAddress: Target device address
  * @param  Trials: Number of trials
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_IsDeviceReady(uint16_t DevAddress, uint32_t Trials)
{ 
 80013a8:	460a      	mov	r2, r1
  return (HAL_I2C_IsDeviceReady(i2c_handler, DevAddress, Trials, 1000));
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	4601      	mov	r1, r0
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <EEPROM_IO_IsDeviceReady+0x10>)
 80013b2:	f003 bbd3 	b.w	8004b5c <HAL_I2C_IsDeviceReady>
 80013b6:	bf00      	nop
 80013b8:	20000678 	.word	0x20000678

080013bc <TS_IO_Init>:
 80013bc:	f7ff bf96 	b.w	80012ec <AUDIO_IO_Init>

080013c0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013c2:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80013c6:	f10d 020f 	add.w	r2, sp, #15
 80013ca:	2301      	movs	r3, #1
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	460a      	mov	r2, r1
 80013d0:	4601      	mov	r1, r0
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <TS_IO_Write+0x20>)
 80013d6:	f7ff fed3 	bl	8001180 <I2Cx_WriteMultiple>
}
 80013da:	b005      	add	sp, #20
 80013dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e0:	2000062c 	.word	0x2000062c

080013e4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80013e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 80013e6:	2300      	movs	r3, #0
{
 80013e8:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80013ea:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 80013ee:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80013f2:	2301      	movs	r3, #1
 80013f4:	9100      	str	r1, [sp, #0]
 80013f6:	4601      	mov	r1, r0
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <TS_IO_Read+0x28>)
 80013fc:	f7ff fed8 	bl	80011b0 <I2Cx_ReadMultiple>

  return read_value;
}
 8001400:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001404:	b005      	add	sp, #20
 8001406:	f85d fb04 	ldr.w	pc, [sp], #4
 800140a:	bf00      	nop
 800140c:	2000062c 	.word	0x2000062c

08001410 <TS_IO_Delay>:
 8001410:	f002 ba78 	b.w	8003904 <HAL_Delay>

08001414 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SAIx_Out_DeInit+0x14>)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <SAIx_Out_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001418:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800141a:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800141c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001420:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001422:	f004 bfb2 	b.w	800638a <HAL_SAI_DeInit>
 8001426:	bf00      	nop
 8001428:	40015c04 	.word	0x40015c04
 800142c:	200006c4 	.word	0x200006c4

08001430 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SAIx_In_DeInit+0x14>)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001434:	681a      	ldr	r2, [r3, #0]
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001436:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800143a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800143e:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8001440:	f004 bfa3 	b.w	800638a <HAL_SAI_DeInit>
 8001444:	40015c24 	.word	0x40015c24
 8001448:	200006c4 	.word	0x200006c4

0800144c <SAIx_In_Init>:
{
 800144c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <SAIx_In_Init+0xd4>)
{
 8001452:	4690      	mov	r8, r2
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001454:	4c33      	ldr	r4, [pc, #204]	; (8001524 <SAIx_In_Init+0xd8>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001456:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001458:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800145a:	2601      	movs	r6, #1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800145c:	6023      	str	r3, [r4, #0]
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800145e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
{
 8001466:	460f      	mov	r7, r1
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001468:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800146c:	2180      	movs	r1, #128	; 0x80
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800146e:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001474:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001476:	f04f 0904 	mov.w	r9, #4
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800147a:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800147c:	2320      	movs	r3, #32
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 800147e:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 8001480:	4620      	mov	r0, r4
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001482:	f8c4 801c 	str.w	r8, [r4, #28]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001486:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001488:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800148a:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800148c:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800148e:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001490:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001492:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001496:	e9c4 150d 	strd	r1, r5, [r4, #52]	; 0x34
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800149a:	e9c4 b512 	strd	fp, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800149e:	e9c4 a514 	strd	sl, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80014a2:	e9c4 9717 	strd	r9, r7, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 80014a6:	f004 fe8f 	bl	80061c8 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80014aa:	481f      	ldr	r0, [pc, #124]	; (8001528 <SAIx_In_Init+0xdc>)
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	2320      	movs	r3, #32
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80014b0:	f8d0 c000 	ldr.w	ip, [r0]
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80014b4:	2180      	movs	r1, #128	; 0x80
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80014b6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80014ba:	f42c 3c80 	bic.w	ip, ip, #65536	; 0x10000
 80014be:	f8c0 c000 	str.w	ip, [r0]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80014c2:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80014c4:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80014c8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  HAL_SAI_Init(&haudio_in_sai);
 80014cc:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80014d0:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80014d4:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80014d8:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80014dc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80014e0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80014e4:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80014e8:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80014ec:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014f0:	e9c4 152e 	strd	r1, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014f4:	e9c4 b533 	strd	fp, r5, [r4, #204]	; 0xcc
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80014f8:	e9c4 a535 	strd	sl, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80014fc:	e9c4 5937 	strd	r5, r9, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8001500:	f004 fe62 	bl	80061c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6813      	ldr	r3, [r2, #0]
 8001508:	ea43 030b 	orr.w	r3, r3, fp
 800150c:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800150e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	ea43 030b 	orr.w	r3, r3, fp
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800151e:	bf00      	nop
 8001520:	40015c04 	.word	0x40015c04
 8001524:	200006c4 	.word	0x200006c4
 8001528:	40015c24 	.word	0x40015c24

0800152c <BSP_AUDIO_OUT_Play>:
{
 800152c:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <BSP_AUDIO_OUT_Play+0x34>)
{
 8001530:	4605      	mov	r5, r0
 8001532:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001534:	b28a      	uxth	r2, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4601      	mov	r1, r0
 800153a:	2034      	movs	r0, #52	; 0x34
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4798      	blx	r3
 8001540:	b960      	cbnz	r0, 800155c <BSP_AUDIO_OUT_Play+0x30>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001542:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8001546:	4629      	mov	r1, r5
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <BSP_AUDIO_OUT_Play+0x38>)
 800154a:	bf34      	ite	cc
 800154c:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8001550:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8001554:	f004 ffaa 	bl	80064ac <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8001558:	2000      	movs	r0, #0
}
 800155a:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800155c:	2001      	movs	r0, #1
 800155e:	e7fc      	b.n	800155a <BSP_AUDIO_OUT_Play+0x2e>
 8001560:	20022a20 	.word	0x20022a20
 8001564:	200006c4 	.word	0x200006c4

08001568 <BSP_AUDIO_OUT_Pause>:
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <BSP_AUDIO_OUT_Pause+0x20>)
 800156a:	2034      	movs	r0, #52	; 0x34
 800156c:	681b      	ldr	r3, [r3, #0]
{    
 800156e:	b510      	push	{r4, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	4798      	blx	r3
 8001574:	4604      	mov	r4, r0
 8001576:	b920      	cbnz	r0, 8001582 <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_SAI_DMAPause(&haudio_out_sai);
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <BSP_AUDIO_OUT_Pause+0x24>)
 800157a:	f004 ff26 	bl	80063ca <HAL_SAI_DMAPause>
    return AUDIO_OK;
 800157e:	4620      	mov	r0, r4
}
 8001580:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8001582:	2001      	movs	r0, #1
 8001584:	e7fc      	b.n	8001580 <BSP_AUDIO_OUT_Pause+0x18>
 8001586:	bf00      	nop
 8001588:	20022a20 	.word	0x20022a20
 800158c:	200006c4 	.word	0x200006c4

08001590 <BSP_AUDIO_OUT_Resume>:
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <BSP_AUDIO_OUT_Resume+0x20>)
 8001592:	2034      	movs	r0, #52	; 0x34
 8001594:	681b      	ldr	r3, [r3, #0]
{    
 8001596:	b510      	push	{r4, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4798      	blx	r3
 800159c:	4604      	mov	r4, r0
 800159e:	b920      	cbnz	r0, 80015aa <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_SAI_DMAResume(&haudio_out_sai);
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <BSP_AUDIO_OUT_Resume+0x24>)
 80015a2:	f004 ff22 	bl	80063ea <HAL_SAI_DMAResume>
    return AUDIO_OK;
 80015a6:	4620      	mov	r0, r4
}
 80015a8:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7fc      	b.n	80015a8 <BSP_AUDIO_OUT_Resume+0x18>
 80015ae:	bf00      	nop
 80015b0:	20022a20 	.word	0x20022a20
 80015b4:	200006c4 	.word	0x200006c4

080015b8 <BSP_AUDIO_OUT_Stop>:
{
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <BSP_AUDIO_OUT_Stop+0x2c>)
 80015be:	f004 ff2b 	bl	8006418 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <BSP_AUDIO_OUT_Stop+0x30>)
 80015c4:	4629      	mov	r1, r5
 80015c6:	2034      	movs	r0, #52	; 0x34
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4798      	blx	r3
 80015ce:	4604      	mov	r4, r0
 80015d0:	b930      	cbnz	r0, 80015e0 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 80015d2:	2d01      	cmp	r5, #1
 80015d4:	d102      	bne.n	80015dc <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 80015d6:	4628      	mov	r0, r5
 80015d8:	f002 f994 	bl	8003904 <HAL_Delay>
    return AUDIO_OK;
 80015dc:	4620      	mov	r0, r4
 80015de:	e000      	b.n	80015e2 <BSP_AUDIO_OUT_Stop+0x2a>
    return AUDIO_ERROR;
 80015e0:	2001      	movs	r0, #1
}
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	200006c4 	.word	0x200006c4
 80015e8:	20022a20 	.word	0x20022a20

080015ec <BSP_AUDIO_OUT_SetVolume>:
{
 80015ec:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
 80015f0:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80015f2:	2034      	movs	r0, #52	; 0x34
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4798      	blx	r3
}
 80015fa:	3800      	subs	r0, #0
 80015fc:	bf18      	it	ne
 80015fe:	2001      	movne	r0, #1
 8001600:	bd08      	pop	{r3, pc}
 8001602:	bf00      	nop
 8001604:	20022a20 	.word	0x20022a20

08001608 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 8001608:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800160a:	4c08      	ldr	r4, [pc, #32]	; (800162c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8001616:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001618:	4620      	mov	r0, r4
 800161a:	f004 fdd5 	bl	80061c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bd10      	pop	{r4, pc}
 800162a:	bf00      	nop
 800162c:	200006c4 	.word	0x200006c4

08001630 <HAL_SAI_TxCpltCallback>:
{
 8001630:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001632:	f006 fe21 	bl	8008278 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001636:	bd08      	pop	{r3, pc}

08001638 <HAL_SAI_TxHalfCpltCallback>:
{
 8001638:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800163a:	f006 fe27 	bl	800828c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800163e:	bd08      	pop	{r3, pc}

08001640 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001644:	4c4d      	ldr	r4, [pc, #308]	; (800177c <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 8001646:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001648:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800164c:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800164e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001650:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001652:	f04f 080a 	mov.w	r8, #10
{ 
 8001656:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001658:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800165c:	a905      	add	r1, sp, #20
 800165e:	4848      	ldr	r0, [pc, #288]	; (8001780 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001660:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001664:	6463      	str	r3, [r4, #68]	; 0x44
 8001666:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001676:	6323      	str	r3, [r4, #48]	; 0x30
 8001678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001682:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6323      	str	r3, [r4, #48]	; 0x30
 800168a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001694:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6323      	str	r3, [r4, #48]	; 0x30
 800169c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800169e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	9303      	str	r3, [sp, #12]
 80016a8:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016aa:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016ac:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016b0:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80016b4:	f002 fd92 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80016b8:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016ba:	a905      	add	r1, sp, #20
 80016bc:	4830      	ldr	r0, [pc, #192]	; (8001780 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80016be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016c2:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016c6:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016ca:	f002 fd87 	bl	80041dc <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016ce:	a905      	add	r1, sp, #20
 80016d0:	482b      	ldr	r0, [pc, #172]	; (8001780 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80016d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016d6:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016da:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016de:	f002 fd7d 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80016e2:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80016e4:	a905      	add	r1, sp, #20
 80016e6:	4826      	ldr	r0, [pc, #152]	; (8001780 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80016e8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016ec:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016f0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80016f4:	f002 fd72 	bl	80041dc <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80016f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80016fa:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80016fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001700:	6323      	str	r3, [r4, #48]	; 0x30
 8001702:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001708:	9304      	str	r3, [sp, #16]
 800170a:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <BSP_AUDIO_OUT_MspInit+0x144>)
 800170e:	429a      	cmp	r2, r3
 8001710:	d129      	bne.n	8001766 <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <BSP_AUDIO_OUT_MspInit+0x148>)
 8001714:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001718:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800171c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001720:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001724:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001728:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800172c:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001730:	e9c3 2a43 	strd	r2, sl, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001738:	e9c3 1246 	strd	r1, r2, [r3, #280]	; 0x118
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800173c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001740:	e9c3 0248 	strd	r0, r2, [r3, #288]	; 0x120
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001744:	2204      	movs	r2, #4
 8001746:	e9c3 424a 	strd	r4, r2, [r3, #296]	; 0x128
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800174a:	f503 7484 	add.w	r4, r3, #264	; 0x108
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001750:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001752:	66f4      	str	r4, [r6, #108]	; 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001754:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001758:	e9c3 754c 	strd	r7, r5, [r3, #304]	; 0x130
    HAL_DMA_DeInit(&hdma_sai_tx);
 800175c:	f002 f9f6 	bl	8003b4c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 8001760:	4620      	mov	r0, r4
 8001762:	f002 f973 	bl	8003a4c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	210e      	movs	r1, #14
 800176a:	203c      	movs	r0, #60	; 0x3c
 800176c:	f002 f8ee 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001770:	203c      	movs	r0, #60	; 0x3c
 8001772:	f002 f91d 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8001776:	b00a      	add	sp, #40	; 0x28
 8001778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40022000 	.word	0x40022000
 8001784:	40015c04 	.word	0x40015c04
 8001788:	200006c4 	.word	0x200006c4
 800178c:	40026470 	.word	0x40026470

08001790 <BSP_AUDIO_OUT_MspDeInit>:
{
 8001790:	b510      	push	{r4, lr}
 8001792:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001794:	203c      	movs	r0, #60	; 0x3c
 8001796:	f002 f919 	bl	80039cc <HAL_NVIC_DisableIRQ>
    if(hsai->Instance == AUDIO_OUT_SAIx)
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <BSP_AUDIO_OUT_MspDeInit+0x50>)
 800179c:	6822      	ldr	r2, [r4, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d102      	bne.n	80017a8 <BSP_AUDIO_OUT_MspDeInit+0x18>
      HAL_DMA_DeInit(hsai->hdmatx);
 80017a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017a4:	f002 f9d2 	bl	8003b4c <HAL_DMA_DeInit>
    __HAL_SAI_DISABLE(hsai);  
 80017a8:	6822      	ldr	r2, [r4, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <BSP_AUDIO_OUT_MspDeInit+0x54>)
    __HAL_SAI_DISABLE(hsai);  
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 80017b6:	f002 fdf7 	bl	80043a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 80017ba:	2120      	movs	r1, #32
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <BSP_AUDIO_OUT_MspDeInit+0x54>)
 80017be:	f002 fdf3 	bl	80043a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 80017c2:	2140      	movs	r1, #64	; 0x40
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <BSP_AUDIO_OUT_MspDeInit+0x54>)
 80017c6:	f002 fdef 	bl	80043a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 80017ca:	2110      	movs	r1, #16
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <BSP_AUDIO_OUT_MspDeInit+0x54>)
 80017ce:	f002 fdeb 	bl	80043a8 <HAL_GPIO_DeInit>
    AUDIO_OUT_SAIx_CLK_DISABLE();
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <BSP_AUDIO_OUT_MspDeInit+0x58>)
 80017d4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80017d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017da:	6453      	str	r3, [r2, #68]	; 0x44
}
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	bf00      	nop
 80017e0:	40015c04 	.word	0x40015c04
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40023800 	.word	0x40023800

080017ec <BSP_AUDIO_OUT_DeInit>:
{
 80017ec:	b508      	push	{r3, lr}
  SAIx_Out_DeInit();
 80017ee:	f7ff fe11 	bl	8001414 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 80017f2:	2100      	movs	r1, #0
 80017f4:	4801      	ldr	r0, [pc, #4]	; (80017fc <BSP_AUDIO_OUT_DeInit+0x10>)
 80017f6:	f7ff ffcb 	bl	8001790 <BSP_AUDIO_OUT_MspDeInit>
}
 80017fa:	bd08      	pop	{r3, pc}
 80017fc:	200006c4 	.word	0x200006c4

08001800 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001800:	b510      	push	{r4, lr}
 8001802:	b0a2      	sub	sp, #136	; 0x88
 8001804:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001806:	a801      	add	r0, sp, #4
 8001808:	f004 fb98 	bl	8005f3c <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800180c:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001810:	429c      	cmp	r4, r3
 8001812:	d007      	beq.n	8001824 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001814:	f245 6322 	movw	r3, #22050	; 0x5622
 8001818:	429c      	cmp	r4, r3
 800181a:	d003      	beq.n	8001824 <BSP_AUDIO_OUT_ClockConfig+0x24>
 800181c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001820:	429c      	cmp	r4, r3
 8001822:	d111      	bne.n	8001848 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001824:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001828:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800182a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182e:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001830:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001834:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800183a:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800183c:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800183e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001840:	f004 f8f4 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
}
 8001844:	b022      	add	sp, #136	; 0x88
 8001846:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001848:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800184c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800184e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001852:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001854:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001858:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800185a:	2307      	movs	r3, #7
 800185c:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	e7ec      	b.n	800183c <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

08001864 <BSP_AUDIO_OUT_Init>:
{ 
 8001864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001868:	4616      	mov	r6, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800186a:	4c2f      	ldr	r4, [pc, #188]	; (8001928 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 800186c:	4607      	mov	r7, r0
 800186e:	4688      	mov	r8, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001870:	4d2e      	ldr	r5, [pc, #184]	; (800192c <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 8001872:	f7ff fdcf 	bl	8001414 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001876:	4631      	mov	r1, r6
 8001878:	2200      	movs	r2, #0
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff ffc0 	bl	8001800 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001880:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001882:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001884:	f004 ff34 	bl	80066f0 <HAL_SAI_GetState>
 8001888:	4601      	mov	r1, r0
 800188a:	b910      	cbnz	r0, 8001892 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff fed7 	bl	8001640 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001892:	682b      	ldr	r3, [r5, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001894:	f04f 0900 	mov.w	r9, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001898:	6025      	str	r5, [r4, #0]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800189a:	2240      	movs	r2, #64	; 0x40
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80018a0:	2104      	movs	r1, #4
  HAL_SAI_Init(&haudio_out_sai);
 80018a2:	4821      	ldr	r0, [pc, #132]	; (8001928 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80018a4:	602b      	str	r3, [r5, #0]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80018a6:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80018a8:	2501      	movs	r5, #1
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80018aa:	61e6      	str	r6, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80018ac:	f8c4 9004 	str.w	r9, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80018b0:	f8c4 9014 	str.w	r9, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80018b4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80018b8:	63e5      	str	r5, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80018ba:	f8c4 9008 	str.w	r9, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80018be:	61a5      	str	r5, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018c0:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018c4:	e9c4 390d 	strd	r3, r9, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80018ce:	2320      	movs	r3, #32
 80018d0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80018d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018d8:	e9c4 3912 	strd	r3, r9, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80018dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80018e0:	e9c4 3914 	strd	r3, r9, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80018e4:	230f      	movs	r3, #15
 80018e6:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 80018ea:	f004 fc6d 	bl	80061c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80018ee:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80018f0:	4c0f      	ldr	r4, [pc, #60]	; (8001930 <BSP_AUDIO_OUT_Init+0xcc>)
 80018f2:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80018f4:	6813      	ldr	r3, [r2, #0]
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80018fc:	68a3      	ldr	r3, [r4, #8]
 80018fe:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8001900:	f648 1394 	movw	r3, #35220	; 0x8994
 8001904:	4298      	cmp	r0, r3
 8001906:	d10d      	bne.n	8001924 <BSP_AUDIO_OUT_Init+0xc0>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800190a:	2034      	movs	r0, #52	; 0x34
 800190c:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <BSP_AUDIO_OUT_Init+0xd0>)
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001910:	4642      	mov	r2, r8
 8001912:	4639      	mov	r1, r7
    audio_drv = &wm8994_drv; 
 8001914:	601c      	str	r4, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001916:	2034      	movs	r0, #52	; 0x34
 8001918:	6824      	ldr	r4, [r4, #0]
 800191a:	4633      	mov	r3, r6
 800191c:	47a0      	blx	r4
    ret = AUDIO_OK;
 800191e:	4648      	mov	r0, r9
}
 8001920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret = AUDIO_ERROR;
 8001924:	4628      	mov	r0, r5
 8001926:	e7fb      	b.n	8001920 <BSP_AUDIO_OUT_Init+0xbc>
 8001928:	200006c4 	.word	0x200006c4
 800192c:	40015c04 	.word	0x40015c04
 8001930:	2000002c 	.word	0x2000002c
 8001934:	20022a20 	.word	0x20022a20

08001938 <BSP_AUDIO_OUT_SetFrequency>:
{ 
 8001938:	b538      	push	{r3, r4, r5, lr}
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800193a:	4c0b      	ldr	r4, [pc, #44]	; (8001968 <BSP_AUDIO_OUT_SetFrequency+0x30>)
 800193c:	4601      	mov	r1, r0
{ 
 800193e:	4605      	mov	r5, r0
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001940:	2200      	movs	r2, #0
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff ff5c 	bl	8001800 <BSP_AUDIO_OUT_ClockConfig>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001948:	6822      	ldr	r2, [r4, #0]
  HAL_SAI_Init(&haudio_out_sai);
 800194a:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001954:	61e5      	str	r5, [r4, #28]
  HAL_SAI_Init(&haudio_out_sai);
 8001956:	f004 fc37 	bl	80061c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bd38      	pop	{r3, r4, r5, pc}
 8001966:	bf00      	nop
 8001968:	200006c4 	.word	0x200006c4

0800196c <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800196c:	b28a      	uxth	r2, r1
 800196e:	4601      	mov	r1, r0
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <BSP_AUDIO_IN_Record+0x10>)
{
 8001972:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001974:	f004 fe08 	bl	8006588 <HAL_SAI_Receive_DMA>
}
 8001978:	2000      	movs	r0, #0
 800197a:	bd08      	pop	{r3, pc}
 800197c:	20000748 	.word	0x20000748

08001980 <BSP_AUDIO_IN_Stop>:
{
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <BSP_AUDIO_IN_Stop+0x2c>)
 8001986:	f004 fd47 	bl	8006418 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <BSP_AUDIO_IN_Stop+0x30>)
 800198c:	4629      	mov	r1, r5
 800198e:	2034      	movs	r0, #52	; 0x34
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4798      	blx	r3
 8001996:	4604      	mov	r4, r0
 8001998:	b930      	cbnz	r0, 80019a8 <BSP_AUDIO_IN_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 800199a:	2d01      	cmp	r5, #1
 800199c:	d102      	bne.n	80019a4 <BSP_AUDIO_IN_Stop+0x24>
      HAL_Delay(1);
 800199e:	4628      	mov	r0, r5
 80019a0:	f001 ffb0 	bl	8003904 <HAL_Delay>
    return AUDIO_OK;
 80019a4:	4620      	mov	r0, r4
 80019a6:	e000      	b.n	80019aa <BSP_AUDIO_IN_Stop+0x2a>
    return AUDIO_ERROR;
 80019a8:	2001      	movs	r0, #1
}
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
 80019ac:	20000748 	.word	0x20000748
 80019b0:	20022a20 	.word	0x20022a20

080019b4 <HAL_SAI_RxCpltCallback>:
{
 80019b4:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80019b6:	f006 fd9b 	bl	80084f0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80019ba:	bd08      	pop	{r3, pc}

080019bc <HAL_SAI_RxHalfCpltCallback>:
{
 80019bc:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80019be:	f006 fd9d 	bl	80084fc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80019c2:	bd08      	pop	{r3, pc}

080019c4 <HAL_SAI_ErrorCallback>:
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <HAL_SAI_ErrorCallback+0x2c>)
 80019c8:	f004 fe92 	bl	80066f0 <HAL_SAI_GetState>
 80019cc:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80019ce:	4809      	ldr	r0, [pc, #36]	; (80019f4 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80019d0:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80019d4:	f004 fe8c 	bl	80066f0 <HAL_SAI_GetState>
 80019d8:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80019da:	2d02      	cmp	r5, #2
 80019dc:	d101      	bne.n	80019e2 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 80019de:	f006 fc61 	bl	80082a4 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80019e2:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80019e6:	2c02      	cmp	r4, #2
 80019e8:	d101      	bne.n	80019ee <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 80019ea:	f006 fd8d 	bl	8008508 <BSP_AUDIO_IN_Error_CallBack>
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	200006c4 	.word	0x200006c4
 80019f4:	20000748 	.word	0x20000748

080019f8 <BSP_AUDIO_IN_MspInit>:
{
 80019f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 80019fc:	4c3d      	ldr	r4, [pc, #244]	; (8001af4 <BSP_AUDIO_IN_MspInit+0xfc>)
{
 80019fe:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a00:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001a02:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a04:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a06:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
 8001a0a:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001a0c:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001a12:	4839      	ldr	r0, [pc, #228]	; (8001af8 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a14:	6463      	str	r3, [r4, #68]	; 0x44
 8001a16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8001a20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a26:	6323      	str	r3, [r4, #48]	; 0x30
 8001a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001a32:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a34:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001a38:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a3a:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001a3e:	f002 fbcd 	bl	80041dc <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8001a42:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001a44:	a905      	add	r1, sp, #20
 8001a46:	482d      	ldr	r0, [pc, #180]	; (8001afc <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6323      	str	r3, [r4, #48]	; 0x30
 8001a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a54:	9303      	str	r3, [sp, #12]
 8001a56:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a5c:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a60:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001a64:	f002 fbba 	bl	80041dc <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001a68:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001a6a:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a70:	6323      	str	r3, [r4, #48]	; 0x30
 8001a72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <BSP_AUDIO_IN_MspInit+0x108>)
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d125      	bne.n	8001ace <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a8c:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001a90:	f503 74b4 	add.w	r4, r3, #360	; 0x168
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001a94:	f8c3 518c 	str.w	r5, [r3, #396]	; 0x18c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001a98:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001a9c:	6734      	str	r4, [r6, #112]	; 0x70
 8001a9e:	f8c3 61a0 	str.w	r6, [r3, #416]	; 0x1a0
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001aa2:	e9c3 125f 	strd	r1, r2, [r3, #380]	; 0x17c
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aaa:	e9c3 0261 	strd	r0, r2, [r3, #388]	; 0x184
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001aae:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001ab0:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ab2:	e9c3 2564 	strd	r2, r5, [r3, #400]	; 0x190
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001ab8:	e9c3 555b 	strd	r5, r5, [r3, #364]	; 0x16c
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001abc:	e9c3 585d 	strd	r5, r8, [r3, #372]	; 0x174
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ac0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001ac4:	f002 f842 	bl	8003b4c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f001 ffbf 	bl	8003a4c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	2046      	movs	r0, #70	; 0x46
 8001ad4:	f001 ff3a 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8001ad8:	2046      	movs	r0, #70	; 0x46
 8001ada:	f001 ff69 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	2028      	movs	r0, #40	; 0x28
 8001ae4:	f001 ff32 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8001ae8:	2028      	movs	r0, #40	; 0x28
 8001aea:	f001 ff61 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8001aee:	b00a      	add	sp, #40	; 0x28
 8001af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40021800 	.word	0x40021800
 8001afc:	40021c00 	.word	0x40021c00
 8001b00:	40015c24 	.word	0x40015c24
 8001b04:	200006c4 	.word	0x200006c4
 8001b08:	400264b8 	.word	0x400264b8

08001b0c <BSP_AUDIO_IN_InitEx>:
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001b0c:	f420 7380 	bic.w	r3, r0, #256	; 0x100
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
{
 8001b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b16:	4604      	mov	r4, r0
 8001b18:	460d      	mov	r5, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001b1a:	d002      	beq.n	8001b22 <BSP_AUDIO_IN_InitEx+0x16>
    ret = AUDIO_ERROR;
 8001b1c:	2001      	movs	r0, #1
}
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001b22:	4e1d      	ldr	r6, [pc, #116]	; (8001b98 <BSP_AUDIO_IN_InitEx+0x8c>)
    SAIx_In_DeInit();
 8001b24:	f7ff fc84 	bl	8001430 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001b28:	4629      	mov	r1, r5
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8001b30:	f7ff fe66 	bl	8001800 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b34:	4630      	mov	r0, r6
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <BSP_AUDIO_IN_InitEx+0x90>)
 8001b38:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001b3c:	f004 fdd8 	bl	80066f0 <HAL_SAI_GetState>
 8001b40:	4601      	mov	r1, r0
 8001b42:	b948      	cbnz	r0, 8001b58 <BSP_AUDIO_IN_InitEx+0x4c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8001b44:	9001      	str	r0, [sp, #4]
 8001b46:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8001b4a:	f7ff fd79 	bl	8001640 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001b4e:	9901      	ldr	r1, [sp, #4]
 8001b50:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8001b54:	f7ff ff50 	bl	80019f8 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8001b58:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001b5c:	4e10      	ldr	r6, [pc, #64]	; (8001ba0 <BSP_AUDIO_IN_InitEx+0x94>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8001b5e:	462a      	mov	r2, r5
 8001b60:	f04f 0001 	mov.w	r0, #1
 8001b64:	bf0c      	ite	eq
 8001b66:	210a      	moveq	r1, #10
 8001b68:	2105      	movne	r1, #5
 8001b6a:	f7ff fc6f 	bl	800144c <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001b6e:	68b3      	ldr	r3, [r6, #8]
 8001b70:	2034      	movs	r0, #52	; 0x34
 8001b72:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 8001b74:	f648 1394 	movw	r3, #35220	; 0x8994
 8001b78:	4298      	cmp	r0, r3
 8001b7a:	d1cf      	bne.n	8001b1c <BSP_AUDIO_IN_InitEx+0x10>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001b7c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001b7e:	2034      	movs	r0, #52	; 0x34
 8001b80:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <BSP_AUDIO_IN_InitEx+0x98>)
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8001b84:	2264      	movs	r2, #100	; 0x64
 8001b86:	4621      	mov	r1, r4
      audio_drv = &wm8994_drv;
 8001b88:	601e      	str	r6, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8001b8a:	2034      	movs	r0, #52	; 0x34
 8001b8c:	6836      	ldr	r6, [r6, #0]
 8001b8e:	462b      	mov	r3, r5
 8001b90:	47b0      	blx	r6
      ret = AUDIO_OK;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e7c3      	b.n	8001b1e <BSP_AUDIO_IN_InitEx+0x12>
 8001b96:	bf00      	nop
 8001b98:	200006c4 	.word	0x200006c4
 8001b9c:	40015c24 	.word	0x40015c24
 8001ba0:	2000002c 	.word	0x2000002c
 8001ba4:	20022a20 	.word	0x20022a20

08001ba8 <BSP_AUDIO_IN_Init>:
{
 8001ba8:	4613      	mov	r3, r2
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8001baa:	460a      	mov	r2, r1
 8001bac:	4601      	mov	r1, r0
 8001bae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bb2:	f7ff bfab 	b.w	8001b0c <BSP_AUDIO_IN_InitEx>
	...

08001bb8 <BSP_AUDIO_IN_OUT_Init>:
  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8001bb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	460e      	mov	r6, r1
 8001bc0:	4615      	mov	r5, r2
  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8001bc2:	d001      	beq.n	8001bc8 <BSP_AUDIO_IN_OUT_Init+0x10>
    ret = AUDIO_ERROR;
 8001bc4:	2001      	movs	r0, #1
}
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001bc8:	4c1d      	ldr	r4, [pc, #116]	; (8001c40 <BSP_AUDIO_IN_OUT_Init+0x88>)
    SAIx_In_DeInit();
 8001bca:	f7ff fc31 	bl	8001430 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8001bce:	f7ff fc21 	bl	8001414 <SAIx_Out_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8001bda:	f7ff fe11 	bl	8001800 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001bde:	4620      	mov	r0, r4
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <BSP_AUDIO_IN_OUT_Init+0x8c>)
 8001be2:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001be6:	f004 fd83 	bl	80066f0 <HAL_SAI_GetState>
 8001bea:	4601      	mov	r1, r0
 8001bec:	b918      	cbnz	r0, 8001bf6 <BSP_AUDIO_IN_OUT_Init+0x3e>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001bee:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8001bf2:	f7ff ff01 	bl	80019f8 <BSP_AUDIO_IN_MspInit>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <BSP_AUDIO_IN_OUT_Init+0x90>)
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001bf8:	4811      	ldr	r0, [pc, #68]	; (8001c40 <BSP_AUDIO_IN_OUT_Init+0x88>)
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001bfa:	6023      	str	r3, [r4, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001bfc:	f004 fd78 	bl	80066f0 <HAL_SAI_GetState>
 8001c00:	4601      	mov	r1, r0
 8001c02:	b910      	cbnz	r0, 8001c0a <BSP_AUDIO_IN_OUT_Init+0x52>
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001c04:	480e      	ldr	r0, [pc, #56]	; (8001c40 <BSP_AUDIO_IN_OUT_Init+0x88>)
 8001c06:	f7ff fd1b 	bl	8001640 <BSP_AUDIO_OUT_MspInit>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001c0a:	4c10      	ldr	r4, [pc, #64]	; (8001c4c <BSP_AUDIO_IN_OUT_Init+0x94>)
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8001c0c:	462a      	mov	r2, r5
 8001c0e:	210a      	movs	r1, #10
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fc1b 	bl	800144c <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001c16:	68a3      	ldr	r3, [r4, #8]
 8001c18:	2034      	movs	r0, #52	; 0x34
 8001c1a:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 8001c1c:	f648 1394 	movw	r3, #35220	; 0x8994
 8001c20:	4298      	cmp	r0, r3
 8001c22:	d1cf      	bne.n	8001bc4 <BSP_AUDIO_IN_OUT_Init+0xc>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c26:	2034      	movs	r0, #52	; 0x34
 8001c28:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <BSP_AUDIO_IN_OUT_Init+0x98>)
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8001c2c:	2264      	movs	r2, #100	; 0x64
 8001c2e:	f446 7100 	orr.w	r1, r6, #512	; 0x200
      audio_drv = &wm8994_drv;
 8001c32:	601c      	str	r4, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8001c34:	2034      	movs	r0, #52	; 0x34
 8001c36:	6824      	ldr	r4, [r4, #0]
 8001c38:	462b      	mov	r3, r5
 8001c3a:	47a0      	blx	r4
      ret = AUDIO_OK;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e7c2      	b.n	8001bc6 <BSP_AUDIO_IN_OUT_Init+0xe>
 8001c40:	200006c4 	.word	0x200006c4
 8001c44:	40015c24 	.word	0x40015c24
 8001c48:	40015c04 	.word	0x40015c04
 8001c4c:	2000002c 	.word	0x2000002c
 8001c50:	20022a20 	.word	0x20022a20

08001c54 <BSP_EEPROM_Init>:
  *             and if problem, check the 2nd one (EEPROM_I2C_ADDRESS_A02)
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0)
  */
uint32_t BSP_EEPROM_Init(void)
{ 
 8001c54:	b510      	push	{r4, lr}
  /* I2C Initialization */
  EEPROM_IO_Init();
 8001c56:	f7ff fb85 	bl	8001364 <EEPROM_IO_Init>
  
  /* Select the EEPROM address for A01 and check if OK */
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 8001c5a:	4c0b      	ldr	r4, [pc, #44]	; (8001c88 <BSP_EEPROM_Init+0x34>)
 8001c5c:	23a0      	movs	r3, #160	; 0xa0
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 8001c5e:	f640 31b8 	movw	r1, #3000	; 0xbb8
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 8001c62:	8023      	strh	r3, [r4, #0]
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 8001c64:	8820      	ldrh	r0, [r4, #0]
 8001c66:	b280      	uxth	r0, r0
 8001c68:	f7ff fb9e 	bl	80013a8 <EEPROM_IO_IsDeviceReady>
 8001c6c:	b150      	cbz	r0, 8001c84 <BSP_EEPROM_Init+0x30>
  {
    /* Select the EEPROM address for A02 and check if OK */
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 8001c6e:	23a6      	movs	r3, #166	; 0xa6
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8001c70:	f640 31b8 	movw	r1, #3000	; 0xbb8
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 8001c74:	8023      	strh	r3, [r4, #0]
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8001c76:	8820      	ldrh	r0, [r4, #0]
 8001c78:	b280      	uxth	r0, r0
 8001c7a:	f7ff fb95 	bl	80013a8 <EEPROM_IO_IsDeviceReady>
 8001c7e:	3800      	subs	r0, #0
 8001c80:	bf18      	it	ne
 8001c82:	2001      	movne	r0, #1
    {
      return EEPROM_FAIL;
    }
  }
  return EEPROM_OK;
}
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	bf00      	nop
 8001c88:	200008ec 	.word	0x200008ec

08001c8c <BSP_EEPROM_ReadBuffer>:
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0) or the timeout user callback.
  */
uint32_t BSP_EEPROM_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t* NumByteToRead)
{  
  uint32_t buffersize = *NumByteToRead;
 8001c8c:	8813      	ldrh	r3, [r2, #0]
  
  /* Set the pointer to the Number of data to be read. This pointer will be used 
     by the DMA Transfer Completer interrupt Handler in order to reset the 
     variable to 0. User should check on this variable in order to know if the 
     DMA transfer has been complete or not. */
  EEPROMDataRead = *NumByteToRead;
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <BSP_EEPROM_ReadBuffer+0x20>)
{  
 8001c90:	b510      	push	{r4, lr}
  EEPROMDataRead = *NumByteToRead;
 8001c92:	8013      	strh	r3, [r2, #0]
  
  if(EEPROM_IO_ReadData(EEPROMAddress, ReadAddr, pBuffer, buffersize) != HAL_OK)
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <BSP_EEPROM_ReadBuffer+0x24>)
 8001c96:	8814      	ldrh	r4, [r2, #0]
 8001c98:	4602      	mov	r2, r0
 8001c9a:	b2a0      	uxth	r0, r4
 8001c9c:	f7ff fb74 	bl	8001388 <EEPROM_IO_ReadData>
 8001ca0:	b110      	cbz	r0, 8001ca8 <BSP_EEPROM_ReadBuffer+0x1c>
  {
    BSP_EEPROM_TIMEOUT_UserCallback();
 8001ca2:	f006 fe7b 	bl	800899c <BSP_EEPROM_TIMEOUT_UserCallback>
    return EEPROM_FAIL;
 8001ca6:	2001      	movs	r0, #1
  }

  /* If all operations OK, return EEPROM_OK (0) */
  return EEPROM_OK;
}
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	bf00      	nop
 8001cac:	20022a24 	.word	0x20022a24
 8001cb0:	200008ec 	.word	0x200008ec

08001cb4 <BSP_EEPROM_WaitEepromStandbyState>:
  * 
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0) or the timeout user callback.
  */
uint32_t BSP_EEPROM_WaitEepromStandbyState(void)      
{
 8001cb4:	b508      	push	{r3, lr}
  /* Check if the maximum allowed number of trials has bee reached */
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <BSP_EEPROM_WaitEepromStandbyState+0x1c>)
 8001cb8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001cbc:	8818      	ldrh	r0, [r3, #0]
 8001cbe:	b280      	uxth	r0, r0
 8001cc0:	f7ff fb72 	bl	80013a8 <EEPROM_IO_IsDeviceReady>
 8001cc4:	b110      	cbz	r0, 8001ccc <BSP_EEPROM_WaitEepromStandbyState+0x18>
  {
    /* If the maximum number of trials has been reached, exit the function */
    BSP_EEPROM_TIMEOUT_UserCallback();
 8001cc6:	f006 fe69 	bl	800899c <BSP_EEPROM_TIMEOUT_UserCallback>
    return EEPROM_TIMEOUT;
 8001cca:	2002      	movs	r0, #2
  }
  return EEPROM_OK;
}
 8001ccc:	bd08      	pop	{r3, pc}
 8001cce:	bf00      	nop
 8001cd0:	200008ec 	.word	0x200008ec

08001cd4 <BSP_EEPROM_WritePage>:
{ 
 8001cd4:	b510      	push	{r4, lr}
  uint32_t buffersize = *NumByteToWrite;
 8001cd6:	7813      	ldrb	r3, [r2, #0]
  EEPROMDataWrite = *NumByteToWrite;  
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <BSP_EEPROM_WritePage+0x30>)
 8001cda:	7013      	strb	r3, [r2, #0]
  if(EEPROM_IO_WriteData(EEPROMAddress, WriteAddr, pBuffer, buffersize) != HAL_OK)
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <BSP_EEPROM_WritePage+0x34>)
 8001cde:	8814      	ldrh	r4, [r2, #0]
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	b2a0      	uxth	r0, r4
 8001ce4:	f7ff fb40 	bl	8001368 <EEPROM_IO_WriteData>
 8001ce8:	b148      	cbz	r0, 8001cfe <BSP_EEPROM_WritePage+0x2a>
    status = EEPROM_FAIL;
 8001cea:	2401      	movs	r4, #1
    BSP_EEPROM_TIMEOUT_UserCallback();
 8001cec:	f006 fe56 	bl	800899c <BSP_EEPROM_TIMEOUT_UserCallback>
  if(BSP_EEPROM_WaitEepromStandbyState() != EEPROM_OK) 
 8001cf0:	f7ff ffe0 	bl	8001cb4 <BSP_EEPROM_WaitEepromStandbyState>
 8001cf4:	2800      	cmp	r0, #0
}
 8001cf6:	bf0c      	ite	eq
 8001cf8:	4620      	moveq	r0, r4
 8001cfa:	2001      	movne	r0, #1
 8001cfc:	bd10      	pop	{r4, pc}
  uint32_t status = EEPROM_OK;
 8001cfe:	4604      	mov	r4, r0
 8001d00:	e7f6      	b.n	8001cf0 <BSP_EEPROM_WritePage+0x1c>
 8001d02:	bf00      	nop
 8001d04:	20022a26 	.word	0x20022a26
 8001d08:	200008ec 	.word	0x200008ec

08001d0c <BSP_EEPROM_WriteBuffer>:
{
 8001d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(addr == 0) 
 8001d10:	f011 0903 	ands.w	r9, r1, #3
{
 8001d14:	4607      	mov	r7, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	4615      	mov	r5, r2
  numofsingle = NumByteToWrite % EEPROM_PAGESIZE;
 8001d1a:	f002 0803 	and.w	r8, r2, #3
  if(addr == 0) 
 8001d1e:	d126      	bne.n	8001d6e <BSP_EEPROM_WriteBuffer+0x62>
    if(numofpage == 0) 
 8001d20:	2a03      	cmp	r2, #3
 8001d22:	d93f      	bls.n	8001da4 <BSP_EEPROM_WriteBuffer+0x98>
  numofpage =  NumByteToWrite / EEPROM_PAGESIZE;
 8001d24:	0895      	lsrs	r5, r2, #2
        dataindex = EEPROM_PAGESIZE;        
 8001d26:	2604      	movs	r6, #4
 8001d28:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8001d2c:	b2ad      	uxth	r5, r5
      while(numofpage--)
 8001d2e:	42ac      	cmp	r4, r5
 8001d30:	d106      	bne.n	8001d40 <BSP_EEPROM_WriteBuffer+0x34>
      if(numofsingle!=0)
 8001d32:	f1b8 0f00 	cmp.w	r8, #0
 8001d36:	d111      	bne.n	8001d5c <BSP_EEPROM_WriteBuffer+0x50>
  return EEPROM_OK;
 8001d38:	2000      	movs	r0, #0
}
 8001d3a:	b003      	add	sp, #12
 8001d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d40:	f10d 0207 	add.w	r2, sp, #7
 8001d44:	4621      	mov	r1, r4
 8001d46:	4638      	mov	r0, r7
        dataindex = EEPROM_PAGESIZE;        
 8001d48:	f88d 6007 	strb.w	r6, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d4c:	f7ff ffc2 	bl	8001cd4 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d1f2      	bne.n	8001d3a <BSP_EEPROM_WriteBuffer+0x2e>
        WriteAddr +=  EEPROM_PAGESIZE;
 8001d54:	3404      	adds	r4, #4
        pBuffer += EEPROM_PAGESIZE;
 8001d56:	3704      	adds	r7, #4
        WriteAddr +=  EEPROM_PAGESIZE;
 8001d58:	b2a4      	uxth	r4, r4
        pBuffer += EEPROM_PAGESIZE;
 8001d5a:	e7e8      	b.n	8001d2e <BSP_EEPROM_WriteBuffer+0x22>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d5c:	f10d 0207 	add.w	r2, sp, #7
 8001d60:	4621      	mov	r1, r4
 8001d62:	4638      	mov	r0, r7
        dataindex = numofsingle;          
 8001d64:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d68:	f7ff ffb4 	bl	8001cd4 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001d6c:	e7e5      	b.n	8001d3a <BSP_EEPROM_WriteBuffer+0x2e>
  count = EEPROM_PAGESIZE - addr;
 8001d6e:	f1c9 0604 	rsb	r6, r9, #4
    if(numofpage== 0) 
 8001d72:	2a03      	cmp	r2, #3
  count = EEPROM_PAGESIZE - addr;
 8001d74:	b2b6      	uxth	r6, r6
    if(numofpage== 0) 
 8001d76:	d81a      	bhi.n	8001dae <BSP_EEPROM_WriteBuffer+0xa2>
      if(NumByteToWrite > count)
 8001d78:	4296      	cmp	r6, r2
 8001d7a:	d213      	bcs.n	8001da4 <BSP_EEPROM_WriteBuffer+0x98>
        dataindex = count;        
 8001d7c:	fa5f f886 	uxtb.w	r8, r6
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d80:	f10d 0207 	add.w	r2, sp, #7
        dataindex = count;        
 8001d84:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d88:	f7ff ffa4 	bl	8001cd4 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d1d4      	bne.n	8001d3a <BSP_EEPROM_WriteBuffer+0x2e>
        dataindex = (NumByteToWrite - count);          
 8001d90:	eba5 0508 	sub.w	r5, r5, r8
        status = BSP_EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&dataindex));
 8001d94:	19a1      	adds	r1, r4, r6
 8001d96:	f10d 0207 	add.w	r2, sp, #7
 8001d9a:	19b8      	adds	r0, r7, r6
 8001d9c:	b289      	uxth	r1, r1
        dataindex = (NumByteToWrite - count);          
 8001d9e:	f88d 5007 	strb.w	r5, [sp, #7]
        status = BSP_EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&dataindex));
 8001da2:	e7e1      	b.n	8001d68 <BSP_EEPROM_WriteBuffer+0x5c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001da4:	f10d 0207 	add.w	r2, sp, #7
        dataindex = numofsingle;         
 8001da8:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dac:	e7dc      	b.n	8001d68 <BSP_EEPROM_WriteBuffer+0x5c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dae:	f10d 0207 	add.w	r2, sp, #7
        dataindex = count;         
 8001db2:	f88d 6007 	strb.w	r6, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001db6:	f7ff ff8d 	bl	8001cd4 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d1bd      	bne.n	8001d3a <BSP_EEPROM_WriteBuffer+0x2e>
 8001dbe:	3d04      	subs	r5, #4
        WriteAddr += count;
 8001dc0:	4434      	add	r4, r6
        pBuffer += count;
 8001dc2:	443e      	add	r6, r7
      NumByteToWrite -= count;
 8001dc4:	fa19 f585 	uxtah	r5, r9, r5
        WriteAddr += count;
 8001dc8:	fa1f f984 	uxth.w	r9, r4
      NumByteToWrite -= count;
 8001dcc:	fa1f f885 	uxth.w	r8, r5
      numofpage =  NumByteToWrite / EEPROM_PAGESIZE;
 8001dd0:	f3c5 058d 	ubfx	r5, r5, #2, #14
 8001dd4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
        dataindex = EEPROM_PAGESIZE;          
 8001dd8:	2504      	movs	r5, #4
 8001dda:	b2a4      	uxth	r4, r4
      while(numofpage--)
 8001ddc:	45a1      	cmp	r9, r4
 8001dde:	d109      	bne.n	8001df4 <BSP_EEPROM_WriteBuffer+0xe8>
      if(numofsingle != 0)
 8001de0:	f018 0803 	ands.w	r8, r8, #3
 8001de4:	d0a8      	beq.n	8001d38 <BSP_EEPROM_WriteBuffer+0x2c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001de6:	f10d 0207 	add.w	r2, sp, #7
 8001dea:	4649      	mov	r1, r9
 8001dec:	4630      	mov	r0, r6
        dataindex = numofsingle;           
 8001dee:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001df2:	e7b9      	b.n	8001d68 <BSP_EEPROM_WriteBuffer+0x5c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001df4:	f10d 0207 	add.w	r2, sp, #7
 8001df8:	4649      	mov	r1, r9
 8001dfa:	4630      	mov	r0, r6
        dataindex = EEPROM_PAGESIZE;          
 8001dfc:	f88d 5007 	strb.w	r5, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001e00:	f7ff ff68 	bl	8001cd4 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d198      	bne.n	8001d3a <BSP_EEPROM_WriteBuffer+0x2e>
        WriteAddr +=  EEPROM_PAGESIZE;
 8001e08:	f109 0904 	add.w	r9, r9, #4
        pBuffer += EEPROM_PAGESIZE;  
 8001e0c:	3604      	adds	r6, #4
        WriteAddr +=  EEPROM_PAGESIZE;
 8001e0e:	fa1f f989 	uxth.w	r9, r9
        pBuffer += EEPROM_PAGESIZE;  
 8001e12:	e7e3      	b.n	8001ddc <BSP_EEPROM_WriteBuffer+0xd0>

08001e14 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001e14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001e18:	4c19      	ldr	r4, [pc, #100]	; (8001e80 <LL_FillBuffer+0x6c>)
{
 8001e1a:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001e1c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8001e20:	460e      	mov	r6, r1
 8001e22:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e24:	2134      	movs	r1, #52	; 0x34
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <LL_FillBuffer+0x70>)
{
 8001e28:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001e2a:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001e2c:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
{
 8001e30:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e34:	fb01 2303 	mla	r3, r1, r3, r2
 8001e38:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001e3c:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001e3e:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001e40:	bf18      	it	ne
 8001e42:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <LL_FillBuffer+0x74>)
 8001e46:	60a5      	str	r5, [r4, #8]
 8001e48:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001e4a:	f002 f82b 	bl	8003ea4 <HAL_DMA2D_Init>
 8001e4e:	b9a0      	cbnz	r0, 8001e7a <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001e50:	4649      	mov	r1, r9
 8001e52:	4620      	mov	r0, r4
 8001e54:	f002 f97a 	bl	800414c <HAL_DMA2D_ConfigLayer>
 8001e58:	b978      	cbnz	r0, 8001e7a <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4632      	mov	r2, r6
 8001e5e:	4651      	mov	r1, sl
 8001e60:	4620      	mov	r0, r4
 8001e62:	f8cd 8000 	str.w	r8, [sp]
 8001e66:	f002 f849 	bl	8003efc <HAL_DMA2D_Start>
 8001e6a:	b930      	cbnz	r0, 8001e7a <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001e70:	b002      	add	sp, #8
 8001e72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001e76:	f002 b85b 	b.w	8003f30 <HAL_DMA2D_PollForTransfer>
}
 8001e7a:	b002      	add	sp, #8
 8001e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e80:	200008f0 	.word	0x200008f0
 8001e84:	20022a28 	.word	0x20022a28
 8001e88:	4002b000 	.word	0x4002b000

08001e8c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <BSP_LCD_GetXSize+0x10>)
 8001e8e:	2134      	movs	r1, #52	; 0x34
 8001e90:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <BSP_LCD_GetXSize+0x14>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001e98:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001e9a:	4770      	bx	lr
 8001e9c:	200008f0 	.word	0x200008f0
 8001ea0:	20022a28 	.word	0x20022a28

08001ea4 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <BSP_LCD_GetYSize+0x10>)
 8001ea6:	2134      	movs	r1, #52	; 0x34
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <BSP_LCD_GetYSize+0x14>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001eb0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001eb2:	4770      	bx	lr
 8001eb4:	200008f0 	.word	0x200008f0
 8001eb8:	20022a28 	.word	0x20022a28

08001ebc <BSP_LCD_LayerDefaultInit>:
{     
 8001ebc:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ebe:	4d18      	ldr	r5, [pc, #96]	; (8001f20 <BSP_LCD_LayerDefaultInit+0x64>)
{     
 8001ec0:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ec2:	2634      	movs	r6, #52	; 0x34
 8001ec4:	4817      	ldr	r0, [pc, #92]	; (8001f24 <BSP_LCD_LayerDefaultInit+0x68>)
 8001ec6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
 8001ec8:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
 8001eca:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ecc:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 8001ed0:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8001ed2:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ed4:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001ed6:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
 8001ed8:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
 8001eda:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 8001ede:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 8001ee6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 8001eea:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001ef2:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001ef4:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ef8:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001efc:	4622      	mov	r2, r4
 8001efe:	a901      	add	r1, sp, #4
 8001f00:	f002 ffc0 	bl	8004e84 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001f04:	200c      	movs	r0, #12
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	fb00 5004 	mla	r0, r0, r4, r5
 8001f0e:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <BSP_LCD_LayerDefaultInit+0x6c>)
 8001f12:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001f14:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f18:	6443      	str	r3, [r0, #68]	; 0x44
}
 8001f1a:	b00e      	add	sp, #56	; 0x38
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
 8001f1e:	bf00      	nop
 8001f20:	200008f0 	.word	0x200008f0
 8001f24:	20022a28 	.word	0x20022a28
 8001f28:	20000074 	.word	0x20000074

08001f2c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001f2c:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <BSP_LCD_SelectLayer+0x8>)
 8001f2e:	6418      	str	r0, [r3, #64]	; 0x40
} 
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200008f0 	.word	0x200008f0

08001f38 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8001f38:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <BSP_LCD_SetTextColor+0x10>)
 8001f3a:	210c      	movs	r1, #12
 8001f3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f3e:	fb01 2303 	mla	r3, r1, r3, r2
 8001f42:	6458      	str	r0, [r3, #68]	; 0x44
}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200008f0 	.word	0x200008f0

08001f4c <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <BSP_LCD_SetBackColor+0x10>)
 8001f4e:	210c      	movs	r1, #12
 8001f50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f52:	fb01 2303 	mla	r3, r1, r3, r2
 8001f56:	6498      	str	r0, [r3, #72]	; 0x48
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200008f0 	.word	0x200008f0

08001f60 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <BSP_LCD_SetFont+0x10>)
 8001f62:	210c      	movs	r1, #12
 8001f64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f66:	fb01 2303 	mla	r3, r1, r3, r2
 8001f6a:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200008f0 	.word	0x200008f0

08001f74 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <BSP_LCD_GetFont+0x10>)
 8001f76:	210c      	movs	r1, #12
 8001f78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f7a:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001f7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200008f0 	.word	0x200008f0

08001f88 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <BSP_LCD_Clear+0x24>)
{ 
 8001f8a:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f8c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001f8e:	2134      	movs	r1, #52	; 0x34
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f92:	9001      	str	r0, [sp, #4]
 8001f94:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001f96:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 8001fa2:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8001fa4:	f7ff ff36 	bl	8001e14 <LL_FillBuffer>
}
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd10      	pop	{r4, pc}
 8001fac:	200008f0 	.word	0x200008f0
 8001fb0:	20022a28 	.word	0x20022a28

08001fb4 <BSP_LCD_DrawHLine>:
{
 8001fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fb6:	4d0f      	ldr	r5, [pc, #60]	; (8001ff4 <BSP_LCD_DrawHLine+0x40>)
 8001fb8:	2434      	movs	r4, #52	; 0x34
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <BSP_LCD_DrawHLine+0x44>)
 8001fbc:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8001fbe:	fb04 3406 	mla	r4, r4, r6, r3
 8001fc2:	e9d4 3717 	ldrd	r3, r7, [r4, #92]	; 0x5c
 8001fc6:	fb07 0101 	mla	r1, r7, r1, r0
 8001fca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001fcc:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001fce:	4630      	mov	r0, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001fd0:	bf0c      	ite	eq
 8001fd2:	eb03 0141 	addeq.w	r1, r3, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001fd6:	eb03 0181 	addne.w	r1, r3, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001fda:	230c      	movs	r3, #12
 8001fdc:	fb03 5506 	mla	r5, r3, r6, r5
 8001fe0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f7ff ff13 	bl	8001e14 <LL_FillBuffer>
}
 8001fee:	b003      	add	sp, #12
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200008f0 	.word	0x200008f0
 8001ff8:	20022a28 	.word	0x20022a28

08001ffc <BSP_LCD_DrawVLine>:
{
 8001ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ffe:	4f11      	ldr	r7, [pc, #68]	; (8002044 <BSP_LCD_DrawVLine+0x48>)
{
 8002000:	4613      	mov	r3, r2
 8002002:	2534      	movs	r5, #52	; 0x34
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <BSP_LCD_DrawVLine+0x4c>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002006:	f8d7 c040 	ldr.w	ip, [r7, #64]	; 0x40
 800200a:	fb05 250c 	mla	r5, r5, ip, r2
 800200e:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8002010:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002012:	f04f 020c 	mov.w	r2, #12
 8002016:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 800201a:	fb02 770c 	mla	r7, r2, ip, r7
 800201e:	fb06 0101 	mla	r1, r6, r1, r0
 8002022:	f106 36ff 	add.w	r6, r6, #4294967295
 8002026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002028:	4660      	mov	r0, ip
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800202a:	bf08      	it	eq
 800202c:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002030:	9600      	str	r6, [sp, #0]
 8002032:	9201      	str	r2, [sp, #4]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002034:	bf18      	it	ne
 8002036:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800203a:	2201      	movs	r2, #1
 800203c:	f7ff feea 	bl	8001e14 <LL_FillBuffer>
}
 8002040:	b003      	add	sp, #12
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002044:	200008f0 	.word	0x200008f0
 8002048:	20022a28 	.word	0x20022a28

0800204c <BSP_LCD_DrawRect>:
{
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	461e      	mov	r6, r3
 8002050:	460d      	mov	r5, r1
 8002052:	4604      	mov	r4, r0
 8002054:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002056:	f7ff ffad 	bl	8001fb4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800205a:	19a9      	adds	r1, r5, r6
 800205c:	463a      	mov	r2, r7
 800205e:	4620      	mov	r0, r4
 8002060:	b289      	uxth	r1, r1
 8002062:	f7ff ffa7 	bl	8001fb4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002066:	4632      	mov	r2, r6
 8002068:	4629      	mov	r1, r5
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff ffc6 	bl	8001ffc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002070:	19e0      	adds	r0, r4, r7
 8002072:	4632      	mov	r2, r6
 8002074:	4629      	mov	r1, r5
 8002076:	b280      	uxth	r0, r0
}
 8002078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800207c:	f7ff bfbe 	b.w	8001ffc <BSP_LCD_DrawVLine>

08002080 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <BSP_LCD_DrawPixel+0x2c>)
{
 8002082:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2534      	movs	r5, #52	; 0x34
 8002088:	4c09      	ldr	r4, [pc, #36]	; (80020b0 <BSP_LCD_DrawPixel+0x30>)
 800208a:	fb05 4303 	mla	r3, r5, r3, r4
 800208e:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	fb05 0101 	mla	r1, r5, r1, r0
 8002098:	2b02      	cmp	r3, #2
 800209a:	d103      	bne.n	80020a4 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800209c:	b292      	uxth	r2, r2
 800209e:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
 80020a2:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80020a4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 80020a8:	e7fb      	b.n	80020a2 <BSP_LCD_DrawPixel+0x22>
 80020aa:	bf00      	nop
 80020ac:	200008f0 	.word	0x200008f0
 80020b0:	20022a28 	.word	0x20022a28

080020b4 <BSP_LCD_DisplayChar>:
{
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b8:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020ba:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 80020be:	f04f 0800 	mov.w	r8, #0
{
 80020c2:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020c6:	4828      	ldr	r0, [pc, #160]	; (8002168 <BSP_LCD_DisplayChar+0xb4>)
 80020c8:	210c      	movs	r1, #12
 80020ca:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
 80020ce:	fb01 010b 	mla	r1, r1, fp, r0
 80020d2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80020d4:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80020d8:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80020dc:	f109 0607 	add.w	r6, r9, #7
 80020e0:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020e2:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80020e6:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 80020e8:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 80020ec:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 80020f0:	f109 32ff 	add.w	r2, r9, #4294967295
 80020f4:	fa52 f380 	uxtab	r3, r2, r0
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 80020fc:	45d0      	cmp	r8, sl
 80020fe:	eb03 0108 	add.w	r1, r3, r8
 8002102:	b289      	uxth	r1, r1
 8002104:	d302      	bcc.n	800210c <BSP_LCD_DisplayChar+0x58>
}
 8002106:	b005      	add	sp, #20
 8002108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800210c:	2e01      	cmp	r6, #1
 800210e:	782c      	ldrb	r4, [r5, #0]
 8002110:	d004      	beq.n	800211c <BSP_LCD_DisplayChar+0x68>
 8002112:	2e02      	cmp	r6, #2
 8002114:	d109      	bne.n	800212a <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002116:	882c      	ldrh	r4, [r5, #0]
 8002118:	ba64      	rev16	r4, r4
 800211a:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 800211c:	2700      	movs	r7, #0
 800211e:	45b9      	cmp	r9, r7
 8002120:	d80a      	bhi.n	8002138 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 8002122:	f108 0801 	add.w	r8, r8, #1
 8002126:	4435      	add	r5, r6
 8002128:	e7e7      	b.n	80020fa <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800212a:	786a      	ldrb	r2, [r5, #1]
 800212c:	0424      	lsls	r4, r4, #16
 800212e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002132:	78aa      	ldrb	r2, [r5, #2]
 8002134:	4314      	orrs	r4, r2
      break;
 8002136:	e7f1      	b.n	800211c <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800213c:	9103      	str	r1, [sp, #12]
 800213e:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8002140:	9b02      	ldr	r3, [sp, #8]
 8002142:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <BSP_LCD_DisplayChar+0xb4>)
 8002148:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 800214a:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 800214c:	fa02 f20c 	lsl.w	r2, r2, ip
 8002150:	4222      	tst	r2, r4
 8002152:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002156:	fb02 320b 	mla	r2, r2, fp, r3
 800215a:	bf14      	ite	ne
 800215c:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800215e:	6c92      	ldreq	r2, [r2, #72]	; 0x48
 8002160:	f7ff ff8e 	bl	8002080 <BSP_LCD_DrawPixel>
 8002164:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8002166:	e7da      	b.n	800211e <BSP_LCD_DisplayChar+0x6a>
 8002168:	200008f0 	.word	0x200008f0

0800216c <BSP_LCD_DisplayStringAt>:
{
 800216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002170:	4605      	mov	r5, r0
 8002172:	468a      	mov	sl, r1
 8002174:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 8002176:	4614      	mov	r4, r2
 8002178:	f812 0b01 	ldrb.w	r0, [r2], #1
 800217c:	2800      	cmp	r0, #0
 800217e:	d1fa      	bne.n	8002176 <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002180:	4824      	ldr	r0, [pc, #144]	; (8002214 <BSP_LCD_DisplayStringAt+0xa8>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002182:	220c      	movs	r2, #12
  switch (Mode)
 8002184:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002186:	6c01      	ldr	r1, [r0, #64]	; 0x40
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002188:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800218c:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002190:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <BSP_LCD_DisplayStringAt+0xac>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002194:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002198:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800219c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800219e:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
 80021a2:	d021      	beq.n	80021e8 <BSP_LCD_DisplayStringAt+0x7c>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d027      	beq.n	80021f8 <BSP_LCD_DisplayStringAt+0x8c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80021a8:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80021aa:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
 80021ae:	f04f 0900 	mov.w	r9, #0
 80021b2:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80021b4:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
 80021b8:	bfd8      	it	le
 80021ba:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80021bc:	88bc      	ldrh	r4, [r7, #4]
 80021be:	fa1f f389 	uxth.w	r3, r9
 80021c2:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
 80021c6:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80021ca:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80021ce:	fb04 0313 	mls	r3, r4, r3, r0
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	42a3      	cmp	r3, r4
 80021d6:	bf34      	ite	cc
 80021d8:	2300      	movcc	r3, #0
 80021da:	2301      	movcs	r3, #1
 80021dc:	2a00      	cmp	r2, #0
 80021de:	bf08      	it	eq
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b97b      	cbnz	r3, 8002204 <BSP_LCD_DisplayStringAt+0x98>
}
 80021e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80021e8:	1b34      	subs	r4, r6, r4
 80021ea:	4404      	add	r4, r0
 80021ec:	fb0e f404 	mul.w	r4, lr, r4
 80021f0:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80021f4:	b285      	uxth	r5, r0
      break;
 80021f6:	e7d7      	b.n	80021a8 <BSP_LCD_DisplayStringAt+0x3c>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80021f8:	1b34      	subs	r4, r6, r4
 80021fa:	4404      	add	r4, r0
 80021fc:	fb14 f40e 	smulbb	r4, r4, lr
 8002200:	1b60      	subs	r0, r4, r5
 8002202:	e7f7      	b.n	80021f4 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002204:	4628      	mov	r0, r5
 8002206:	4651      	mov	r1, sl
 8002208:	f7ff ff54 	bl	80020b4 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800220c:	88b8      	ldrh	r0, [r7, #4]
 800220e:	4428      	add	r0, r5
 8002210:	b285      	uxth	r5, r0
    i++;
 8002212:	e7d3      	b.n	80021bc <BSP_LCD_DisplayStringAt+0x50>
 8002214:	200008f0 	.word	0x200008f0
 8002218:	20022a28 	.word	0x20022a28

0800221c <BSP_LCD_DisplayStringAtLine>:
{  
 800221c:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 800221e:	4c08      	ldr	r4, [pc, #32]	; (8002240 <BSP_LCD_DisplayStringAtLine+0x24>)
{  
 8002220:	460a      	mov	r2, r1
  return DrawProp[ActiveLayer].pFont;
 8002222:	210c      	movs	r1, #12
 8002224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002226:	fb01 4303 	mla	r3, r1, r3, r4
}
 800222a:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	88db      	ldrh	r3, [r3, #6]
 8002232:	fb13 f000 	smulbb	r0, r3, r0
 8002236:	2303      	movs	r3, #3
 8002238:	b281      	uxth	r1, r0
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff bf96 	b.w	800216c <BSP_LCD_DisplayStringAt>
 8002240:	200008f0 	.word	0x200008f0

08002244 <BSP_LCD_DrawLine>:
{
 8002244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002248:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800224a:	1a5e      	subs	r6, r3, r1
{
 800224c:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
 800224e:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002252:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
 8002254:	fa0f fa81 	sxth.w	sl, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002258:	bfb8      	it	lt
 800225a:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800225c:	2e00      	cmp	r6, #0
 800225e:	bfb8      	it	lt
 8002260:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002262:	b224      	sxth	r4, r4
    xinc1 = -1;
 8002264:	4282      	cmp	r2, r0
 8002266:	bf2c      	ite	cs
 8002268:	2701      	movcs	r7, #1
 800226a:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 800226e:	428b      	cmp	r3, r1
 8002270:	bf2c      	ite	cs
 8002272:	f04f 0801 	movcs.w	r8, #1
 8002276:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800227a:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800227c:	42b4      	cmp	r4, r6
 800227e:	db0f      	blt.n	80022a0 <BSP_LCD_DrawLine+0x5c>
    num = deltax / 2;
 8002280:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002284:	9701      	str	r7, [sp, #4]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002286:	2700      	movs	r7, #0
    num = deltax / 2;
 8002288:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800228a:	9702      	str	r7, [sp, #8]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800228c:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <BSP_LCD_DrawLine+0xc8>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002292:	fa0f f28b 	sxth.w	r2, fp
 8002296:	4294      	cmp	r4, r2
 8002298:	da10      	bge.n	80022bc <BSP_LCD_DrawLine+0x78>
}
 800229a:	b005      	add	sp, #20
 800229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80022a0:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 80022a4:	4623      	mov	r3, r4
 80022a6:	f8cd 8008 	str.w	r8, [sp, #8]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80022aa:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80022ae:	4634      	mov	r4, r6
 80022b0:	f345 054f 	sbfx	r5, r5, #1, #16
 80022b4:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80022b6:	f8cd 8004 	str.w	r8, [sp, #4]
 80022ba:	e7e7      	b.n	800228c <BSP_LCD_DrawLine+0x48>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	f04f 0c0c 	mov.w	ip, #12
 80022c2:	fa1f f18a 	uxth.w	r1, sl
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 80022c6:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80022c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80022cc:	fa1f f089 	uxth.w	r0, r9
 80022d0:	9103      	str	r1, [sp, #12]
 80022d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d4:	f7ff fed4 	bl	8002080 <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <BSP_LCD_DrawLine+0xc8>)
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 80022da:	b2aa      	uxth	r2, r5
 80022dc:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 80022de:	42ac      	cmp	r4, r5
 80022e0:	dc08      	bgt.n	80022f4 <BSP_LCD_DrawLine+0xb0>
      y += yinc1;                             /* Change the y as appropriate */
 80022e2:	9903      	ldr	r1, [sp, #12]
      num -= den;                             /* Calculate the new numerator value */
 80022e4:	1b15      	subs	r5, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
 80022e6:	4438      	add	r0, r7
      y += yinc1;                             /* Change the y as appropriate */
 80022e8:	4441      	add	r1, r8
      num -= den;                             /* Calculate the new numerator value */
 80022ea:	b22d      	sxth	r5, r5
      x += xinc1;                             /* Change the x as appropriate */
 80022ec:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 80022f0:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 80022f4:	9a01      	ldr	r2, [sp, #4]
 80022f6:	f10b 0b01 	add.w	fp, fp, #1
 80022fa:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 80022fc:	9a02      	ldr	r2, [sp, #8]
 80022fe:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8002300:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8002304:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002308:	e7c3      	b.n	8002292 <BSP_LCD_DrawLine+0x4e>
 800230a:	bf00      	nop
 800230c:	200008f0 	.word	0x200008f0

08002310 <BSP_LCD_DrawPolygon>:
  if(PointCount < 2)
 8002310:	2901      	cmp	r1, #1
{
 8002312:	b538      	push	{r3, r4, r5, lr}
 8002314:	460d      	mov	r5, r1
  if(PointCount < 2)
 8002316:	d911      	bls.n	800233c <BSP_LCD_DrawPolygon+0x2c>
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8002318:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800231c:	4604      	mov	r4, r0
 800231e:	8841      	ldrh	r1, [r0, #2]
 8002320:	3a01      	subs	r2, #1
 8002322:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002326:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800232a:	f834 0b04 	ldrh.w	r0, [r4], #4
 800232e:	885b      	ldrh	r3, [r3, #2]
  while(--PointCount)
 8002330:	3d01      	subs	r5, #1
 8002332:	3404      	adds	r4, #4
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002334:	f7ff ff86 	bl	8002244 <BSP_LCD_DrawLine>
  while(--PointCount)
 8002338:	b2ad      	uxth	r5, r5
 800233a:	b905      	cbnz	r5, 800233e <BSP_LCD_DrawPolygon+0x2e>
}
 800233c:	bd38      	pop	{r3, r4, r5, pc}
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 800233e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8002342:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8002346:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 800234a:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800234e:	e7ef      	b.n	8002330 <BSP_LCD_DrawPolygon+0x20>

08002350 <FillTriangle>:
{ 
 8002350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002354:	b087      	sub	sp, #28
 8002356:	4698      	mov	r8, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002358:	1a0c      	subs	r4, r1, r0
  x = x1;                       /* Start x off at the first pixel */
 800235a:	fa0f f980 	sxth.w	r9, r0
{ 
 800235e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
  y = y1;                       /* Start y off at the first pixel */
 8002362:	fa0f fa88 	sxth.w	sl, r8
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002366:	2c00      	cmp	r4, #0
{ 
 8002368:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800236c:	eba5 0608 	sub.w	r6, r5, r8
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002370:	bfb8      	it	lt
 8002372:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002374:	2e00      	cmp	r6, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002376:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002378:	bfb8      	it	lt
 800237a:	4276      	neglt	r6, r6
    xinc1 = -1;
 800237c:	4281      	cmp	r1, r0
 800237e:	bf2c      	ite	cs
 8002380:	2701      	movcs	r7, #1
 8002382:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 8002386:	4545      	cmp	r5, r8
 8002388:	bf2c      	ite	cs
 800238a:	f04f 0801 	movcs.w	r8, #1
 800238e:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002392:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002394:	42b4      	cmp	r4, r6
 8002396:	db0e      	blt.n	80023b6 <FillTriangle+0x66>
    num = deltax / 2;
 8002398:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 800239c:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800239e:	2700      	movs	r7, #0
    num = deltax / 2;
 80023a0:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80023a2:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80023a4:	f04f 0b00 	mov.w	fp, #0
 80023a8:	fa0f f18b 	sxth.w	r1, fp
 80023ac:	428c      	cmp	r4, r1
 80023ae:	da10      	bge.n	80023d2 <FillTriangle+0x82>
}
 80023b0:	b007      	add	sp, #28
 80023b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80023b6:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 80023ba:	4621      	mov	r1, r4
 80023bc:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80023c0:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80023c4:	4634      	mov	r4, r6
 80023c6:	f345 054f 	sbfx	r5, r5, #1, #16
 80023ca:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80023cc:	f8cd 8000 	str.w	r8, [sp]
 80023d0:	e7e8      	b.n	80023a4 <FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, x3, y3);
 80023d2:	fa1f f089 	uxth.w	r0, r9
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80023d6:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, x3, y3);
 80023d8:	fa1f f18a 	uxth.w	r1, sl
 80023dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023e4:	f7ff ff2e 	bl	8002244 <BSP_LCD_DrawLine>
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80023e8:	fa1f fc85 	uxth.w	ip, r5
 80023ec:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
 80023ee:	42ac      	cmp	r4, r5
 80023f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023f4:	dc0a      	bgt.n	800240c <FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
 80023f6:	9802      	ldr	r0, [sp, #8]
      num -= den;               /* Calculate the new numerator value */
 80023f8:	ebac 0504 	sub.w	r5, ip, r4
      y += yinc1;               /* Change the y as appropriate */
 80023fc:	9903      	ldr	r1, [sp, #12]
      x += xinc1;               /* Change the x as appropriate */
 80023fe:	4438      	add	r0, r7
      num -= den;               /* Calculate the new numerator value */
 8002400:	b22d      	sxth	r5, r5
      y += yinc1;               /* Change the y as appropriate */
 8002402:	4441      	add	r1, r8
      x += xinc1;               /* Change the x as appropriate */
 8002404:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
 8002408:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 800240c:	9900      	ldr	r1, [sp, #0]
 800240e:	f10b 0b01 	add.w	fp, fp, #1
 8002412:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
 8002414:	9901      	ldr	r1, [sp, #4]
 8002416:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 8002418:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 800241c:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002420:	e7c2      	b.n	80023a8 <FillTriangle+0x58>
	...

08002424 <BSP_LCD_DrawCircle>:
{
 8002424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8002428:	0054      	lsls	r4, r2, #1
{
 800242a:	b087      	sub	sp, #28
 800242c:	4688      	mov	r8, r1
  current_y = Radius;
 800242e:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
 8002430:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
 8002434:	2700      	movs	r7, #0
{
 8002436:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002438:	4835      	ldr	r0, [pc, #212]	; (8002510 <BSP_LCD_DrawCircle+0xec>)
 800243a:	f04f 0c0c 	mov.w	ip, #12
 800243e:	9b01      	ldr	r3, [sp, #4]
 8002440:	b2ae      	uxth	r6, r5
 8002442:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002444:	fa1f f987 	uxth.w	r9, r7
 8002448:	fa13 f387 	uxtah	r3, r3, r7
 800244c:	eba8 0106 	sub.w	r1, r8, r6
 8002450:	fb0c 0202 	mla	r2, ip, r2, r0
 8002454:	b29b      	uxth	r3, r3
 8002456:	b289      	uxth	r1, r1
 8002458:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800245a:	4618      	mov	r0, r3
 800245c:	9305      	str	r3, [sp, #20]
 800245e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8002462:	f7ff fe0d 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002466:	9b01      	ldr	r3, [sp, #4]
 8002468:	f8cd 9008 	str.w	r9, [sp, #8]
 800246c:	eba3 0b09 	sub.w	fp, r3, r9
 8002470:	fa1f fb8b 	uxth.w	fp, fp
 8002474:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8002478:	4658      	mov	r0, fp
 800247a:	f7ff fe01 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800247e:	9b01      	ldr	r3, [sp, #4]
 8002480:	9a03      	ldr	r2, [sp, #12]
 8002482:	eb06 0a03 	add.w	sl, r6, r3
 8002486:	9b02      	ldr	r3, [sp, #8]
 8002488:	eba8 0103 	sub.w	r1, r8, r3
 800248c:	fa1f fa8a 	uxth.w	sl, sl
 8002490:	b289      	uxth	r1, r1
 8002492:	4650      	mov	r0, sl
 8002494:	9104      	str	r1, [sp, #16]
 8002496:	f7ff fdf3 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800249a:	9b01      	ldr	r3, [sp, #4]
 800249c:	eba3 0906 	sub.w	r9, r3, r6
 80024a0:	fa1f f989 	uxth.w	r9, r9
 80024a4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80024a8:	4648      	mov	r0, r9
 80024aa:	f7ff fde9 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80024ae:	eb06 0108 	add.w	r1, r6, r8
 80024b2:	9b05      	ldr	r3, [sp, #20]
 80024b4:	b289      	uxth	r1, r1
 80024b6:	9a03      	ldr	r2, [sp, #12]
 80024b8:	4618      	mov	r0, r3
 80024ba:	9104      	str	r1, [sp, #16]
 80024bc:	f7ff fde0 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80024c0:	4658      	mov	r0, fp
 80024c2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80024c6:	f7ff fddb 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80024ca:	9b02      	ldr	r3, [sp, #8]
 80024cc:	9a03      	ldr	r2, [sp, #12]
 80024ce:	4650      	mov	r0, sl
 80024d0:	eb03 0108 	add.w	r1, r3, r8
 80024d4:	b289      	uxth	r1, r1
 80024d6:	9102      	str	r1, [sp, #8]
 80024d8:	f7ff fdd2 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80024dc:	4648      	mov	r0, r9
 80024de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80024e2:	f7ff fdcd 	bl	8002080 <BSP_LCD_DrawPixel>
    if (decision < 0)
 80024e6:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 80024e8:	bfb1      	iteee	lt
 80024ea:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 80024ec:	1b7b      	subge	r3, r7, r5
 80024ee:	340a      	addge	r4, #10
      current_y--;
 80024f0:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 80024f4:	bfb8      	it	lt
 80024f6:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
 80024fa:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
 80024fe:	bfa8      	it	ge
 8002500:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8002504:	42bd      	cmp	r5, r7
 8002506:	d297      	bcs.n	8002438 <BSP_LCD_DrawCircle+0x14>
}
 8002508:	b007      	add	sp, #28
 800250a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250e:	bf00      	nop
 8002510:	200008f0 	.word	0x200008f0

08002514 <BSP_LCD_DrawEllipse>:
  rad2 = YRadius;
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 800251c:	ee07 2a90 	vmov	s15, r2
 8002520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  k = (float)(rad2/rad1);  
 8002528:	eec7 6a27 	vdiv.f32	s13, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 800252c:	f1c2 0501 	rsb	r5, r2, #1
{
 8002530:	b085      	sub	sp, #20
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8002532:	425e      	negs	r6, r3
 8002534:	006d      	lsls	r5, r5, #1
 8002536:	2700      	movs	r7, #0
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8002538:	fa1f f880 	uxth.w	r8, r0
 800253c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80025e4 <BSP_LCD_DrawEllipse+0xd0>
 8002540:	fa1f f981 	uxth.w	r9, r1
 8002544:	ee07 7a90 	vmov	s15, r7
 8002548:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800254c:	200c      	movs	r0, #12
 800254e:	fa19 f186 	uxtah	r1, r9, r6
 8002552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002556:	fb00 b202 	mla	r2, r0, r2, fp
 800255a:	b289      	uxth	r1, r1
 800255c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002560:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002562:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256a:	ee17 3a90 	vmov	r3, s15
 800256e:	b29c      	uxth	r4, r3
 8002570:	b2b3      	uxth	r3, r6
 8002572:	eba8 0a04 	sub.w	sl, r8, r4
 8002576:	9303      	str	r3, [sp, #12]
 8002578:	fa1f fa8a 	uxth.w	sl, sl
 800257c:	4650      	mov	r0, sl
 800257e:	f7ff fd7f 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8002582:	eb08 0004 	add.w	r0, r8, r4
 8002586:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 800258a:	b280      	uxth	r0, r0
 800258c:	f7ff fd78 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 8002590:	9b03      	ldr	r3, [sp, #12]
 8002592:	9a01      	ldr	r2, [sp, #4]
 8002594:	eba9 0103 	sub.w	r1, r9, r3
 8002598:	b289      	uxth	r1, r1
 800259a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800259e:	f7ff fd6f 	bl	8002080 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
 80025a2:	4650      	mov	r0, sl
 80025a4:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80025a8:	f7ff fd6a 	bl	8002080 <BSP_LCD_DrawPixel>
    if (e2 <= x) {
 80025ac:	42af      	cmp	r7, r5
 80025ae:	db14      	blt.n	80025da <BSP_LCD_DrawEllipse+0xc6>
      err += ++x*2+1;
 80025b0:	3701      	adds	r7, #1
 80025b2:	eb05 0347 	add.w	r3, r5, r7, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 80025b6:	42f7      	cmn	r7, r6
      err += ++x*2+1;
 80025b8:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 80025bc:	d102      	bne.n	80025c4 <BSP_LCD_DrawEllipse+0xb0>
 80025be:	42ae      	cmp	r6, r5
 80025c0:	db02      	blt.n	80025c8 <BSP_LCD_DrawEllipse+0xb4>
 80025c2:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;     
 80025c4:	42ae      	cmp	r6, r5
 80025c6:	da0a      	bge.n	80025de <BSP_LCD_DrawEllipse+0xca>
 80025c8:	3601      	adds	r6, #1
 80025ca:	eb03 0546 	add.w	r5, r3, r6, lsl #1
 80025ce:	3501      	adds	r5, #1
  while (y <= 0);
 80025d0:	2e00      	cmp	r6, #0
 80025d2:	ddb7      	ble.n	8002544 <BSP_LCD_DrawEllipse+0x30>
}
 80025d4:	b005      	add	sp, #20
 80025d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025da:	462b      	mov	r3, r5
 80025dc:	e7f2      	b.n	80025c4 <BSP_LCD_DrawEllipse+0xb0>
 80025de:	461d      	mov	r5, r3
 80025e0:	e7f6      	b.n	80025d0 <BSP_LCD_DrawEllipse+0xbc>
 80025e2:	bf00      	nop
 80025e4:	200008f0 	.word	0x200008f0

080025e8 <BSP_LCD_DrawBitmap>:
{
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80025ec:	7ad3      	ldrb	r3, [r2, #11]
{
 80025ee:	4688      	mov	r8, r1
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80025f0:	7a94      	ldrb	r4, [r2, #10]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80025f2:	f04f 0c34 	mov.w	ip, #52	; 0x34
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80025f6:	7c97      	ldrb	r7, [r2, #18]
{
 80025f8:	b085      	sub	sp, #20
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80025fa:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80025fe:	7b13      	ldrb	r3, [r2, #12]
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002600:	7d96      	ldrb	r6, [r2, #22]
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002602:	eb04 4403 	add.w	r4, r4, r3, lsl #16
 8002606:	7b53      	ldrb	r3, [r2, #13]
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002608:	7f55      	ldrb	r5, [r2, #29]
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800260a:	eb04 6403 	add.w	r4, r4, r3, lsl #24
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 800260e:	7cd3      	ldrb	r3, [r2, #19]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002610:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8002700 <BSP_LCD_DrawBitmap+0x118>
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002614:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8002618:	7d13      	ldrb	r3, [r2, #20]
 800261a:	f8cd e00c 	str.w	lr, [sp, #12]
 800261e:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 8002622:	7d53      	ldrb	r3, [r2, #21]
 8002624:	eb07 6703 	add.w	r7, r7, r3, lsl #24
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002628:	7dd3      	ldrb	r3, [r2, #23]
 800262a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800262e:	7e13      	ldrb	r3, [r2, #24]
 8002630:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8002634:	7e53      	ldrb	r3, [r2, #25]
 8002636:	eb06 6603 	add.w	r6, r6, r3, lsl #24
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 800263a:	7f13      	ldrb	r3, [r2, #28]
 800263c:	eb03 2305 	add.w	r3, r3, r5, lsl #8
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002640:	4d2d      	ldr	r5, [pc, #180]	; (80026f8 <BSP_LCD_DrawBitmap+0x110>)
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002642:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8002644:	fb0c ec01 	mla	ip, ip, r1, lr
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002648:	f8dc 1060 	ldr.w	r1, [ip, #96]	; 0x60
 800264c:	fb01 0008 	mla	r0, r1, r8, r0
 8002650:	f8dc 105c 	ldr.w	r1, [ip, #92]	; 0x5c
 8002654:	eb01 0880 	add.w	r8, r1, r0, lsl #2
  if ((bit_pixel/8) == 4)
 8002658:	f1a3 0120 	sub.w	r1, r3, #32
 800265c:	2907      	cmp	r1, #7
 800265e:	d918      	bls.n	8002692 <BSP_LCD_DrawBitmap+0xaa>
  else if ((bit_pixel/8) == 2)
 8002660:	f1a3 0110 	sub.w	r1, r3, #16
    input_color_mode = CM_RGB888;
 8002664:	2908      	cmp	r1, #8
 8002666:	bf34      	ite	cc
 8002668:	f04f 0b02 	movcc.w	fp, #2
 800266c:	f04f 0b01 	movcs.w	fp, #1
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	1e71      	subs	r1, r6, #1
  for(index=0; index < height; index++)
 8002674:	f04f 0a00 	mov.w	sl, #0
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
  
  hDma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002678:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80026f8 <BSP_LCD_DrawBitmap+0x110>
 800267c:	437b      	muls	r3, r7
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800267e:	fb03 4401 	mla	r4, r3, r1, r4
    pbmp -= width*(bit_pixel/8);
 8002682:	425b      	negs	r3, r3
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002684:	4414      	add	r4, r2
    pbmp -= width*(bit_pixel/8);
 8002686:	9302      	str	r3, [sp, #8]
  for(index=0; index < height; index++)
 8002688:	45b2      	cmp	sl, r6
 800268a:	d105      	bne.n	8002698 <BSP_LCD_DrawBitmap+0xb0>
}
 800268c:	b005      	add	sp, #20
 800268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = CM_ARGB8888;
 8002692:	f04f 0b00 	mov.w	fp, #0
 8002696:	e7eb      	b.n	8002670 <BSP_LCD_DrawBitmap+0x88>
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002698:	2300      	movs	r3, #0
 800269a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800269e:	4648      	mov	r0, r9
  hDma2dHandler.Init.OutputOffset = 0;     
 80026a0:	60eb      	str	r3, [r5, #12]
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80026a2:	632b      	str	r3, [r5, #48]	; 0x30
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026a4:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026a8:	22ff      	movs	r2, #255	; 0xff
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80026aa:	e9c5 3b0a 	strd	r3, fp, [r5, #40]	; 0x28
  hDma2dHandler.Instance = DMA2D; 
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <BSP_LCD_DrawBitmap+0x114>)
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026b0:	636a      	str	r2, [r5, #52]	; 0x34
  hDma2dHandler.Instance = DMA2D; 
 80026b2:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80026b4:	f001 fbf6 	bl	8003ea4 <HAL_DMA2D_Init>
 80026b8:	b988      	cbnz	r0, 80026de <BSP_LCD_DrawBitmap+0xf6>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80026ba:	2101      	movs	r1, #1
 80026bc:	4648      	mov	r0, r9
 80026be:	f001 fd45 	bl	800414c <HAL_DMA2D_ConfigLayer>
 80026c2:	b960      	cbnz	r0, 80026de <BSP_LCD_DrawBitmap+0xf6>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80026c4:	2301      	movs	r3, #1
 80026c6:	4642      	mov	r2, r8
 80026c8:	4621      	mov	r1, r4
 80026ca:	4648      	mov	r0, r9
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	463b      	mov	r3, r7
 80026d0:	f001 fc14 	bl	8003efc <HAL_DMA2D_Start>
 80026d4:	b918      	cbnz	r0, 80026de <BSP_LCD_DrawBitmap+0xf6>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80026d6:	210a      	movs	r1, #10
 80026d8:	4648      	mov	r0, r9
 80026da:	f001 fc29 	bl	8003f30 <HAL_DMA2D_PollForTransfer>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80026de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80026e0:	2234      	movs	r2, #52	; 0x34
 80026e2:	9903      	ldr	r1, [sp, #12]
  for(index=0; index < height; index++)
 80026e4:	f10a 0a01 	add.w	sl, sl, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80026e8:	fb02 1303 	mla	r3, r2, r3, r1
    address+=  (BSP_LCD_GetXSize()*4);
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	eb08 0883 	add.w	r8, r8, r3, lsl #2
    pbmp -= width*(bit_pixel/8);
 80026f2:	9b02      	ldr	r3, [sp, #8]
 80026f4:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 80026f6:	e7c7      	b.n	8002688 <BSP_LCD_DrawBitmap+0xa0>
 80026f8:	200008f0 	.word	0x200008f0
 80026fc:	4002b000 	.word	0x4002b000
 8002700:	20022a28 	.word	0x20022a28

08002704 <BSP_LCD_FillRect>:
{
 8002704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002706:	4d0f      	ldr	r5, [pc, #60]	; (8002744 <BSP_LCD_FillRect+0x40>)
 8002708:	240c      	movs	r4, #12
 800270a:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800270c:	fb04 5407 	mla	r4, r4, r7, r5
 8002710:	2534      	movs	r5, #52	; 0x34
 8002712:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002716:	4c0c      	ldr	r4, [pc, #48]	; (8002748 <BSP_LCD_FillRect+0x44>)
 8002718:	fb05 4507 	mla	r5, r5, r7, r4
 800271c:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 8002720:	fb06 0101 	mla	r1, r6, r1, r0
 8002724:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002726:	1ab6      	subs	r6, r6, r2
 8002728:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800272c:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800272e:	4638      	mov	r0, r7
 8002730:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002732:	bf0c      	ite	eq
 8002734:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002738:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800273c:	f7ff fb6a 	bl	8001e14 <LL_FillBuffer>
}
 8002740:	b003      	add	sp, #12
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002744:	200008f0 	.word	0x200008f0
 8002748:	20022a28 	.word	0x20022a28

0800274c <BSP_LCD_ClearStringLine>:
{
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <BSP_LCD_ClearStringLine+0x38>)
 8002750:	260c      	movs	r6, #12
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002752:	2734      	movs	r7, #52	; 0x34
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8002754:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002756:	fb06 4302 	mla	r3, r6, r2, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 800275a:	e9d3 5111 	ldrd	r5, r1, [r3, #68]	; 0x44
 800275e:	6459      	str	r1, [r3, #68]	; 0x44
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002762:	4909      	ldr	r1, [pc, #36]	; (8002788 <BSP_LCD_ClearStringLine+0x3c>)
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8002764:	88db      	ldrh	r3, [r3, #6]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002766:	fb07 1202 	mla	r2, r7, r2, r1
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800276a:	fb10 f003 	smulbb	r0, r0, r3
 800276e:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8002772:	b281      	uxth	r1, r0
 8002774:	2000      	movs	r0, #0
 8002776:	f7ff ffc5 	bl	8002704 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
 800277a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800277c:	fb06 4403 	mla	r4, r6, r3, r4
 8002780:	6465      	str	r5, [r4, #68]	; 0x44
}
 8002782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002784:	200008f0 	.word	0x200008f0
 8002788:	20022a28 	.word	0x20022a28

0800278c <BSP_LCD_FillCircle>:
{
 800278c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  decision = 3 - (Radius << 1);
 8002790:	0054      	lsls	r4, r2, #1
{
 8002792:	4680      	mov	r8, r0
 8002794:	460e      	mov	r6, r1
 8002796:	4691      	mov	r9, r2
  decision = 3 - (Radius << 1);
 8002798:	f1c4 0403 	rsb	r4, r4, #3
  current_y = Radius;
 800279c:	4617      	mov	r7, r2
  current_x = 0;
 800279e:	2500      	movs	r5, #0
    if(current_y > 0) 
 80027a0:	b1af      	cbz	r7, 80027ce <BSP_LCD_FillCircle+0x42>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80027a2:	b2ba      	uxth	r2, r7
 80027a4:	fa16 f185 	uxtah	r1, r6, r5
 80027a8:	fa1f fa85 	uxth.w	sl, r5
 80027ac:	eba8 0002 	sub.w	r0, r8, r2
 80027b0:	0052      	lsls	r2, r2, #1
 80027b2:	b289      	uxth	r1, r1
 80027b4:	b280      	uxth	r0, r0
 80027b6:	b292      	uxth	r2, r2
 80027b8:	9000      	str	r0, [sp, #0]
 80027ba:	9201      	str	r2, [sp, #4]
 80027bc:	f7ff fbfa 	bl	8001fb4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80027c0:	4651      	mov	r1, sl
 80027c2:	9a01      	ldr	r2, [sp, #4]
 80027c4:	9800      	ldr	r0, [sp, #0]
 80027c6:	1a71      	subs	r1, r6, r1
 80027c8:	b289      	uxth	r1, r1
 80027ca:	f7ff fbf3 	bl	8001fb4 <BSP_LCD_DrawHLine>
    if(current_x > 0) 
 80027ce:	b1a5      	cbz	r5, 80027fa <BSP_LCD_FillCircle+0x6e>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80027d0:	b2aa      	uxth	r2, r5
 80027d2:	b2b9      	uxth	r1, r7
 80027d4:	eba8 0002 	sub.w	r0, r8, r2
 80027d8:	0052      	lsls	r2, r2, #1
 80027da:	468a      	mov	sl, r1
 80027dc:	1a71      	subs	r1, r6, r1
 80027de:	b280      	uxth	r0, r0
 80027e0:	b292      	uxth	r2, r2
 80027e2:	b289      	uxth	r1, r1
 80027e4:	9000      	str	r0, [sp, #0]
 80027e6:	9201      	str	r2, [sp, #4]
 80027e8:	f7ff fbe4 	bl	8001fb4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80027ec:	eb0a 0106 	add.w	r1, sl, r6
 80027f0:	9a01      	ldr	r2, [sp, #4]
 80027f2:	9800      	ldr	r0, [sp, #0]
 80027f4:	b289      	uxth	r1, r1
 80027f6:	f7ff fbdd 	bl	8001fb4 <BSP_LCD_DrawHLine>
    if (decision < 0)
 80027fa:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 80027fc:	bfb1      	iteee	lt
 80027fe:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 8002800:	1beb      	subge	r3, r5, r7
 8002802:	340a      	addge	r4, #10
      current_y--;
 8002804:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
 8002808:	bfb8      	it	lt
 800280a:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
 800280e:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 8002812:	bfa8      	it	ge
 8002814:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8002818:	42af      	cmp	r7, r5
 800281a:	d2c1      	bcs.n	80027a0 <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800281c:	464a      	mov	r2, r9
 800281e:	4631      	mov	r1, r6
 8002820:	4640      	mov	r0, r8
}
 8002822:	b002      	add	sp, #8
 8002824:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002828:	f7ff bdfc 	b.w	8002424 <BSP_LCD_DrawCircle>

0800282c <BSP_LCD_FillPolygon>:
{
 800282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
 8002830:	f8b0 8000 	ldrh.w	r8, [r0]
{
 8002834:	460f      	mov	r7, r1
  image_top= image_bottom = Points->Y;
 8002836:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
 800283a:	b087      	sub	sp, #28
  image_left = image_right = Points->X;
 800283c:	4644      	mov	r4, r8
 800283e:	4645      	mov	r5, r8
  image_top= image_bottom = Points->Y;
 8002840:	464e      	mov	r6, r9
 8002842:	4649      	mov	r1, r9
  for(counter = 1; counter < PointCount; counter++)
 8002844:	2301      	movs	r3, #1
 8002846:	42bb      	cmp	r3, r7
 8002848:	db2f      	blt.n	80028aa <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
 800284a:	2f01      	cmp	r7, #1
 800284c:	d92a      	bls.n	80028a4 <BSP_LCD_FillPolygon+0x78>
  X_center = (image_left + image_right)/2;
 800284e:	4425      	add	r5, r4
  Y_center = (image_bottom + image_top)/2;
 8002850:	440e      	add	r6, r1
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8002852:	f04f 0b00 	mov.w	fp, #0
 8002856:	1d04      	adds	r4, r0, #4
 8002858:	f3c5 054f 	ubfx	r5, r5, #1, #16
 800285c:	f3c6 064f 	ubfx	r6, r6, #1, #16
 8002860:	f8cd b00c 	str.w	fp, [sp, #12]
  while(--PointCount)
 8002864:	3f01      	subs	r7, #1
 8002866:	3404      	adds	r4, #4
 8002868:	b2bf      	uxth	r7, r7
 800286a:	bb9f      	cbnz	r7, 80028d4 <BSP_LCD_FillPolygon+0xa8>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800286c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8002870:	fa1f f48b 	uxth.w	r4, fp
 8002874:	464b      	mov	r3, r9
 8002876:	462a      	mov	r2, r5
 8002878:	4639      	mov	r1, r7
 800287a:	4640      	mov	r0, r8
 800287c:	e9cd 4600 	strd	r4, r6, [sp]
 8002880:	f7ff fd66 	bl	8002350 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8002884:	464b      	mov	r3, r9
 8002886:	463a      	mov	r2, r7
 8002888:	4629      	mov	r1, r5
 800288a:	4640      	mov	r0, r8
 800288c:	e9cd 6400 	strd	r6, r4, [sp]
 8002890:	f7ff fd5e 	bl	8002350 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8002894:	4633      	mov	r3, r6
 8002896:	4642      	mov	r2, r8
 8002898:	4639      	mov	r1, r7
 800289a:	4628      	mov	r0, r5
 800289c:	e9cd 4900 	strd	r4, r9, [sp]
 80028a0:	f7ff fd56 	bl	8002350 <FillTriangle>
}
 80028a4:	b007      	add	sp, #28
 80028a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelX = POLY_X(counter);
 80028aa:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 80028ae:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 80028b2:	3301      	adds	r3, #1
    if(pixelX < image_left)
 80028b4:	42aa      	cmp	r2, r5
      image_left = pixelX;
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	bfb8      	it	lt
 80028ba:	b295      	uxthlt	r5, r2
    if(pixelX > image_right)
 80028bc:	42a2      	cmp	r2, r4
      image_right = pixelX;
 80028be:	bfc8      	it	gt
 80028c0:	b294      	uxthgt	r4, r2
    pixelY = POLY_Y(counter);
 80028c2:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixelY < image_top)
 80028c6:	428a      	cmp	r2, r1
      image_top = pixelY;
 80028c8:	bfb8      	it	lt
 80028ca:	b291      	uxthlt	r1, r2
    if(pixelY > image_bottom)
 80028cc:	42b2      	cmp	r2, r6
      image_bottom = pixelY;
 80028ce:	bfc8      	it	gt
 80028d0:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 80028d2:	e7b8      	b.n	8002846 <BSP_LCD_FillPolygon+0x1a>
    X2 = Points->X;
 80028d4:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80028d8:	f834 ac04 	ldrh.w	sl, [r4, #-4]
 80028dc:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80028e0:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 80028e4:	4651      	mov	r1, sl
    X2 = Points->X;
 80028e6:	9303      	str	r3, [sp, #12]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80028e8:	f834 3c06 	ldrh.w	r3, [r4, #-6]
    Y2 = Points->Y;    
 80028ec:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80028f0:	9200      	str	r2, [sp, #0]
 80028f2:	9305      	str	r3, [sp, #20]
 80028f4:	9004      	str	r0, [sp, #16]
 80028f6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80028fa:	462a      	mov	r2, r5
 80028fc:	f7ff fd28 	bl	8002350 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8002900:	9b02      	ldr	r3, [sp, #8]
 8002902:	4652      	mov	r2, sl
 8002904:	4629      	mov	r1, r5
 8002906:	9804      	ldr	r0, [sp, #16]
 8002908:	e9cd 6300 	strd	r6, r3, [sp]
 800290c:	9b05      	ldr	r3, [sp, #20]
 800290e:	f7ff fd1f 	bl	8002350 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8002912:	9b05      	ldr	r3, [sp, #20]
 8002914:	9804      	ldr	r0, [sp, #16]
 8002916:	4651      	mov	r1, sl
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	9b02      	ldr	r3, [sp, #8]
 800291c:	4602      	mov	r2, r0
 800291e:	4628      	mov	r0, r5
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4633      	mov	r3, r6
 8002924:	f7ff fd14 	bl	8002350 <FillTriangle>
 8002928:	e79c      	b.n	8002864 <BSP_LCD_FillPolygon+0x38>

0800292a <BSP_LCD_FillEllipse>:
  rad2 = YRadius;
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8002932:	ee07 2a90 	vmov	s15, r2
 8002936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800293a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800293e:	ed2d 8b02 	vpush	{d8}
  k = (float)(rad2/rad1);
 8002942:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8002946:	f1c2 0401 	rsb	r4, r2, #1
{
 800294a:	b083      	sub	sp, #12
 800294c:	4680      	mov	r8, r0
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 800294e:	425d      	negs	r5, r3
 8002950:	0064      	lsls	r4, r4, #1
 8002952:	2600      	movs	r6, #0
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos+y), (2*(uint16_t)(x/k) + 1));
 8002954:	b28f      	uxth	r7, r1
 8002956:	ee07 6a90 	vmov	s15, r6
 800295a:	fa17 f185 	uxtah	r1, r7, r5
 800295e:	fa1f f985 	uxth.w	r9, r5
 8002962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002966:	b289      	uxth	r1, r1
 8002968:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800296c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002970:	ee17 3a90 	vmov	r3, s15
 8002974:	b29a      	uxth	r2, r3
 8002976:	eba8 0002 	sub.w	r0, r8, r2
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	3201      	adds	r2, #1
 800297e:	b280      	uxth	r0, r0
 8002980:	b292      	uxth	r2, r2
 8002982:	9000      	str	r0, [sp, #0]
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	f7ff fb15 	bl	8001fb4 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos-y), (2*(uint16_t)(x/k) + 1));
 800298a:	eba7 0109 	sub.w	r1, r7, r9
 800298e:	9a01      	ldr	r2, [sp, #4]
 8002990:	9800      	ldr	r0, [sp, #0]
 8002992:	b289      	uxth	r1, r1
 8002994:	f7ff fb0e 	bl	8001fb4 <BSP_LCD_DrawHLine>
    if (e2 <= x) 
 8002998:	42a6      	cmp	r6, r4
 800299a:	db16      	blt.n	80029ca <BSP_LCD_FillEllipse+0xa0>
      err += ++x*2+1;
 800299c:	3601      	adds	r6, #1
 800299e:	eb04 0346 	add.w	r3, r4, r6, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 80029a2:	42ee      	cmn	r6, r5
      err += ++x*2+1;
 80029a4:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 80029a8:	d102      	bne.n	80029b0 <BSP_LCD_FillEllipse+0x86>
 80029aa:	42a5      	cmp	r5, r4
 80029ac:	db02      	blt.n	80029b4 <BSP_LCD_FillEllipse+0x8a>
 80029ae:	2400      	movs	r4, #0
    if (e2 > y) err += ++y*2+1;
 80029b0:	42a5      	cmp	r5, r4
 80029b2:	da0c      	bge.n	80029ce <BSP_LCD_FillEllipse+0xa4>
 80029b4:	3501      	adds	r5, #1
 80029b6:	eb03 0445 	add.w	r4, r3, r5, lsl #1
 80029ba:	3401      	adds	r4, #1
  while (y <= 0);
 80029bc:	2d00      	cmp	r5, #0
 80029be:	ddca      	ble.n	8002956 <BSP_LCD_FillEllipse+0x2c>
}
 80029c0:	b003      	add	sp, #12
 80029c2:	ecbd 8b02 	vpop	{d8}
 80029c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ca:	4623      	mov	r3, r4
 80029cc:	e7f0      	b.n	80029b0 <BSP_LCD_FillEllipse+0x86>
 80029ce:	461c      	mov	r4, r3
 80029d0:	e7f4      	b.n	80029bc <BSP_LCD_FillEllipse+0x92>
	...

080029d4 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029d4:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029d6:	484c      	ldr	r0, [pc, #304]	; (8002b08 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80029de:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
{
 80029e2:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029e6:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80029e8:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029ea:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029ec:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80029f0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80029f4:	4e45      	ldr	r6, [pc, #276]	; (8002b0c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029f6:	9200      	str	r2, [sp, #0]
 80029f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80029fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002a08:	9201      	str	r2, [sp, #4]
 8002a0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	f042 0210 	orr.w	r2, r2, #16
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	f002 0210 	and.w	r2, r2, #16
 8002a1a:	9202      	str	r2, [sp, #8]
 8002a1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
 8002a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a28:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002a2c:	9203      	str	r2, [sp, #12]
 8002a2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002a3e:	9204      	str	r2, [sp, #16]
 8002a40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002a50:	9205      	str	r2, [sp, #20]
 8002a52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002a62:	9206      	str	r2, [sp, #24]
 8002a64:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002a74:	9207      	str	r2, [sp, #28]
 8002a76:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a82:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	9308      	str	r3, [sp, #32]
 8002a8a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002a94:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a98:	f001 fba0 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002a9c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a9e:	a909      	add	r1, sp, #36	; 0x24
 8002aa0:	481b      	ldr	r0, [pc, #108]	; (8002b10 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002aa2:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aa4:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002aa8:	f001 fb98 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002aac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002ab0:	a909      	add	r1, sp, #36	; 0x24
 8002ab2:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ab4:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ab6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002aba:	f001 fb8f 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002abe:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002ac2:	a909      	add	r1, sp, #36	; 0x24
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ac6:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ac8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002acc:	f001 fb86 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002ad0:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002ad2:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ad4:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ad6:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ad8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002adc:	4c0e      	ldr	r4, [pc, #56]	; (8002b18 <BSP_LCD_MspInit+0x144>)
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f001 fb7c 	bl	80041dc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002ae4:	a909      	add	r1, sp, #36	; 0x24
 8002ae6:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002ae8:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002aea:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002aec:	f001 fb76 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002af0:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002af2:	a909      	add	r1, sp, #36	; 0x24
 8002af4:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002af6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002afa:	f001 fb6f 	bl	80041dc <HAL_GPIO_Init>
}
 8002afe:	b00f      	add	sp, #60	; 0x3c
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40021800 	.word	0x40021800
 8002b14:	40022400 	.word	0x40022400
 8002b18:	40022800 	.word	0x40022800

08002b1c <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b1c:	4806      	ldr	r0, [pc, #24]	; (8002b38 <BSP_LCD_ClockConfig+0x1c>)
 8002b1e:	2308      	movs	r3, #8
 8002b20:	65c3      	str	r3, [r0, #92]	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b22:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b24:	305c      	adds	r0, #92	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b26:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002b28:	2305      	movs	r3, #5
 8002b2a:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b30:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b32:	f002 bf7b 	b.w	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8002b36:	bf00      	nop
 8002b38:	200008f0 	.word	0x200008f0

08002b3c <BSP_LCD_Init>:
{    
 8002b3c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b3e:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002b40:	4c24      	ldr	r4, [pc, #144]	; (8002bd4 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b42:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b44:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b46:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b4a:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b4e:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b52:	230b      	movs	r3, #11
 8002b54:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b58:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b5c:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b5e:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b62:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b66:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b68:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b6c:	f7ff ffd6 	bl	8002b1c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b70:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8002b74:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002b78:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b7a:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002b82:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002b86:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b8a:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <BSP_LCD_Init+0x9c>)
 8002b90:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002b92:	f002 f9a4 	bl	8004ede <HAL_LTDC_GetState>
 8002b96:	4601      	mov	r1, r0
 8002b98:	b910      	cbnz	r0, 8002ba0 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ff1a 	bl	80029d4 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002ba0:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <BSP_LCD_Init+0x98>)
 8002ba2:	f002 f903 	bl	8004dac <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bac:	480b      	ldr	r0, [pc, #44]	; (8002bdc <BSP_LCD_Init+0xa0>)
 8002bae:	f001 fca3 	bl	80044f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	480a      	ldr	r0, [pc, #40]	; (8002be0 <BSP_LCD_Init+0xa4>)
 8002bb8:	f001 fc9e 	bl	80044f8 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002bbc:	f000 fcf8 	bl	80035b0 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <BSP_LCD_Init+0xa8>)
 8002bc2:	210c      	movs	r1, #12
}
 8002bc4:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8002bc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bc8:	fb01 2303 	mla	r3, r1, r3, r2
 8002bcc:	4a06      	ldr	r2, [pc, #24]	; (8002be8 <BSP_LCD_Init+0xac>)
 8002bce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20022a28 	.word	0x20022a28
 8002bd8:	40016800 	.word	0x40016800
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40022800 	.word	0x40022800
 8002be4:	200008f0 	.word	0x200008f0
 8002be8:	20000074 	.word	0x20000074

08002bec <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002bec:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002bee:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002bf2:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002bf4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002bf8:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002bfa:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002bfc:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002bfe:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8002c00:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002c02:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002c04:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8002c06:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8002c08:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c0a:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8002c0c:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002c0e:	480b      	ldr	r0, [pc, #44]	; (8002c3c <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8002c10:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c14:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c18:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8002c1c:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002c1e:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8002c20:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002c22:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c26:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002c28:	466a      	mov	r2, sp
 8002c2a:	f002 fb22 	bl	8005272 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8002c2e:	3800      	subs	r0, #0
 8002c30:	bf18      	it	ne
 8002c32:	2001      	movne	r0, #1
 8002c34:	b015      	add	sp, #84	; 0x54
 8002c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c3a:	bf00      	nop
 8002c3c:	20022ad0 	.word	0x20022ad0

08002c40 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002c40:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c42:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002c46:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4817      	ldr	r0, [pc, #92]	; (8002cac <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c4e:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002c50:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c52:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002c54:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002c56:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c58:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8002c5c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8002c5e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c60:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c62:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c66:	f002 fac1 	bl	80051ec <HAL_QSPI_Command>
 8002c6a:	b9e0      	cbnz	r0, 8002ca6 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8002c6c:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8002c6e:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002c70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002c74:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8002c78:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002c82:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c84:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002c86:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002c8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c8e:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002c90:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c96:	f002 faec 	bl	8005272 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8002c9a:	3800      	subs	r0, #0
 8002c9c:	bf18      	it	ne
 8002c9e:	2001      	movne	r0, #1
}
 8002ca0:	b015      	add	sp, #84	; 0x54
 8002ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	e7fa      	b.n	8002ca0 <QSPI_WriteEnable.constprop.0+0x60>
 8002caa:	bf00      	nop
 8002cac:	20022ad0 	.word	0x20022ad0

08002cb0 <BSP_QSPI_Read>:
{
 8002cb0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8002cb6:	b08f      	sub	sp, #60	; 0x3c
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cb8:	4c1b      	ldr	r4, [pc, #108]	; (8002d28 <BSP_QSPI_Read+0x78>)
{
 8002cba:	4605      	mov	r5, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002cbc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002cbe:	23eb      	movs	r3, #235	; 0xeb
  s_command.Address           = ReadAddr;
 8002cc0:	9101      	str	r1, [sp, #4]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002cc2:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002cc6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002cc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ccc:	4620      	mov	r0, r4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002cce:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cd4:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e9cd 3108 	strd	r3, r1, [sp, #32]
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002cdc:	210a      	movs	r1, #10
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002cde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002ce2:	9105      	str	r1, [sp, #20]
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4669      	mov	r1, sp
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002cea:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cee:	f002 fa7d 	bl	80051ec <HAL_QSPI_Command>
 8002cf2:	b110      	cbz	r0, 8002cfa <BSP_QSPI_Read+0x4a>
    return QSPI_ERROR;
 8002cf4:	2001      	movs	r0, #1
}
 8002cf6:	b00f      	add	sp, #60	; 0x3c
 8002cf8:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8002cfa:	6822      	ldr	r2, [r4, #0]
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4620      	mov	r0, r4
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8002d00:	6853      	ldr	r3, [r2, #4]
 8002d02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6053      	str	r3, [r2, #4]
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	f002 fb9e 	bl	8005450 <HAL_QSPI_Receive>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d1ed      	bne.n	8002cf4 <BSP_QSPI_Read+0x44>
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	6853      	ldr	r3, [r2, #4]
 8002d1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d20:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002d24:	6053      	str	r3, [r2, #4]
  return QSPI_OK;
 8002d26:	e7e6      	b.n	8002cf6 <BSP_QSPI_Read+0x46>
 8002d28:	20022ad0 	.word	0x20022ad0

08002d2c <BSP_QSPI_Write>:
{
 8002d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d30:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8002d34:	b08e      	sub	sp, #56	; 0x38
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8002d36:	b2cd      	uxtb	r5, r1
  end_addr = WriteAddr + Size;
 8002d38:	188e      	adds	r6, r1, r2
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d3a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8002d3c:	2312      	movs	r3, #18
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8002d3e:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
{
 8002d42:	4607      	mov	r7, r0
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8002d44:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d4a:	4295      	cmp	r5, r2
{
 8002d4c:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d4e:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d54:	bf28      	it	cs
 8002d56:	4615      	movcs	r5, r2
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d58:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002dc0 <BSP_QSPI_Write+0x94>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d5c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002d60:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e9cd 3208 	strd	r3, r2, [sp, #32]
  s_command.DummyCycles       = 0;
 8002d68:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d6a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d6c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    s_command.Address = current_addr;
 8002d70:	9401      	str	r4, [sp, #4]
    s_command.NbData  = current_size;
 8002d72:	950a      	str	r5, [sp, #40]	; 0x28
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002d74:	f7ff ff64 	bl	8002c40 <QSPI_WriteEnable.constprop.0>
 8002d78:	bb00      	cbnz	r0, 8002dbc <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4669      	mov	r1, sp
 8002d80:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <BSP_QSPI_Write+0x94>)
 8002d82:	f002 fa33 	bl	80051ec <HAL_QSPI_Command>
 8002d86:	b9c8      	cbnz	r0, 8002dbc <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	4640      	mov	r0, r8
 8002d90:	f002 fb02 	bl	8005398 <HAL_QSPI_Transmit>
 8002d94:	b990      	cbnz	r0, 8002dbc <BSP_QSPI_Write+0x90>
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002d96:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d9a:	f7ff ff27 	bl	8002bec <QSPI_AutoPollingMemReady.constprop.0>
 8002d9e:	b968      	cbnz	r0, 8002dbc <BSP_QSPI_Write+0x90>
    current_addr += current_size;
 8002da0:	442c      	add	r4, r5
    pData += current_size;
 8002da2:	442f      	add	r7, r5
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8002da4:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8002da8:	42b3      	cmp	r3, r6
 8002daa:	bf8c      	ite	hi
 8002dac:	1b35      	subhi	r5, r6, r4
 8002dae:	f44f 7580 	movls.w	r5, #256	; 0x100
  } while (current_addr < end_addr);
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d8dc      	bhi.n	8002d70 <BSP_QSPI_Write+0x44>
}
 8002db6:	b00e      	add	sp, #56	; 0x38
 8002db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return QSPI_ERROR;
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	e7fa      	b.n	8002db6 <BSP_QSPI_Write+0x8a>
 8002dc0:	20022ad0 	.word	0x20022ad0

08002dc4 <BSP_QSPI_Erase_Block>:
{
 8002dc4:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8002dca:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002dcc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 8002dce:	2320      	movs	r3, #32
  s_command.Address           = BlockAddress;
 8002dd0:	9001      	str	r0, [sp, #4]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 8002dd2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd8:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dde:	9303      	str	r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002de0:	2300      	movs	r3, #0
  s_command.DataMode          = QSPI_DATA_NONE;
 8002de2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DummyCycles       = 0;
 8002de6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002de8:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002dea:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002dee:	f7ff ff27 	bl	8002c40 <QSPI_WriteEnable.constprop.0>
 8002df2:	b118      	cbz	r0, 8002dfc <BSP_QSPI_Erase_Block+0x38>
    return QSPI_ERROR;
 8002df4:	2001      	movs	r0, #1
}
 8002df6:	b00f      	add	sp, #60	; 0x3c
 8002df8:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4669      	mov	r1, sp
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <BSP_QSPI_Erase_Block+0x58>)
 8002e04:	f002 f9f2 	bl	80051ec <HAL_QSPI_Command>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d1f3      	bne.n	8002df4 <BSP_QSPI_Erase_Block+0x30>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002e0c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e10:	f7ff feec 	bl	8002bec <QSPI_AutoPollingMemReady.constprop.0>
    return QSPI_ERROR;
 8002e14:	3800      	subs	r0, #0
 8002e16:	bf18      	it	ne
 8002e18:	2001      	movne	r0, #1
 8002e1a:	e7ec      	b.n	8002df6 <BSP_QSPI_Erase_Block+0x32>
 8002e1c:	20022ad0 	.word	0x20022ad0

08002e20 <BSP_QSPI_GetInfo>:
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8002e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8002e28:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8002e2c:	6083      	str	r3, [r0, #8]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8002e2e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8002e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e36:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	4770      	bx	lr
	...

08002e40 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8002e40:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002e42:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002e44:	4845      	ldr	r0, [pc, #276]	; (8002f5c <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 8002e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e48:	f042 0202 	orr.w	r2, r2, #2
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
{
 8002e50:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 8002e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002e54:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002e56:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e58:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 8002e5a:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002e5e:	4d40      	ldr	r5, [pc, #256]	; (8002f60 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8002e60:	9200      	str	r2, [sp, #0]
 8002e62:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	f042 0202 	orr.w	r2, r2, #2
 8002e6a:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	f022 0202 	bic.w	r2, r2, #2
 8002e72:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8002e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e76:	f042 0202 	orr.w	r2, r2, #2
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7e:	f002 0202 	and.w	r2, r2, #2
 8002e82:	9201      	str	r2, [sp, #4]
 8002e84:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	f042 0202 	orr.w	r2, r2, #2
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e90:	f002 0202 	and.w	r2, r2, #2
 8002e94:	9202      	str	r2, [sp, #8]
 8002e96:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea2:	f002 0208 	and.w	r2, r2, #8
 8002ea6:	9203      	str	r2, [sp, #12]
 8002ea8:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eac:	f042 0208 	orr.w	r2, r2, #8
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb4:	f002 0208 	and.w	r2, r2, #8
 8002eb8:	9204      	str	r2, [sp, #16]
 8002eba:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	f042 0210 	orr.w	r2, r2, #16
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	f002 0210 	and.w	r2, r2, #16
 8002eca:	9205      	str	r2, [sp, #20]
 8002ecc:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	f042 0208 	orr.w	r2, r2, #8
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ed6:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	9306      	str	r3, [sp, #24]
 8002ee0:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002eee:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002ef0:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002ef2:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002ef4:	f001 f972 	bl	80041dc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002ef8:	a907      	add	r1, sp, #28
 8002efa:	4818      	ldr	r0, [pc, #96]	; (8002f5c <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002efc:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002efe:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f00:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002f02:	f001 f96b 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002f0a:	a907      	add	r1, sp, #28
 8002f0c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f0e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002f10:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002f12:	f001 f963 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002f1a:	a907      	add	r1, sp, #28
 8002f1c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f1e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002f20:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002f22:	f001 f95b 	bl	80041dc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002f26:	a907      	add	r1, sp, #28
 8002f28:	480e      	ldr	r0, [pc, #56]	; (8002f64 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002f2a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f2c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002f2e:	f001 f955 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002f36:	a907      	add	r1, sp, #28
 8002f38:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f3a:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002f3c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002f3e:	f001 f94d 	bl	80041dc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002f42:	4632      	mov	r2, r6
 8002f44:	210f      	movs	r1, #15
 8002f46:	205c      	movs	r0, #92	; 0x5c
 8002f48:	f000 fd00 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002f4c:	205c      	movs	r0, #92	; 0x5c
 8002f4e:	f000 fd2f 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8002f52:	b00d      	add	sp, #52	; 0x34
 8002f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000

08002f68 <BSP_QSPI_Init>:
{ 
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8002f6a:	4c49      	ldr	r4, [pc, #292]	; (8003090 <BSP_QSPI_Init+0x128>)
{ 
 8002f6c:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8002f6e:	4b49      	ldr	r3, [pc, #292]	; (8003094 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002f70:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8002f72:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002f74:	f002 f927 	bl	80051c6 <HAL_QSPI_DeInit>
 8002f78:	4605      	mov	r5, r0
 8002f7a:	b110      	cbz	r0, 8002f82 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8002f7c:	2001      	movs	r0, #1
}
 8002f7e:	b011      	add	sp, #68	; 0x44
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002f82:	4601      	mov	r1, r0
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff ff5b 	bl	8002e40 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8002f8a:	2601      	movs	r6, #1
 8002f8c:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8002f92:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002f96:	2310      	movs	r3, #16
 8002f98:	60e3      	str	r3, [r4, #12]
 8002f9a:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002f9e:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002fa2:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8002fa8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002fac:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002fb0:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002fb4:	f002 f8b2 	bl	800511c <HAL_QSPI_Init>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d1df      	bne.n	8002f7c <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fbc:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002fc0:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8002fc2:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8002fc8:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fca:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fcc:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fce:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002fd0:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fd2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fd6:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f002 f906 	bl	80051ec <HAL_QSPI_Command>
 8002fe0:	b108      	cbz	r0, 8002fe6 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8002fe2:	2004      	movs	r0, #4
 8002fe4:	e7cb      	b.n	8002f7e <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8002fe6:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	a902      	add	r1, sp, #8
 8002fee:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8002ff0:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ff2:	f002 f8fb 	bl	80051ec <HAL_QSPI_Command>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d1f3      	bne.n	8002fe2 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002ffa:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ffe:	f7ff fdf5 	bl	8002bec <QSPI_AutoPollingMemReady.constprop.0>
 8003002:	2800      	cmp	r0, #0
 8003004:	d1ed      	bne.n	8002fe2 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003006:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8003008:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003010:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003012:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003014:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003016:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800301a:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800301e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003022:	4620      	mov	r0, r4
 8003024:	f002 f8e2 	bl	80051ec <HAL_QSPI_Command>
 8003028:	2800      	cmp	r0, #0
 800302a:	d1da      	bne.n	8002fe2 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	f10d 0107 	add.w	r1, sp, #7
 8003034:	4620      	mov	r0, r4
 8003036:	f002 fa0b 	bl	8005450 <HAL_QSPI_Receive>
 800303a:	2800      	cmp	r0, #0
 800303c:	d1d1      	bne.n	8002fe2 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800303e:	f7ff fdff 	bl	8002c40 <QSPI_WriteEnable.constprop.0>
 8003042:	2800      	cmp	r0, #0
 8003044:	d1cd      	bne.n	8002fe2 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003046:	2381      	movs	r3, #129	; 0x81
 8003048:	22f0      	movs	r2, #240	; 0xf0
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003050:	210a      	movs	r1, #10
 8003052:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003056:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800305a:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003064:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003066:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800306c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003070:	f002 f8bc 	bl	80051ec <HAL_QSPI_Command>
 8003074:	2800      	cmp	r0, #0
 8003076:	d1b4      	bne.n	8002fe2 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	f10d 0107 	add.w	r1, sp, #7
 8003080:	4620      	mov	r0, r4
 8003082:	f002 f989 	bl	8005398 <HAL_QSPI_Transmit>
 8003086:	2800      	cmp	r0, #0
 8003088:	f43f af79 	beq.w	8002f7e <BSP_QSPI_Init+0x16>
 800308c:	e7a9      	b.n	8002fe2 <BSP_QSPI_Init+0x7a>
 800308e:	bf00      	nop
 8003090:	20022ad0 	.word	0x20022ad0
 8003094:	a0001000 	.word	0xa0001000

08003098 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 8003098:	2301      	movs	r3, #1
{
 800309a:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800309c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a0:	4807      	ldr	r0, [pc, #28]	; (80030c0 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 80030a2:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80030a6:	f001 fa21 	bl	80044ec <HAL_GPIO_ReadPin>
 80030aa:	2801      	cmp	r0, #1
 80030ac:	d102      	bne.n	80030b4 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80030b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80030b8:	b003      	add	sp, #12
 80030ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80030be:	bf00      	nop
 80030c0:	40020800 	.word	0x40020800

080030c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80030c4:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	460a      	mov	r2, r1
 80030cc:	4601      	mov	r1, r0
 80030ce:	4804      	ldr	r0, [pc, #16]	; (80030e0 <BSP_SD_ReadBlocks+0x1c>)
 80030d0:	f003 fb78 	bl	80067c4 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80030d4:	3800      	subs	r0, #0
 80030d6:	bf18      	it	ne
 80030d8:	2001      	movne	r0, #1
 80030da:	b003      	add	sp, #12
 80030dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e0:	20022b1c 	.word	0x20022b1c

080030e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80030e4:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	460a      	mov	r2, r1
 80030ec:	4601      	mov	r1, r0
 80030ee:	4804      	ldr	r0, [pc, #16]	; (8003100 <BSP_SD_WriteBlocks+0x1c>)
 80030f0:	f003 fc64 	bl	80069bc <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80030f4:	3800      	subs	r0, #0
 80030f6:	bf18      	it	ne
 80030f8:	2001      	movne	r0, #1
 80030fa:	b003      	add	sp, #12
 80030fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003100:	20022b1c 	.word	0x20022b1c

08003104 <BSP_SD_Erase>:
  * @param  StartAddr: Start byte address
  * @param  EndAddr: End byte address
  * @retval SD status
  */
uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
{
 8003104:	460a      	mov	r2, r1
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 8003106:	4601      	mov	r1, r0
 8003108:	4803      	ldr	r0, [pc, #12]	; (8003118 <BSP_SD_Erase+0x14>)
{
 800310a:	b508      	push	{r3, lr}
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 800310c:	f003 fd22 	bl	8006b54 <HAL_SD_Erase>
  }
  else
  {
    return MSD_OK;
  }
}
 8003110:	3800      	subs	r0, #0
 8003112:	bf18      	it	ne
 8003114:	2001      	movne	r0, #1
 8003116:	bd08      	pop	{r3, pc}
 8003118:	20022b1c 	.word	0x20022b1c

0800311c <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <BSP_SD_MspInit+0x150>)
 800311e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 8003124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
{
 800312a:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800312c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 800312e:	2703      	movs	r7, #3
{
 8003130:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003132:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003136:	f402 6200 	and.w	r2, r2, #2048	; 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800313a:	a905      	add	r1, sp, #20
 800313c:	484c      	ldr	r0, [pc, #304]	; (8003270 <BSP_SD_MspInit+0x154>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800313e:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003140:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003142:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003146:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003148:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800314e:	f44f 3940 	mov.w	r9, #196608	; 0x30000
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003152:	4c48      	ldr	r4, [pc, #288]	; (8003274 <BSP_SD_MspInit+0x158>)
  __DMAx_TxRx_CLK_ENABLE();
 8003154:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
 800315a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003160:	9202      	str	r2, [sp, #8]
 8003162:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	f042 0204 	orr.w	r2, r2, #4
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
 800316c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316e:	f002 0204 	and.w	r2, r2, #4
 8003172:	9203      	str	r2, [sp, #12]
 8003174:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003178:	f042 0208 	orr.w	r2, r2, #8
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800317e:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	9304      	str	r3, [sp, #16]
 8003188:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800318a:	2301      	movs	r3, #1
 800318c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003190:	230c      	movs	r3, #12
 8003192:	e9cd 7308 	strd	r7, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003196:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800319a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800319c:	f001 f81e 	bl	80041dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80031a0:	a905      	add	r1, sp, #20
 80031a2:	4835      	ldr	r0, [pc, #212]	; (8003278 <BSP_SD_MspInit+0x15c>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 80031a4:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80031a8:	f001 f818 	bl	80041dc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	210e      	movs	r1, #14
 80031b0:	2031      	movs	r0, #49	; 0x31
 80031b2:	f000 fbcb 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80031b6:	2031      	movs	r0, #49	; 0x31
 80031b8:	f000 fbfa 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80031c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80031c8:	482c      	ldr	r0, [pc, #176]	; (800327c <BSP_SD_MspInit+0x160>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80031ca:	642c      	str	r4, [r5, #64]	; 0x40
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80031cc:	6020      	str	r0, [r4, #0]
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80031ce:	4620      	mov	r0, r4
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80031d0:	62a7      	str	r7, [r4, #40]	; 0x28
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80031d2:	60e6      	str	r6, [r4, #12]
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80031d4:	63a5      	str	r5, [r4, #56]	; 0x38
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031d6:	e9c4 2304 	strd	r2, r3, [r4, #16]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80031da:	e9c4 1601 	strd	r1, r6, [r4, #4]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80031de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031e2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80031e6:	e9c4 ba06 	strd	fp, sl, [r4, #24]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80031ea:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80031ee:	e9c4 9808 	strd	r9, r8, [r4, #32]
  HAL_DMA_DeInit(&dma_rx_handle);
 80031f2:	f000 fcab 	bl	8003b4c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 fc28 	bl	8003a4c <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003204:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003208:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003212:	66e6      	str	r6, [r4, #108]	; 0x6c
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003214:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003218:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800321c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003220:	e9c4 7323 	strd	r7, r3, [r4, #140]	; 0x8c
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <BSP_SD_MspInit+0x164>)
 8003226:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003228:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800322c:	f847 3f60 	str.w	r3, [r7, #96]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8003230:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003232:	63ef      	str	r7, [r5, #60]	; 0x3c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003234:	e9c4 ba1e 	strd	fp, sl, [r4, #120]	; 0x78
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003238:	e9c4 9820 	strd	r9, r8, [r4, #128]	; 0x80
  HAL_DMA_DeInit(&dma_tx_handle);
 800323c:	f000 fc86 	bl	8003b4c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8003240:	4638      	mov	r0, r7
 8003242:	f000 fc03 	bl	8003a4c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8003246:	4632      	mov	r2, r6
 8003248:	210f      	movs	r1, #15
 800324a:	203b      	movs	r0, #59	; 0x3b
 800324c:	f000 fb7e 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003250:	203b      	movs	r0, #59	; 0x3b
 8003252:	f000 fbad 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8003256:	4632      	mov	r2, r6
 8003258:	210f      	movs	r1, #15
 800325a:	2045      	movs	r0, #69	; 0x45
 800325c:	f000 fb76 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003260:	2045      	movs	r0, #69	; 0x45
 8003262:	f000 fba5 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8003266:	b00b      	add	sp, #44	; 0x2c
 8003268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	40020800 	.word	0x40020800
 8003274:	200009d0 	.word	0x200009d0
 8003278:	40020c00 	.word	0x40020c00
 800327c:	40026458 	.word	0x40026458
 8003280:	400264a0 	.word	0x400264a0

08003284 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003288:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800328a:	480d      	ldr	r0, [pc, #52]	; (80032c0 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	f042 0204 	orr.w	r2, r2, #4
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80032ae:	a901      	add	r1, sp, #4
 80032b0:	f000 ff94 	bl	80041dc <HAL_GPIO_Init>
}
 80032b4:	b007      	add	sp, #28
 80032b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020800 	.word	0x40020800

080032c4 <BSP_SD_Init>:
{ 
 80032c4:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 80032c6:	4c13      	ldr	r4, [pc, #76]	; (8003314 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80032c8:	2600      	movs	r6, #0
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80032cc:	4631      	mov	r1, r6
 80032ce:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80032d0:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80032d2:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80032d6:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80032da:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80032de:	f7ff ffd1 	bl	8003284 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80032e2:	f7ff fed9 	bl	8003098 <BSP_SD_IsDetected>
 80032e6:	2801      	cmp	r0, #1
 80032e8:	4605      	mov	r5, r0
 80032ea:	d111      	bne.n	8003310 <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 80032ec:	4620      	mov	r0, r4
 80032ee:	4631      	mov	r1, r6
 80032f0:	f7ff ff14 	bl	800311c <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80032f4:	4620      	mov	r0, r4
 80032f6:	f003 fe45 	bl	8006f84 <HAL_SD_Init>
 80032fa:	b938      	cbnz	r0, 800330c <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80032fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003300:	4620      	mov	r0, r4
 8003302:	f003 fe5b 	bl	8006fbc <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8003306:	1b85      	subs	r5, r0, r6
 8003308:	bf18      	it	ne
 800330a:	2501      	movne	r5, #1
}
 800330c:	4628      	mov	r0, r5
 800330e:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8003310:	2502      	movs	r5, #2
 8003312:	e7fb      	b.n	800330c <BSP_SD_Init+0x48>
 8003314:	20022b1c 	.word	0x20022b1c
 8003318:	40012c00 	.word	0x40012c00

0800331c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800331c:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <BSP_SD_GetCardState+0x10>)
 8003320:	f003 fede 	bl	80070e0 <HAL_SD_GetCardState>
}
 8003324:	3804      	subs	r0, #4
 8003326:	bf18      	it	ne
 8003328:	2001      	movne	r0, #1
 800332a:	bd08      	pop	{r3, pc}
 800332c:	20022b1c 	.word	0x20022b1c

08003330 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003334:	4c21      	ldr	r4, [pc, #132]	; (80033bc <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003336:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003338:	4d21      	ldr	r5, [pc, #132]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 800333a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800333e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003340:	4621      	mov	r1, r4
{
 8003342:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003348:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800334a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800334e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003352:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003356:	f003 ff89 	bl	800726c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800335a:	4630      	mov	r0, r6
 800335c:	f000 fad2 	bl	8003904 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003360:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003362:	4621      	mov	r1, r4
 8003364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003368:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800336a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800336e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003372:	f003 ff7b 	bl	800726c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003376:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003378:	4621      	mov	r1, r4
 800337a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800337e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003380:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8003384:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8003386:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800338a:	f003 ff6f 	bl	800726c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800338e:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003392:	4621      	mov	r1, r4
 8003394:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003398:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800339a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800339c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800339e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033a0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80033a4:	9b01      	ldr	r3, [sp, #4]
 80033a6:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033a8:	f003 ff60 	bl	800726c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80033ac:	4649      	mov	r1, r9
 80033ae:	4628      	mov	r0, r5
}
 80033b0:	b003      	add	sp, #12
 80033b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80033b6:	f003 bf70 	b.w	800729a <HAL_SDRAM_ProgramRefreshRate>
 80033ba:	bf00      	nop
 80033bc:	20000b50 	.word	0x20000b50
 80033c0:	20022ba0 	.word	0x20022ba0

080033c4 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 80033c4:	b508      	push	{r3, lr}
 80033c6:	4613      	mov	r3, r2
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 80033c8:	460a      	mov	r2, r1
 80033ca:	4601      	mov	r1, r0
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <BSP_SDRAM_ReadData+0x18>)
 80033ce:	f003 febc 	bl	800714a <HAL_SDRAM_Read_32b>
  }
  else
  {
    return SDRAM_OK;
  } 
}
 80033d2:	3800      	subs	r0, #0
 80033d4:	bf18      	it	ne
 80033d6:	2001      	movne	r0, #1
 80033d8:	bd08      	pop	{r3, pc}
 80033da:	bf00      	nop
 80033dc:	20022ba0 	.word	0x20022ba0

080033e0 <BSP_SDRAM_ReadData_DMA>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 80033e0:	b508      	push	{r3, lr}
 80033e2:	4613      	mov	r3, r2
  if(HAL_SDRAM_Read_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 80033e4:	460a      	mov	r2, r1
 80033e6:	4601      	mov	r1, r0
 80033e8:	4803      	ldr	r0, [pc, #12]	; (80033f8 <BSP_SDRAM_ReadData_DMA+0x18>)
 80033ea:	f003 fef3 	bl	80071d4 <HAL_SDRAM_Read_DMA>
  }
  else
  {
    return SDRAM_OK;
  }     
}
 80033ee:	3800      	subs	r0, #0
 80033f0:	bf18      	it	ne
 80033f2:	2001      	movne	r0, #1
 80033f4:	bd08      	pop	{r3, pc}
 80033f6:	bf00      	nop
 80033f8:	20022ba0 	.word	0x20022ba0

080033fc <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 80033fc:	b508      	push	{r3, lr}
 80033fe:	4613      	mov	r3, r2
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003400:	460a      	mov	r2, r1
 8003402:	4601      	mov	r1, r0
 8003404:	4803      	ldr	r0, [pc, #12]	; (8003414 <BSP_SDRAM_WriteData+0x18>)
 8003406:	f003 fec2 	bl	800718e <HAL_SDRAM_Write_32b>
  }
  else
  {
    return SDRAM_OK;
  }
}
 800340a:	3800      	subs	r0, #0
 800340c:	bf18      	it	ne
 800340e:	2001      	movne	r0, #1
 8003410:	bd08      	pop	{r3, pc}
 8003412:	bf00      	nop
 8003414:	20022ba0 	.word	0x20022ba0

08003418 <BSP_SDRAM_WriteData_DMA>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8003418:	b508      	push	{r3, lr}
 800341a:	4613      	mov	r3, r2
  if(HAL_SDRAM_Write_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800341c:	460a      	mov	r2, r1
 800341e:	4601      	mov	r1, r0
 8003420:	4803      	ldr	r0, [pc, #12]	; (8003430 <BSP_SDRAM_WriteData_DMA+0x18>)
 8003422:	f003 fefb 	bl	800721c <HAL_SDRAM_Write_DMA>
  }
  else
  {
    return SDRAM_OK;
  } 
}
 8003426:	3800      	subs	r0, #0
 8003428:	bf18      	it	ne
 800342a:	2001      	movne	r0, #1
 800342c:	bd08      	pop	{r3, pc}
 800342e:	bf00      	nop
 8003430:	20022ba0 	.word	0x20022ba0

08003434 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003434:	4b55      	ldr	r3, [pc, #340]	; (800358c <BSP_SDRAM_MspInit+0x158>)
 8003436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003438:	f042 0201 	orr.w	r2, r2, #1
{  
 800343c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8003440:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8003442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8003444:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003446:	a909      	add	r1, sp, #36	; 0x24
 8003448:	4851      	ldr	r0, [pc, #324]	; (8003590 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800344a:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800344e:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8003450:	9201      	str	r2, [sp, #4]
 8003452:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003462:	9202      	str	r2, [sp, #8]
 8003464:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003468:	f042 0204 	orr.w	r2, r2, #4
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
 800346e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003470:	f002 0204 	and.w	r2, r2, #4
 8003474:	9203      	str	r2, [sp, #12]
 8003476:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
 8003480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003482:	f002 0208 	and.w	r2, r2, #8
 8003486:	9204      	str	r2, [sp, #16]
 8003488:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800348a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348c:	f042 0210 	orr.w	r2, r2, #16
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	f002 0210 	and.w	r2, r2, #16
 8003498:	9205      	str	r2, [sp, #20]
 800349a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800349c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	f002 0220 	and.w	r2, r2, #32
 80034aa:	9206      	str	r2, [sp, #24]
 80034ac:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80034bc:	9207      	str	r2, [sp, #28]
 80034be:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034c8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	9308      	str	r3, [sp, #32]
 80034d2:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80034da:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80034dc:	230c      	movs	r3, #12
 80034de:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80034e0:	2308      	movs	r3, #8
 80034e2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80034e4:	f000 fe7a 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80034e8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80034ec:	a909      	add	r1, sp, #36	; 0x24
 80034ee:	4829      	ldr	r0, [pc, #164]	; (8003594 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80034f0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80034f2:	f000 fe73 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80034f6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034fa:	a909      	add	r1, sp, #36	; 0x24
 80034fc:	4826      	ldr	r0, [pc, #152]	; (8003598 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80034fe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003500:	f000 fe6c 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003504:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003508:	a909      	add	r1, sp, #36	; 0x24
 800350a:	4824      	ldr	r0, [pc, #144]	; (800359c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800350c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800350e:	f000 fe65 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003512:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003516:	a909      	add	r1, sp, #36	; 0x24
 8003518:	4821      	ldr	r0, [pc, #132]	; (80035a0 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800351a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800351c:	f000 fe5e 	bl	80041dc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003520:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003522:	a909      	add	r1, sp, #36	; 0x24
 8003524:	481f      	ldr	r0, [pc, #124]	; (80035a4 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003526:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003528:	f000 fe58 	bl	80041dc <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800352e:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003530:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003534:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003538:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800353a:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 800353c:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800353e:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003546:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800354a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800354e:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003556:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800355a:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800355c:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <BSP_SDRAM_MspInit+0x178>)
 8003562:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003566:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003568:	6335      	str	r5, [r6, #48]	; 0x30
 800356a:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 800356c:	f000 faee 	bl	8003b4c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003570:	4628      	mov	r0, r5
 8003572:	f000 fa6b 	bl	8003a4c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003576:	4622      	mov	r2, r4
 8003578:	210f      	movs	r1, #15
 800357a:	2038      	movs	r0, #56	; 0x38
 800357c:	f000 f9e6 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003580:	2038      	movs	r0, #56	; 0x38
 8003582:	f000 fa15 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8003586:	b00e      	add	sp, #56	; 0x38
 8003588:	bd70      	pop	{r4, r5, r6, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	40020800 	.word	0x40020800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40021000 	.word	0x40021000
 800359c:	40021400 	.word	0x40021400
 80035a0:	40021800 	.word	0x40021800
 80035a4:	40021c00 	.word	0x40021c00
 80035a8:	20000b50 	.word	0x20000b50
 80035ac:	40026410 	.word	0x40026410

080035b0 <BSP_SDRAM_Init>:
{ 
 80035b0:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035b2:	4c1a      	ldr	r4, [pc, #104]	; (800361c <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 80035b4:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035b6:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 80035b8:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 80035ba:	4d1a      	ldr	r5, [pc, #104]	; (8003624 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80035bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035c0:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80035c2:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80035c4:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 80035c6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 80035ca:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 80035ce:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 80035d2:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035d6:	2210      	movs	r2, #16
 80035d8:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80035da:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035dc:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80035e0:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80035e4:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80035e6:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80035ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ee:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80035f2:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80035f4:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80035f8:	f7ff ff1c 	bl	8003434 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80035fc:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8003600:	4620      	mov	r0, r4
 8003602:	4c09      	ldr	r4, [pc, #36]	; (8003628 <BSP_SDRAM_Init+0x78>)
 8003604:	f003 fd81 	bl	800710a <HAL_SDRAM_Init>
 8003608:	3800      	subs	r0, #0
 800360a:	bf18      	it	ne
 800360c:	2001      	movne	r0, #1
 800360e:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003610:	f240 6003 	movw	r0, #1539	; 0x603
 8003614:	f7ff fe8c 	bl	8003330 <BSP_SDRAM_Initialization_sequence>
}
 8003618:	7820      	ldrb	r0, [r4, #0]
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	20022ba0 	.word	0x20022ba0
 8003620:	a0000140 	.word	0xa0000140
 8003624:	20000b50 	.word	0x20000b50
 8003628:	2000009c 	.word	0x2000009c

0800362c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800362c:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 800362e:	4c0b      	ldr	r4, [pc, #44]	; (800365c <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003630:	4d0b      	ldr	r5, [pc, #44]	; (8003660 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 8003632:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003634:	2070      	movs	r0, #112	; 0x70
 8003636:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 8003638:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800363a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800363c:	686b      	ldr	r3, [r5, #4]
 800363e:	2070      	movs	r0, #112	; 0x70
 8003640:	4798      	blx	r3
 8003642:	2851      	cmp	r0, #81	; 0x51
 8003644:	d108      	bne.n	8003658 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 8003646:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 8003648:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 800364a:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 800364c:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800364e:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 8003650:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 8003652:	4798      	blx	r3
  uint8_t status = TS_OK;
 8003654:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 8003656:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 8003658:	2003      	movs	r0, #3
 800365a:	e7fc      	b.n	8003656 <BSP_TS_Init+0x2a>
 800365c:	20000c3c 	.word	0x20000c3c
 8003660:	20000000 	.word	0x20000000

08003664 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <BSP_TS_Get_GestureId+0x58>)
{
 8003666:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
 8003668:	2400      	movs	r4, #0
{
 800366a:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800366c:	a901      	add	r1, sp, #4
 800366e:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
 8003670:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003672:	f7fd f85b 	bl	800072c <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003676:	9801      	ldr	r0, [sp, #4]
 8003678:	2818      	cmp	r0, #24
 800367a:	d019      	beq.n	80036b0 <BSP_TS_Get_GestureId+0x4c>
 800367c:	d808      	bhi.n	8003690 <BSP_TS_Get_GestureId+0x2c>
 800367e:	2810      	cmp	r0, #16
 8003680:	d011      	beq.n	80036a6 <BSP_TS_Get_GestureId+0x42>
 8003682:	2814      	cmp	r0, #20
 8003684:	d012      	beq.n	80036ac <BSP_TS_Get_GestureId+0x48>
 8003686:	b158      	cbz	r0, 80036a0 <BSP_TS_Get_GestureId+0x3c>
 8003688:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 800368a:	4620      	mov	r0, r4
 800368c:	b003      	add	sp, #12
 800368e:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8003690:	2840      	cmp	r0, #64	; 0x40
 8003692:	d00f      	beq.n	80036b4 <BSP_TS_Get_GestureId+0x50>
 8003694:	2849      	cmp	r0, #73	; 0x49
 8003696:	d00f      	beq.n	80036b8 <BSP_TS_Get_GestureId+0x54>
 8003698:	281c      	cmp	r0, #28
 800369a:	d1f5      	bne.n	8003688 <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800369c:	2304      	movs	r3, #4
 800369e:	e003      	b.n	80036a8 <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
 80036a0:	4604      	mov	r4, r0
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80036a2:	62a8      	str	r0, [r5, #40]	; 0x28
      break;
 80036a4:	e7f1      	b.n	800368a <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80036a6:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80036a8:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 80036aa:	e7ee      	b.n	800368a <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80036ac:	2302      	movs	r3, #2
 80036ae:	e7fb      	b.n	80036a8 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e7f9      	b.n	80036a8 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80036b4:	2305      	movs	r3, #5
 80036b6:	e7f7      	b.n	80036a8 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80036b8:	2306      	movs	r3, #6
 80036ba:	e7f5      	b.n	80036a8 <BSP_TS_Get_GestureId+0x44>
 80036bc:	20000c3c 	.word	0x20000c3c

080036c0 <BSP_TS_GetState>:
{
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80036c4:	4d55      	ldr	r5, [pc, #340]	; (800381c <BSP_TS_GetState+0x15c>)
{
 80036c6:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 80036c8:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80036ca:	686b      	ldr	r3, [r5, #4]
{
 80036cc:	9003      	str	r0, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	7a28      	ldrb	r0, [r5, #8]
  uint32_t event = 0;
 80036d2:	9407      	str	r4, [sp, #28]
  uint32_t area = 0;
 80036d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80036d8:	4798      	blx	r3
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	7018      	strb	r0, [r3, #0]
  if(TS_State->touchDetected)
 80036de:	b198      	cbz	r0, 8003708 <BSP_TS_GetState+0x48>
 80036e0:	f103 0716 	add.w	r7, r3, #22
 80036e4:	1c9e      	adds	r6, r3, #2
 80036e6:	f105 0a0c 	add.w	sl, r5, #12
 80036ea:	ab0b      	add	r3, sp, #44	; 0x2c
 80036ec:	f105 0b20 	add.w	fp, r5, #32
 80036f0:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80036f4:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80036f8:	9302      	str	r3, [sp, #8]
    for(index=0; index < TS_State->touchDetected; index++)
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	42a3      	cmp	r3, r4
 8003700:	d805      	bhi.n	800370e <BSP_TS_GetState+0x4e>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003702:	9803      	ldr	r0, [sp, #12]
 8003704:	f7ff ffae 	bl	8003664 <BSP_TS_Get_GestureId>
}
 8003708:	b015      	add	sp, #84	; 0x54
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800370e:	686b      	ldr	r3, [r5, #4]
 8003710:	4642      	mov	r2, r8
 8003712:	4649      	mov	r1, r9
 8003714:	7a28      	ldrb	r0, [r5, #8]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 800371a:	7a6b      	ldrb	r3, [r5, #9]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d14c      	bne.n	80037ba <BSP_TS_GetState+0xfa>
        x[index] = brute_x[index];
 8003720:	f8b9 2000 	ldrh.w	r2, [r9]
 8003724:	a908      	add	r1, sp, #32
 8003726:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
        y[index] = brute_y[index];
 800372a:	f8b8 2000 	ldrh.w	r2, [r8]
        y[index] = 4096 - brute_y[index];
 800372e:	9902      	ldr	r1, [sp, #8]
 8003730:	800a      	strh	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
 8003732:	071b      	lsls	r3, r3, #28
 8003734:	d508      	bpl.n	8003748 <BSP_TS_GetState+0x88>
        y[index] = brute_x[index];
 8003736:	f8b9 3000 	ldrh.w	r3, [r9]
 800373a:	9a02      	ldr	r2, [sp, #8]
 800373c:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
 800373e:	aa08      	add	r2, sp, #32
 8003740:	f8b8 3000 	ldrh.w	r3, [r8]
 8003744:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003748:	ab08      	add	r3, sp, #32
 800374a:	f8da 2000 	ldr.w	r2, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800374e:	f8db 0000 	ldr.w	r0, [fp]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003752:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8003756:	b293      	uxth	r3, r2
 8003758:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800375a:	9a02      	ldr	r2, [sp, #8]
 800375c:	f832 1b02 	ldrh.w	r1, [r2], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003760:	bf8c      	ite	hi
 8003762:	ebac 0303 	subhi.w	r3, ip, r3
 8003766:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800376a:	9202      	str	r2, [sp, #8]
 800376c:	4281      	cmp	r1, r0
 800376e:	b282      	uxth	r2, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003770:	7a28      	ldrb	r0, [r5, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003772:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003774:	bf8c      	ite	hi
 8003776:	1a8a      	subhi	r2, r1, r2
 8003778:	1a52      	subls	r2, r2, r1
 800377a:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 800377c:	4413      	add	r3, r2
 800377e:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 8003780:	bfc4      	itt	gt
 8003782:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
 8003786:	f8cb 1000 	strgt.w	r1, [fp]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800378a:	2870      	cmp	r0, #112	; 0x70
 800378c:	d125      	bne.n	80037da <BSP_TS_GetState+0x11a>
        TS_State->touchX[index] = x[index];
 800378e:	f8a6 c000 	strh.w	ip, [r6]
        TS_State->touchY[index] = y[index];
 8003792:	8171      	strh	r1, [r6, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003794:	ab07      	add	r3, sp, #28
 8003796:	aa05      	add	r2, sp, #20
 8003798:	4621      	mov	r1, r4
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	ab06      	add	r3, sp, #24
 800379e:	f7fc ffd5 	bl	800074c <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80037a2:	9b05      	ldr	r3, [sp, #20]
 80037a4:	f807 3b01 	strb.w	r3, [r7], #1
      TS_State->touchArea[index]   = area;
 80037a8:	9b06      	ldr	r3, [sp, #24]
 80037aa:	727b      	strb	r3, [r7, #9]
      switch(event)
 80037ac:	9b07      	ldr	r3, [sp, #28]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d822      	bhi.n	80037f8 <BSP_TS_GetState+0x138>
 80037b2:	e8df f003 	tbb	[pc, r3]
 80037b6:	2c1f      	.short	0x2c1f
 80037b8:	302e      	.short	0x302e
      if(tsOrientation & TS_SWAP_X)
 80037ba:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
 80037bc:	bf41      	itttt	mi
 80037be:	f8b9 2000 	ldrhmi.w	r2, [r9]
 80037c2:	a908      	addmi	r1, sp, #32
 80037c4:	f5c2 5280 	rsbmi	r2, r2, #4096	; 0x1000
 80037c8:	f821 2014 	strhmi.w	r2, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 80037cc:	075a      	lsls	r2, r3, #29
 80037ce:	d5b0      	bpl.n	8003732 <BSP_TS_GetState+0x72>
        y[index] = 4096 - brute_y[index];
 80037d0:	f8b8 2000 	ldrh.w	r2, [r8]
 80037d4:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80037d8:	e7a9      	b.n	800372e <BSP_TS_GetState+0x6e>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80037da:	f8da 3000 	ldr.w	r3, [sl]
 80037de:	882a      	ldrh	r2, [r5, #0]
 80037e0:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80037e2:	886a      	ldrh	r2, [r5, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80037e4:	0b1b      	lsrs	r3, r3, #12
 80037e6:	8033      	strh	r3, [r6, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80037e8:	f8db 3000 	ldr.w	r3, [fp]
 80037ec:	4353      	muls	r3, r2
 80037ee:	0b1b      	lsrs	r3, r3, #12
 80037f0:	8173      	strh	r3, [r6, #10]
 80037f2:	e7cf      	b.n	8003794 <BSP_TS_GetState+0xd4>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80037f4:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80037f6:	713b      	strb	r3, [r7, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 80037f8:	3401      	adds	r4, #1
 80037fa:	3602      	adds	r6, #2
 80037fc:	f10a 0a04 	add.w	sl, sl, #4
 8003800:	f10b 0b04 	add.w	fp, fp, #4
 8003804:	f109 0902 	add.w	r9, r9, #2
 8003808:	f108 0802 	add.w	r8, r8, #2
 800380c:	e775      	b.n	80036fa <BSP_TS_GetState+0x3a>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800380e:	2302      	movs	r3, #2
 8003810:	e7f1      	b.n	80037f6 <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003812:	2303      	movs	r3, #3
 8003814:	e7ef      	b.n	80037f6 <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003816:	2300      	movs	r3, #0
 8003818:	e7ed      	b.n	80037f6 <BSP_TS_GetState+0x136>
 800381a:	bf00      	nop
 800381c:	20000c3c 	.word	0x20000c3c

08003820 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003820:	490f      	ldr	r1, [pc, #60]	; (8003860 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003822:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003824:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <SystemInit+0x44>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800383a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003842:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003846:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003848:	4a07      	ldr	r2, [pc, #28]	; (8003868 <SystemInit+0x48>)
 800384a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003852:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003854:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800385a:	608b      	str	r3, [r1, #8]
#endif
}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000ed00 	.word	0xe000ed00
 8003864:	40023800 	.word	0x40023800
 8003868:	24003010 	.word	0x24003010

0800386c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800386c:	4770      	bx	lr
	...

08003870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003870:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003872:	4e0e      	ldr	r6, [pc, #56]	; (80038ac <HAL_InitTick+0x3c>)
{
 8003874:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800387a:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <HAL_InitTick+0x40>)
 800387c:	7830      	ldrb	r0, [r6, #0]
 800387e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	fbb0 f0f3 	udiv	r0, r0, r3
 8003888:	f000 f8b4 	bl	80039f4 <HAL_SYSTICK_Config>
 800388c:	4604      	mov	r4, r0
 800388e:	b950      	cbnz	r0, 80038a6 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003890:	2d0f      	cmp	r5, #15
 8003892:	d808      	bhi.n	80038a6 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003894:	4602      	mov	r2, r0
 8003896:	4629      	mov	r1, r5
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f000 f856 	bl	800394c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038a0:	4620      	mov	r0, r4
 80038a2:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80038a6:	2001      	movs	r0, #1
 80038a8:	e7fc      	b.n	80038a4 <HAL_InitTick+0x34>
 80038aa:	bf00      	nop
 80038ac:	200000a4 	.word	0x200000a4
 80038b0:	200000a0 	.word	0x200000a0

080038b4 <HAL_Init>:
{
 80038b4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b8:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c0:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c8:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ca:	f000 f82d 	bl	8003928 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ce:	200f      	movs	r0, #15
 80038d0:	f7ff ffce 	bl	8003870 <HAL_InitTick>
  HAL_MspInit();
 80038d4:	f7ff ffca 	bl	800386c <HAL_MspInit>
}
 80038d8:	2000      	movs	r0, #0
 80038da:	bd08      	pop	{r3, pc}
 80038dc:	40023c00 	.word	0x40023c00

080038e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_IncTick+0x10>)
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_IncTick+0x14>)
 80038e4:	6811      	ldr	r1, [r2, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	440b      	add	r3, r1
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20022bd4 	.word	0x20022bd4
 80038f4:	200000a4 	.word	0x200000a4

080038f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80038f8:	4b01      	ldr	r3, [pc, #4]	; (8003900 <HAL_GetTick+0x8>)
 80038fa:	6818      	ldr	r0, [r3, #0]
}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20022bd4 	.word	0x20022bd4

08003904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff fff6 	bl	80038f8 <HAL_GetTick>
 800390c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003910:	bf1e      	ittt	ne
 8003912:	4b04      	ldrne	r3, [pc, #16]	; (8003924 <HAL_Delay+0x20>)
 8003914:	781b      	ldrbne	r3, [r3, #0]
 8003916:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003918:	f7ff ffee 	bl	80038f8 <HAL_GetTick>
 800391c:	1b43      	subs	r3, r0, r5
 800391e:	42a3      	cmp	r3, r4
 8003920:	d3fa      	bcc.n	8003918 <HAL_Delay+0x14>
  {
  }
}
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	200000a4 	.word	0x200000a4

08003928 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003928:	4907      	ldr	r1, [pc, #28]	; (8003948 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800392a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800392c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800392e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003932:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003936:	0412      	lsls	r2, r2, #16
 8003938:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800393a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800393c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003944:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394e:	b530      	push	{r4, r5, lr}
 8003950:	68dc      	ldr	r4, [r3, #12]
 8003952:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003956:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	2d04      	cmp	r5, #4
 800395e:	bf28      	it	cs
 8003960:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003968:	bf8c      	ite	hi
 800396a:	3c03      	subhi	r4, #3
 800396c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8003972:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003974:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800397c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	fa01 f104 	lsl.w	r1, r1, r4
 8003984:	ea41 0302 	orr.w	r3, r1, r2
 8003988:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800398c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800398e:	db06      	blt.n	800399e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003994:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003998:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800399c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	f000 000f 	and.w	r0, r0, #15
 80039a2:	4a02      	ldr	r2, [pc, #8]	; (80039ac <HAL_NVIC_SetPriority+0x60>)
 80039a4:	5413      	strb	r3, [r2, r0]
 80039a6:	e7f9      	b.n	800399c <HAL_NVIC_SetPriority+0x50>
 80039a8:	e000ed00 	.word	0xe000ed00
 80039ac:	e000ed14 	.word	0xe000ed14

080039b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039b0:	2800      	cmp	r0, #0
 80039b2:	db08      	blt.n	80039c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b4:	0942      	lsrs	r2, r0, #5
 80039b6:	2301      	movs	r3, #1
 80039b8:	f000 001f 	and.w	r0, r0, #31
 80039bc:	fa03 f000 	lsl.w	r0, r3, r0
 80039c0:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <HAL_NVIC_EnableIRQ+0x18>)
 80039c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100

080039cc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039cc:	2800      	cmp	r0, #0
 80039ce:	db0d      	blt.n	80039ec <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d0:	0943      	lsrs	r3, r0, #5
 80039d2:	2201      	movs	r2, #1
 80039d4:	f000 001f 	and.w	r0, r0, #31
 80039d8:	3320      	adds	r3, #32
 80039da:	fa02 f000 	lsl.w	r0, r2, r0
 80039de:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_NVIC_DisableIRQ+0x24>)
 80039e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039e8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f4:	3801      	subs	r0, #1
 80039f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80039fa:	d20a      	bcs.n	8003a12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	21f0      	movs	r1, #240	; 0xf0
 8003a00:	4a06      	ldr	r2, [pc, #24]	; (8003a1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a02:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a04:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a20:	6803      	ldr	r3, [r0, #0]
{
 8003a22:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a24:	2018      	movs	r0, #24
 8003a26:	b2d9      	uxtb	r1, r3
 8003a28:	3910      	subs	r1, #16
 8003a2a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8003a2e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a30:	4c05      	ldr	r4, [pc, #20]	; (8003a48 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003a32:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a34:	5c20      	ldrb	r0, [r4, r0]
 8003a36:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a38:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8003a3c:	f020 0003 	bic.w	r0, r0, #3
 8003a40:	bf88      	it	hi
 8003a42:	3004      	addhi	r0, #4
 8003a44:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003a46:	bd10      	pop	{r4, pc}
 8003a48:	0800f8e8 	.word	0x0800f8e8

08003a4c <HAL_DMA_Init>:
{
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff ff52 	bl	80038f8 <HAL_GetTick>
 8003a54:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003a56:	2c00      	cmp	r4, #0
 8003a58:	d073      	beq.n	8003b42 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8003a5a:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8003a5c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003a5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	6821      	ldr	r1, [r4, #0]
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	07d8      	lsls	r0, r3, #31
 8003a76:	d42f      	bmi.n	8003ad8 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8003a78:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a7a:	4d33      	ldr	r5, [pc, #204]	; (8003b48 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a7e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a80:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	68e2      	ldr	r2, [r4, #12]
 8003a88:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8a:	6922      	ldr	r2, [r4, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	6962      	ldr	r2, [r4, #20]
 8003a90:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a92:	69e2      	ldr	r2, [r4, #28]
 8003a94:	4303      	orrs	r3, r0
 8003a96:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a98:	6a22      	ldr	r2, [r4, #32]
 8003a9a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a9e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa4:	bf02      	ittt	eq
 8003aa6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8003aaa:	4335      	orreq	r5, r6
 8003aac:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aae:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8003ab0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003ab2:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003ab8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003abc:	d133      	bne.n	8003b26 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8003abe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003ac2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac4:	b37d      	cbz	r5, 8003b26 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ac6:	b990      	cbnz	r0, 8003aee <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8003ac8:	2a01      	cmp	r2, #1
 8003aca:	d021      	beq.n	8003b10 <HAL_DMA_Init+0xc4>
 8003acc:	f032 0202 	bics.w	r2, r2, #2
 8003ad0:	d129      	bne.n	8003b26 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad2:	01ea      	lsls	r2, r5, #7
 8003ad4:	d527      	bpl.n	8003b26 <HAL_DMA_Init+0xda>
 8003ad6:	e01e      	b.n	8003b16 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ad8:	f7ff ff0e 	bl	80038f8 <HAL_GetTick>
 8003adc:	1b40      	subs	r0, r0, r5
 8003ade:	2805      	cmp	r0, #5
 8003ae0:	d9c6      	bls.n	8003a70 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ae2:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ae4:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ae6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aee:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003af2:	d114      	bne.n	8003b1e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8003af4:	2a03      	cmp	r2, #3
 8003af6:	d816      	bhi.n	8003b26 <HAL_DMA_Init+0xda>
 8003af8:	a001      	add	r0, pc, #4	; (adr r0, 8003b00 <HAL_DMA_Init+0xb4>)
 8003afa:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b17 	.word	0x08003b17
 8003b04:	08003ad3 	.word	0x08003ad3
 8003b08:	08003b17 	.word	0x08003b17
 8003b0c:	08003b11 	.word	0x08003b11
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b10:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003b14:	d107      	bne.n	8003b26 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b16:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8003b18:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b1a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	e7e4      	b.n	8003ae8 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8003b1e:	2a02      	cmp	r2, #2
 8003b20:	d9f9      	bls.n	8003b16 <HAL_DMA_Init+0xca>
 8003b22:	2a03      	cmp	r2, #3
 8003b24:	d0d5      	beq.n	8003ad2 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8003b26:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff ff79 	bl	8003a20 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b30:	233f      	movs	r3, #63	; 0x3f
 8003b32:	4093      	lsls	r3, r2
 8003b34:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b36:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003b38:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003b40:	e7d4      	b.n	8003aec <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
 8003b44:	e7d2      	b.n	8003aec <HAL_DMA_Init+0xa0>
 8003b46:	bf00      	nop
 8003b48:	f010803f 	.word	0xf010803f

08003b4c <HAL_DMA_DeInit>:
{
 8003b4c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003b4e:	4605      	mov	r5, r0
 8003b50:	b320      	cbz	r0, 8003b9c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003b52:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	b2dc      	uxtb	r4, r3
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003b5c:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8003b5e:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003b68:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8003b6a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003b6c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003b6e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003b70:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003b72:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003b74:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b76:	f7ff ff53 	bl	8003a20 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003b7c:	233f      	movs	r3, #63	; 0x3f
 8003b7e:	4093      	lsls	r3, r2
 8003b80:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b82:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8003b84:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003b88:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8003b8c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003b90:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8003b94:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8003b98:	4620      	mov	r0, r4
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b9c:	2401      	movs	r4, #1
 8003b9e:	e7fb      	b.n	8003b98 <HAL_DMA_DeInit+0x4c>

08003ba0 <HAL_DMA_Start_IT>:
{
 8003ba0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003ba2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003ba8:	2c01      	cmp	r4, #1
 8003baa:	d034      	beq.n	8003c16 <HAL_DMA_Start_IT+0x76>
 8003bac:	2401      	movs	r4, #1
 8003bae:	2500      	movs	r5, #0
 8003bb0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bb4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003bb8:	2c01      	cmp	r4, #1
 8003bba:	f04f 0402 	mov.w	r4, #2
 8003bbe:	d128      	bne.n	8003c12 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bc0:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bc4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc6:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003bce:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003bd0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd2:	6883      	ldr	r3, [r0, #8]
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d119      	bne.n	8003c0c <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8003bd8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003bda:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bdc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003bde:	233f      	movs	r3, #63	; 0x3f
 8003be0:	4093      	lsls	r3, r2
 8003be2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f043 0316 	orr.w	r3, r3, #22
 8003bea:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003bec:	6963      	ldr	r3, [r4, #20]
 8003bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003bf6:	b11b      	cbz	r3, 8003c00 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	f043 0308 	orr.w	r3, r3, #8
 8003bfe:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003c00:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c02:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6023      	str	r3, [r4, #0]
}
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8003c0c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c0e:	60e2      	str	r2, [r4, #12]
 8003c10:	e7e4      	b.n	8003bdc <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8003c12:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8003c16:	2002      	movs	r0, #2
 8003c18:	e7f7      	b.n	8003c0a <HAL_DMA_Start_IT+0x6a>

08003c1a <HAL_DMA_Abort>:
{
 8003c1a:	b570      	push	{r4, r5, r6, lr}
 8003c1c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7ff fe6a 	bl	80038f8 <HAL_GetTick>
 8003c24:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c26:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d006      	beq.n	8003c3c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2e:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8003c30:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c32:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003c34:	2300      	movs	r3, #0
 8003c36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	f022 0216 	bic.w	r2, r2, #22
 8003c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c4c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c50:	b90a      	cbnz	r2, 8003c56 <HAL_DMA_Abort+0x3c>
 8003c52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003c54:	b11a      	cbz	r2, 8003c5e <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f022 0208 	bic.w	r2, r2, #8
 8003c5c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f013 0301 	ands.w	r3, r3, #1
 8003c6e:	d10a      	bne.n	8003c86 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003c72:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8003c74:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c76:	408a      	lsls	r2, r1
 8003c78:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8003c7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003c80:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8003c84:	e7d9      	b.n	8003c3a <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c86:	f7ff fe37 	bl	80038f8 <HAL_GetTick>
 8003c8a:	1b40      	subs	r0, r0, r5
 8003c8c:	2805      	cmp	r0, #5
 8003c8e:	d9ea      	bls.n	8003c66 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c90:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c92:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c94:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003c96:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c98:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003c9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003ca0:	e7cb      	b.n	8003c3a <HAL_DMA_Abort+0x20>
	...

08003ca4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8003ca4:	2300      	movs	r3, #0
{
 8003ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003ca8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003caa:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8003cac:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <HAL_DMA_IRQHandler+0x178>)
{
 8003cae:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8003cb2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8003cb6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	4232      	tst	r2, r6
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cbe:	6801      	ldr	r1, [r0, #0]
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	0740      	lsls	r0, r0, #29
 8003cc4:	d508      	bpl.n	8003cd8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cc6:	6808      	ldr	r0, [r1, #0]
 8003cc8:	f020 0004 	bic.w	r0, r0, #4
 8003ccc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cce:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	4232      	tst	r2, r6
 8003cde:	d008      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ce0:	6821      	ldr	r1, [r4, #0]
 8003ce2:	6949      	ldr	r1, [r1, #20]
 8003ce4:	0609      	lsls	r1, r1, #24
 8003ce6:	d504      	bpl.n	8003cf2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ce8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003cec:	f042 0202 	orr.w	r2, r2, #2
 8003cf0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	4232      	tst	r2, r6
 8003cf8:	d008      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cfa:	6821      	ldr	r1, [r4, #0]
 8003cfc:	6809      	ldr	r1, [r1, #0]
 8003cfe:	0788      	lsls	r0, r1, #30
 8003d00:	d504      	bpl.n	8003d0c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d02:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d06:	f042 0204 	orr.w	r2, r2, #4
 8003d0a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	4232      	tst	r2, r6
 8003d12:	d010      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	0709      	lsls	r1, r1, #28
 8003d1a:	d50c      	bpl.n	8003d36 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d1c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	0350      	lsls	r0, r2, #13
 8003d22:	d537      	bpl.n	8003d94 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0319      	lsls	r1, r3, #12
 8003d28:	d401      	bmi.n	8003d2e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8003d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d2c:	e000      	b.n	8003d30 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8003d30:	b10b      	cbz	r3, 8003d36 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8003d32:	4620      	mov	r0, r4
 8003d34:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d36:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003d38:	2220      	movs	r2, #32
 8003d3a:	408a      	lsls	r2, r1
 8003d3c:	4232      	tst	r2, r6
 8003d3e:	d03a      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	06c6      	lsls	r6, r0, #27
 8003d46:	d536      	bpl.n	8003db6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d48:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d4a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003d4e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d50:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d52:	d127      	bne.n	8003da4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d54:	f022 0216 	bic.w	r2, r2, #22
 8003d58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d60:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d64:	b90a      	cbnz	r2, 8003d6a <HAL_DMA_IRQHandler+0xc6>
 8003d66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003d68:	b11a      	cbz	r2, 8003d72 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	f022 0208 	bic.w	r2, r2, #8
 8003d70:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d72:	233f      	movs	r3, #63	; 0x3f
 8003d74:	408b      	lsls	r3, r1
 8003d76:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003d84:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d045      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003d8a:	4620      	mov	r0, r4
}
 8003d8c:	b003      	add	sp, #12
 8003d8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003d92:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	05d2      	lsls	r2, r2, #23
 8003d98:	d4c7      	bmi.n	8003d2a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f022 0208 	bic.w	r2, r2, #8
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e7c2      	b.n	8003d2a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003da4:	0350      	lsls	r0, r2, #13
 8003da6:	d527      	bpl.n	8003df8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0319      	lsls	r1, r3, #12
 8003dac:	d431      	bmi.n	8003e12 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8003dae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8003db0:	b10b      	cbz	r3, 8003db6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8003db2:	4620      	mov	r0, r4
 8003db4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003db6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003db8:	b36b      	cbz	r3, 8003e16 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dbc:	07da      	lsls	r2, r3, #31
 8003dbe:	d519      	bpl.n	8003df4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8003dc0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8003dc4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8003dc6:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dca:	2305      	movs	r3, #5
 8003dcc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003dd0:	6813      	ldr	r3, [r2, #0]
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003dd8:	9b01      	ldr	r3, [sp, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	42bb      	cmp	r3, r7
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	d802      	bhi.n	8003de8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	07db      	lsls	r3, r3, #31
 8003de6:	d4f7      	bmi.n	8003dd8 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8003de8:	2300      	movs	r3, #0
 8003dea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003df4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003df6:	e7c6      	b.n	8003d86 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003dfe:	d108      	bne.n	8003e12 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	f021 0110 	bic.w	r1, r1, #16
 8003e06:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003e08:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8003e0a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003e12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e14:	e7cc      	b.n	8003db0 <HAL_DMA_IRQHandler+0x10c>
}
 8003e16:	b003      	add	sp, #12
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200000a0 	.word	0x200000a0

08003e20 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003e20:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003e22:	6804      	ldr	r4, [r0, #0]
 8003e24:	9d04      	ldr	r5, [sp, #16]
 8003e26:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003e28:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003e2c:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8003e30:	4333      	orrs	r3, r6
 8003e32:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003e34:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003e36:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e3c:	d130      	bne.n	8003ea0 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e3e:	6886      	ldr	r6, [r0, #8]
 8003e40:	b11e      	cbz	r6, 8003e4a <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e42:	2e01      	cmp	r6, #1
 8003e44:	d103      	bne.n	8003e4e <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e4a:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e4c:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e4e:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e50:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e54:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e58:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e5a:	d107      	bne.n	8003e6c <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8003e5c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8003e5e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e60:	02db      	lsls	r3, r3, #11
 8003e62:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003e66:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8003e6a:	e7ee      	b.n	8003e4a <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e6c:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003e6e:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e72:	d10a      	bne.n	8003e8a <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8003e74:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003e76:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e78:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8003e7a:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e7c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003e80:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8003e84:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8003e88:	e7df      	b.n	8003e4a <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8003e8a:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8003e8c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e8e:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8003e90:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e92:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8003e96:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8003e9a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8003e9e:	e7d4      	b.n	8003e4a <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ea0:	60e1      	str	r1, [r4, #12]
}
 8003ea2:	e7d3      	b.n	8003e4c <DMA2D_SetConfig+0x2c>

08003ea4 <HAL_DMA2D_Init>:
{
 8003ea4:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	b330      	cbz	r0, 8003ef8 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003eaa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eb2:	b91b      	cbnz	r3, 8003ebc <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8003eb4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003eb8:	f004 fb46 	bl	8008548 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ebc:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ebe:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ec0:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ec2:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ec4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ec8:	6813      	ldr	r3, [r2, #0]
 8003eca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ece:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ed0:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ed2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ed4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003edc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ede:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ee0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ee2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ee6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003eea:	430b      	orrs	r3, r1
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003eee:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ef0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ef2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003ef6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
 8003efa:	e7fc      	b.n	8003ef6 <HAL_DMA2D_Init+0x52>

08003efc <HAL_DMA2D_Start>:
{
 8003efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8003efe:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8003f02:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8003f04:	2d01      	cmp	r5, #1
 8003f06:	f04f 0502 	mov.w	r5, #2
 8003f0a:	d00f      	beq.n	8003f2c <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f0c:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003f10:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f12:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8003f14:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f18:	9500      	str	r5, [sp, #0]
 8003f1a:	f7ff ff81 	bl	8003e20 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f1e:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8003f20:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	4333      	orrs	r3, r6
 8003f26:	6013      	str	r3, [r2, #0]
}
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e7fb      	b.n	8003f28 <HAL_DMA2D_Start+0x2c>

08003f30 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8003f30:	2300      	movs	r3, #0
{
 8003f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8003f34:	9301      	str	r3, [sp, #4]
{
 8003f36:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f38:	6803      	ldr	r3, [r0, #0]
{
 8003f3a:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	07db      	lsls	r3, r3, #31
 8003f40:	d417      	bmi.n	8003f72 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f48:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8003f4a:	069e      	lsls	r6, r3, #26
 8003f4c:	d506      	bpl.n	8003f5c <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8003f4e:	f7ff fcd3 	bl	80038f8 <HAL_GetTick>
 8003f52:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	06d2      	lsls	r2, r2, #27
 8003f5a:	d543      	bpl.n	8003fe4 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8003f60:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003f62:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f64:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8003f66:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003f72:	f7ff fcc1 	bl	80038f8 <HAL_GetTick>
 8003f76:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	0792      	lsls	r2, r2, #30
 8003f7e:	d4e0      	bmi.n	8003f42 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f84:	9a01      	ldr	r2, [sp, #4]
 8003f86:	f012 0f21 	tst.w	r2, #33	; 0x21
 8003f8a:	d017      	beq.n	8003fbc <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f8c:	9a01      	ldr	r2, [sp, #4]
 8003f8e:	0695      	lsls	r5, r2, #26
 8003f90:	d503      	bpl.n	8003f9a <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f94:	f042 0202 	orr.w	r2, r2, #2
 8003f98:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f9a:	9a01      	ldr	r2, [sp, #4]
 8003f9c:	07d0      	lsls	r0, r2, #31
 8003f9e:	d503      	bpl.n	8003fa8 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fa0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003fa8:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003faa:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fac:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003fae:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8003fba:	e7d8      	b.n	8003f6e <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8003fbc:	1c69      	adds	r1, r5, #1
 8003fbe:	d0dc      	beq.n	8003f7a <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7ff fc9a 	bl	80038f8 <HAL_GetTick>
 8003fc4:	1b80      	subs	r0, r0, r6
 8003fc6:	42a8      	cmp	r0, r5
 8003fc8:	d801      	bhi.n	8003fce <HAL_DMA2D_PollForTransfer+0x9e>
 8003fca:	2d00      	cmp	r5, #0
 8003fcc:	d1d4      	bne.n	8003f78 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fd0:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8003fd8:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fda:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8003fde:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003fe2:	e7c4      	b.n	8003f6e <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003fe8:	9a01      	ldr	r2, [sp, #4]
 8003fea:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003fee:	d016      	beq.n	800401e <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ff0:	9a01      	ldr	r2, [sp, #4]
 8003ff2:	0716      	lsls	r6, r2, #28
 8003ff4:	d503      	bpl.n	8003ffe <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ff6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003ff8:	f042 0204 	orr.w	r2, r2, #4
 8003ffc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ffe:	9a01      	ldr	r2, [sp, #4]
 8004000:	0695      	lsls	r5, r2, #26
 8004002:	d503      	bpl.n	800400c <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004004:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004006:	f042 0202 	orr.w	r2, r2, #2
 800400a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800400c:	9a01      	ldr	r2, [sp, #4]
 800400e:	07d0      	lsls	r0, r2, #31
 8004010:	d503      	bpl.n	800401a <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004012:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800401a:	2229      	movs	r2, #41	; 0x29
 800401c:	e7c5      	b.n	8003faa <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 800401e:	1c69      	adds	r1, r5, #1
 8004020:	d099      	beq.n	8003f56 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7ff fc69 	bl	80038f8 <HAL_GetTick>
 8004026:	1b80      	subs	r0, r0, r6
 8004028:	42a8      	cmp	r0, r5
 800402a:	d8d0      	bhi.n	8003fce <HAL_DMA2D_PollForTransfer+0x9e>
 800402c:	2d00      	cmp	r5, #0
 800402e:	d191      	bne.n	8003f54 <HAL_DMA2D_PollForTransfer+0x24>
 8004030:	e7cd      	b.n	8003fce <HAL_DMA2D_PollForTransfer+0x9e>

08004032 <HAL_DMA2D_LineEventCallback>:
 8004032:	4770      	bx	lr

08004034 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004034:	4770      	bx	lr

08004036 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004036:	6803      	ldr	r3, [r0, #0]
{
 8004038:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800403a:	685e      	ldr	r6, [r3, #4]
{
 800403c:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800403e:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004040:	07f2      	lsls	r2, r6, #31
 8004042:	d514      	bpl.n	800406e <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004044:	05e9      	lsls	r1, r5, #23
 8004046:	d512      	bpl.n	800406e <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404e:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004050:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004058:	2201      	movs	r2, #1
 800405a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800405c:	2304      	movs	r3, #4
 800405e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004062:	2300      	movs	r3, #0
 8004064:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004068:	6943      	ldr	r3, [r0, #20]
 800406a:	b103      	cbz	r3, 800406e <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800406c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800406e:	06b2      	lsls	r2, r6, #26
 8004070:	d516      	bpl.n	80040a0 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004072:	04ab      	lsls	r3, r5, #18
 8004074:	d514      	bpl.n	80040a0 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004080:	2220      	movs	r2, #32
 8004082:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004084:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800408c:	2304      	movs	r3, #4
 800408e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004092:	2300      	movs	r3, #0
 8004094:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004098:	6963      	ldr	r3, [r4, #20]
 800409a:	b10b      	cbz	r3, 80040a0 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800409c:	4620      	mov	r0, r4
 800409e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040a0:	0730      	lsls	r0, r6, #28
 80040a2:	d516      	bpl.n	80040d2 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040a4:	0529      	lsls	r1, r5, #20
 80040a6:	d514      	bpl.n	80040d2 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040b2:	2208      	movs	r2, #8
 80040b4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040be:	2304      	movs	r3, #4
 80040c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80040c4:	2300      	movs	r3, #0
 80040c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80040ca:	6963      	ldr	r3, [r4, #20]
 80040cc:	b10b      	cbz	r3, 80040d2 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80040ce:	4620      	mov	r0, r4
 80040d0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040d2:	0772      	lsls	r2, r6, #29
 80040d4:	d50b      	bpl.n	80040ee <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80040d6:	056b      	lsls	r3, r5, #21
 80040d8:	d509      	bpl.n	80040ee <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040da:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040dc:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80040e6:	2204      	movs	r2, #4
 80040e8:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040ea:	f7ff ffa2 	bl	8004032 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80040ee:	07b0      	lsls	r0, r6, #30
 80040f0:	d514      	bpl.n	800411c <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80040f2:	05a9      	lsls	r1, r5, #22
 80040f4:	d512      	bpl.n	800411c <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004100:	2202      	movs	r2, #2
 8004102:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004106:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004108:	2301      	movs	r3, #1
 800410a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800410e:	2300      	movs	r3, #0
 8004110:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	b10b      	cbz	r3, 800411c <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004118:	4620      	mov	r0, r4
 800411a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800411c:	06f2      	lsls	r2, r6, #27
 800411e:	d513      	bpl.n	8004148 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004120:	04eb      	lsls	r3, r5, #19
 8004122:	d511      	bpl.n	8004148 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004124:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004126:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800412e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004130:	2210      	movs	r2, #16
 8004132:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004136:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004138:	2301      	movs	r3, #1
 800413a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800413e:	2300      	movs	r3, #0
 8004140:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004144:	f7ff ff76 	bl	8004034 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004148:	bd70      	pop	{r4, r5, r6, pc}
	...

0800414c <HAL_DMA2D_ConfigLayer>:
{
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800414e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004152:	2b01      	cmp	r3, #1
 8004154:	f04f 0302 	mov.w	r3, #2
 8004158:	d02b      	beq.n	80041b2 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800415a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800415e:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004160:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004164:	4f1c      	ldr	r7, [pc, #112]	; (80041d8 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004166:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800416a:	010e      	lsls	r6, r1, #4
 800416c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800416e:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004172:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004176:	3c09      	subs	r4, #9
 8004178:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800417a:	bf96      	itet	ls
 800417c:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004180:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004184:	431a      	orrls	r2, r3
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004186:	6803      	ldr	r3, [r0, #0]
 8004188:	b9a9      	cbnz	r1, 80041b6 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800418a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800418c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800418e:	ea01 0107 	and.w	r1, r1, r7
 8004192:	ea42 0201 	orr.w	r2, r2, r1
 8004196:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004198:	6982      	ldr	r2, [r0, #24]
 800419a:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800419c:	d803      	bhi.n	80041a6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800419e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80041a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80041ac:	2300      	movs	r3, #0
 80041ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80041b2:	4618      	mov	r0, r3
}
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041b6:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041b8:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041ba:	ea01 0107 	and.w	r1, r1, r7
 80041be:	ea42 0201 	orr.w	r2, r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041c4:	eb00 0206 	add.w	r2, r0, r6
 80041c8:	6992      	ldr	r2, [r2, #24]
 80041ca:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041cc:	d8eb      	bhi.n	80041a6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041ce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80041d2:	621d      	str	r5, [r3, #32]
 80041d4:	e7e7      	b.n	80041a6 <HAL_DMA2D_ConfigLayer+0x5a>
 80041d6:	bf00      	nop
 80041d8:	00fcfff0 	.word	0x00fcfff0

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041e0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80043a0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041e6:	4a6c      	ldr	r2, [pc, #432]	; (8004398 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041e8:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80043a4 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80041ec:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ee:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80041f0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80041f6:	43ac      	bics	r4, r5
 80041f8:	f040 80b4 	bne.w	8004364 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041fc:	684c      	ldr	r4, [r1, #4]
 80041fe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004202:	2503      	movs	r5, #3
 8004204:	f024 0c10 	bic.w	ip, r4, #16
 8004208:	fa05 f50e 	lsl.w	r5, r5, lr
 800420c:	f10c 37ff 	add.w	r7, ip, #4294967295
 8004210:	43ed      	mvns	r5, r5
 8004212:	2f01      	cmp	r7, #1
 8004214:	d811      	bhi.n	800423a <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 8004216:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004218:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800421c:	68cf      	ldr	r7, [r1, #12]
 800421e:	fa07 f70e 	lsl.w	r7, r7, lr
 8004222:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004226:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004228:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422a:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800422e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004232:	409f      	lsls	r7, r3
 8004234:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8004238:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800423a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800423c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004240:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004244:	688f      	ldr	r7, [r1, #8]
 8004246:	fa07 f70e 	lsl.w	r7, r7, lr
 800424a:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800424e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004250:	d116      	bne.n	8004280 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8004252:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004256:	f003 0b07 	and.w	fp, r3, #7
 800425a:	f04f 0c0f 	mov.w	ip, #15
 800425e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004262:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004266:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800426a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800426e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004272:	690f      	ldr	r7, [r1, #16]
 8004274:	fa07 f70b 	lsl.w	r7, r7, fp
 8004278:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 800427c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8004280:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004282:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004284:	f004 0703 	and.w	r7, r4, #3
 8004288:	fa07 fe0e 	lsl.w	lr, r7, lr
 800428c:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8004290:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004292:	00e5      	lsls	r5, r4, #3
 8004294:	d566      	bpl.n	8004364 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800429a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800429e:	f003 0c03 	and.w	ip, r3, #3
 80042a2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80042aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b2:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80042b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80042ba:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80042be:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80042c2:	9501      	str	r5, [sp, #4]
 80042c4:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042c6:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80042ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042ce:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042d2:	4d32      	ldr	r5, [pc, #200]	; (800439c <HAL_GPIO_Init+0x1c0>)
 80042d4:	42a8      	cmp	r0, r5
 80042d6:	d04c      	beq.n	8004372 <HAL_GPIO_Init+0x196>
 80042d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042dc:	42a8      	cmp	r0, r5
 80042de:	d04a      	beq.n	8004376 <HAL_GPIO_Init+0x19a>
 80042e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042e4:	42a8      	cmp	r0, r5
 80042e6:	d048      	beq.n	800437a <HAL_GPIO_Init+0x19e>
 80042e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042ec:	42a8      	cmp	r0, r5
 80042ee:	d046      	beq.n	800437e <HAL_GPIO_Init+0x1a2>
 80042f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042f4:	42a8      	cmp	r0, r5
 80042f6:	d044      	beq.n	8004382 <HAL_GPIO_Init+0x1a6>
 80042f8:	4548      	cmp	r0, r9
 80042fa:	d044      	beq.n	8004386 <HAL_GPIO_Init+0x1aa>
 80042fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004300:	42a8      	cmp	r0, r5
 8004302:	d042      	beq.n	800438a <HAL_GPIO_Init+0x1ae>
 8004304:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004308:	42a8      	cmp	r0, r5
 800430a:	d040      	beq.n	800438e <HAL_GPIO_Init+0x1b2>
 800430c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004310:	42a8      	cmp	r0, r5
 8004312:	d03e      	beq.n	8004392 <HAL_GPIO_Init+0x1b6>
 8004314:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004318:	42a8      	cmp	r0, r5
 800431a:	bf0c      	ite	eq
 800431c:	2509      	moveq	r5, #9
 800431e:	250a      	movne	r5, #10
 8004320:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004324:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004328:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800432c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800432e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8004332:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004334:	bf0c      	ite	eq
 8004336:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004338:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800433a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800433e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004340:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004342:	bf0c      	ite	eq
 8004344:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004346:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004348:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800434c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800434e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004350:	bf0c      	ite	eq
 8004352:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004354:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004356:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8004358:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800435a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800435c:	bf54      	ite	pl
 800435e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8004360:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8004362:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004364:	3301      	adds	r3, #1
 8004366:	2b10      	cmp	r3, #16
 8004368:	f47f af40 	bne.w	80041ec <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 800436c:	b003      	add	sp, #12
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004372:	2500      	movs	r5, #0
 8004374:	e7d4      	b.n	8004320 <HAL_GPIO_Init+0x144>
 8004376:	2501      	movs	r5, #1
 8004378:	e7d2      	b.n	8004320 <HAL_GPIO_Init+0x144>
 800437a:	2502      	movs	r5, #2
 800437c:	e7d0      	b.n	8004320 <HAL_GPIO_Init+0x144>
 800437e:	2503      	movs	r5, #3
 8004380:	e7ce      	b.n	8004320 <HAL_GPIO_Init+0x144>
 8004382:	2504      	movs	r5, #4
 8004384:	e7cc      	b.n	8004320 <HAL_GPIO_Init+0x144>
 8004386:	2505      	movs	r5, #5
 8004388:	e7ca      	b.n	8004320 <HAL_GPIO_Init+0x144>
 800438a:	2506      	movs	r5, #6
 800438c:	e7c8      	b.n	8004320 <HAL_GPIO_Init+0x144>
 800438e:	2507      	movs	r5, #7
 8004390:	e7c6      	b.n	8004320 <HAL_GPIO_Init+0x144>
 8004392:	2508      	movs	r5, #8
 8004394:	e7c4      	b.n	8004320 <HAL_GPIO_Init+0x144>
 8004396:	bf00      	nop
 8004398:	40013c00 	.word	0x40013c00
 800439c:	40020000 	.word	0x40020000
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40021400 	.word	0x40021400

080043a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80043ac:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043ae:	4c4a      	ldr	r4, [pc, #296]	; (80044d8 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043b0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80044e0 <HAL_GPIO_DeInit+0x138>
 80043b4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80044e4 <HAL_GPIO_DeInit+0x13c>
 80043b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80044e8 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80043bc:	2301      	movs	r3, #1
 80043be:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80043c2:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80043c6:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80043ca:	d16e      	bne.n	80044aa <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 80043cc:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043d0:	f002 0c03 	and.w	ip, r2, #3
 80043d4:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_GPIO_DeInit+0x134>)
 80043d8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043e0:	4298      	cmp	r0, r3
 80043e2:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043e6:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 80043ea:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043ee:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80043f2:	d05f      	beq.n	80044b4 <HAL_GPIO_DeInit+0x10c>
 80043f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f8:	4298      	cmp	r0, r3
 80043fa:	d05d      	beq.n	80044b8 <HAL_GPIO_DeInit+0x110>
 80043fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004400:	4298      	cmp	r0, r3
 8004402:	d05b      	beq.n	80044bc <HAL_GPIO_DeInit+0x114>
 8004404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004408:	4298      	cmp	r0, r3
 800440a:	d059      	beq.n	80044c0 <HAL_GPIO_DeInit+0x118>
 800440c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004410:	4298      	cmp	r0, r3
 8004412:	d057      	beq.n	80044c4 <HAL_GPIO_DeInit+0x11c>
 8004414:	4548      	cmp	r0, r9
 8004416:	d057      	beq.n	80044c8 <HAL_GPIO_DeInit+0x120>
 8004418:	4550      	cmp	r0, sl
 800441a:	d057      	beq.n	80044cc <HAL_GPIO_DeInit+0x124>
 800441c:	4558      	cmp	r0, fp
 800441e:	d057      	beq.n	80044d0 <HAL_GPIO_DeInit+0x128>
 8004420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004424:	4298      	cmp	r0, r3
 8004426:	d055      	beq.n	80044d4 <HAL_GPIO_DeInit+0x12c>
 8004428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442c:	4298      	cmp	r0, r3
 800442e:	bf0c      	ite	eq
 8004430:	2309      	moveq	r3, #9
 8004432:	230a      	movne	r3, #10
 8004434:	fa03 f30c 	lsl.w	r3, r3, ip
 8004438:	4543      	cmp	r3, r8
 800443a:	d113      	bne.n	8004464 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	ea23 0307 	bic.w	r3, r3, r7
 8004442:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	ea23 0307 	bic.w	r3, r3, r7
 800444a:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	ea23 0307 	bic.w	r3, r3, r7
 8004452:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004454:	68e3      	ldr	r3, [r4, #12]
 8004456:	ea23 0707 	bic.w	r7, r3, r7
 800445a:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800445c:	68ab      	ldr	r3, [r5, #8]
 800445e:	ea23 0606 	bic.w	r6, r3, r6
 8004462:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004464:	2603      	movs	r6, #3
 8004466:	0053      	lsls	r3, r2, #1
 8004468:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800446a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800446e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004472:	270f      	movs	r7, #15
 8004474:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004478:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800447c:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004480:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004482:	fa22 f506 	lsr.w	r5, r2, r6
 8004486:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800448a:	6a2e      	ldr	r6, [r5, #32]
 800448c:	ea26 0707 	bic.w	r7, r6, r7
 8004490:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004492:	68c5      	ldr	r5, [r0, #12]
 8004494:	ea25 0503 	bic.w	r5, r5, r3
 8004498:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800449a:	6845      	ldr	r5, [r0, #4]
 800449c:	ea25 050e 	bic.w	r5, r5, lr
 80044a0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044a2:	6885      	ldr	r5, [r0, #8]
 80044a4:	ea25 0303 	bic.w	r3, r5, r3
 80044a8:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044aa:	3201      	adds	r2, #1
 80044ac:	2a10      	cmp	r2, #16
 80044ae:	d185      	bne.n	80043bc <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80044b4:	2300      	movs	r3, #0
 80044b6:	e7bd      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e7bb      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e7b9      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044c0:	2303      	movs	r3, #3
 80044c2:	e7b7      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044c4:	2304      	movs	r3, #4
 80044c6:	e7b5      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044c8:	2305      	movs	r3, #5
 80044ca:	e7b3      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044cc:	2306      	movs	r3, #6
 80044ce:	e7b1      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044d0:	2307      	movs	r3, #7
 80044d2:	e7af      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044d4:	2308      	movs	r3, #8
 80044d6:	e7ad      	b.n	8004434 <HAL_GPIO_DeInit+0x8c>
 80044d8:	40013c00 	.word	0x40013c00
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40021400 	.word	0x40021400
 80044e4:	40021800 	.word	0x40021800
 80044e8:	40021c00 	.word	0x40021c00

080044ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044ec:	6903      	ldr	r3, [r0, #16]
 80044ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80044f0:	bf14      	ite	ne
 80044f2:	2001      	movne	r0, #1
 80044f4:	2000      	moveq	r0, #0
 80044f6:	4770      	bx	lr

080044f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f8:	b10a      	cbz	r2, 80044fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044fa:	6181      	str	r1, [r0, #24]
  }
}
 80044fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044fe:	0409      	lsls	r1, r1, #16
 8004500:	e7fb      	b.n	80044fa <HAL_GPIO_WritePin+0x2>
	...

08004504 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004506:	6951      	ldr	r1, [r2, #20]
 8004508:	4201      	tst	r1, r0
{
 800450a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800450c:	d002      	beq.n	8004514 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004510:	f004 fe94 	bl	800923c <HAL_GPIO_EXTI_Callback>
  }
}
 8004514:	bd08      	pop	{r3, pc}
 8004516:	bf00      	nop
 8004518:	40013c00 	.word	0x40013c00

0800451c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800451c:	6803      	ldr	r3, [r0, #0]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	0791      	lsls	r1, r2, #30
 8004522:	d501      	bpl.n	8004528 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004524:	2200      	movs	r2, #0
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	07d2      	lsls	r2, r2, #31
 800452c:	d403      	bmi.n	8004536 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	619a      	str	r2, [r3, #24]
  }
}
 8004536:	4770      	bx	lr

08004538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004538:	b530      	push	{r4, r5, lr}
 800453a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800453c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004540:	6804      	ldr	r4, [r0, #0]
 8004542:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8004546:	6860      	ldr	r0, [r4, #4]
 8004548:	431a      	orrs	r2, r3
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <I2C_TransferConfig+0x24>)
 800454c:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8004550:	430a      	orrs	r2, r1
 8004552:	ea20 0003 	bic.w	r0, r0, r3
 8004556:	4302      	orrs	r2, r0
 8004558:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800455a:	bd30      	pop	{r4, r5, pc}
 800455c:	03ff63ff 	.word	0x03ff63ff

08004560 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004560:	6803      	ldr	r3, [r0, #0]
{
 8004562:	b570      	push	{r4, r5, r6, lr}
 8004564:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004566:	6998      	ldr	r0, [r3, #24]
{
 8004568:	460d      	mov	r5, r1
 800456a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800456c:	f010 0010 	ands.w	r0, r0, #16
 8004570:	d116      	bne.n	80045a0 <I2C_IsAcknowledgeFailed+0x40>
}
 8004572:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8004574:	1c69      	adds	r1, r5, #1
 8004576:	d014      	beq.n	80045a2 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7ff f9be 	bl	80038f8 <HAL_GetTick>
 800457c:	1b80      	subs	r0, r0, r6
 800457e:	42a8      	cmp	r0, r5
 8004580:	d800      	bhi.n	8004584 <I2C_IsAcknowledgeFailed+0x24>
 8004582:	b96d      	cbnz	r5, 80045a0 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004586:	f043 0320 	orr.w	r3, r3, #32
 800458a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800458c:	2320      	movs	r3, #32
 800458e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004594:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800459a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800459e:	e7e8      	b.n	8004572 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d5e5      	bpl.n	8004574 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045aa:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80045ac:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80045b2:	f7ff ffb3 	bl	800451c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	6853      	ldr	r3, [r2, #4]
 80045ba:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80045be:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80045c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80045d8:	e7db      	b.n	8004592 <I2C_IsAcknowledgeFailed+0x32>

080045da <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80045da:	b570      	push	{r4, r5, r6, lr}
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	069b      	lsls	r3, r3, #26
 80045e8:	d501      	bpl.n	80045ee <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80045ea:	2000      	movs	r0, #0
}
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	4632      	mov	r2, r6
 80045f0:	4629      	mov	r1, r5
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff ffb4 	bl	8004560 <I2C_IsAcknowledgeFailed>
 80045f8:	b990      	cbnz	r0, 8004620 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7ff f97d 	bl	80038f8 <HAL_GetTick>
 80045fe:	1b80      	subs	r0, r0, r6
 8004600:	42a8      	cmp	r0, r5
 8004602:	d801      	bhi.n	8004608 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004604:	2d00      	cmp	r5, #0
 8004606:	d1ec      	bne.n	80045e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004610:	2320      	movs	r3, #32
 8004612:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004616:	2300      	movs	r3, #0
 8004618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800461c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004620:	2001      	movs	r0, #1
 8004622:	e7e3      	b.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004624 <I2C_WaitOnFlagUntilTimeout>:
{
 8004624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004628:	9f06      	ldr	r7, [sp, #24]
 800462a:	4604      	mov	r4, r0
 800462c:	4688      	mov	r8, r1
 800462e:	4616      	mov	r6, r2
 8004630:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	6993      	ldr	r3, [r2, #24]
 8004636:	ea38 0303 	bics.w	r3, r8, r3
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	42b3      	cmp	r3, r6
 8004642:	d001      	beq.n	8004648 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004644:	2000      	movs	r0, #0
 8004646:	e015      	b.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004648:	1c6b      	adds	r3, r5, #1
 800464a:	d0f3      	beq.n	8004634 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464c:	f7ff f954 	bl	80038f8 <HAL_GetTick>
 8004650:	1bc0      	subs	r0, r0, r7
 8004652:	42a8      	cmp	r0, r5
 8004654:	d801      	bhi.n	800465a <I2C_WaitOnFlagUntilTimeout+0x36>
 8004656:	2d00      	cmp	r5, #0
 8004658:	d1eb      	bne.n	8004632 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800465a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800465c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800465e:	f043 0320 	orr.w	r3, r3, #32
 8004662:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004664:	2320      	movs	r3, #32
 8004666:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800466a:	2300      	movs	r3, #0
 800466c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004670:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004678 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	460d      	mov	r5, r1
 800467e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d501      	bpl.n	800468c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004688:	2000      	movs	r0, #0
}
 800468a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800468c:	4632      	mov	r2, r6
 800468e:	4629      	mov	r1, r5
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff ff65 	bl	8004560 <I2C_IsAcknowledgeFailed>
 8004696:	b9a0      	cbnz	r0, 80046c2 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004698:	1c6a      	adds	r2, r5, #1
 800469a:	d0f1      	beq.n	8004680 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7ff f92c 	bl	80038f8 <HAL_GetTick>
 80046a0:	1b80      	subs	r0, r0, r6
 80046a2:	42a8      	cmp	r0, r5
 80046a4:	d801      	bhi.n	80046aa <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	d1ea      	bne.n	8004680 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046ac:	f043 0320 	orr.w	r3, r3, #32
 80046b0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	2320      	movs	r3, #32
 80046b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80046be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80046c2:	2001      	movs	r0, #1
 80046c4:	e7e1      	b.n	800468a <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

080046c8 <I2C_RequestMemoryWrite>:
{
 80046c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046cc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046ce:	4b18      	ldr	r3, [pc, #96]	; (8004730 <I2C_RequestMemoryWrite+0x68>)
{
 80046d0:	4605      	mov	r5, r0
 80046d2:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	b2f2      	uxtb	r2, r6
 80046d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80046dc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046e0:	f7ff ff2a 	bl	8004538 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e4:	4628      	mov	r0, r5
 80046e6:	4642      	mov	r2, r8
 80046e8:	4639      	mov	r1, r7
 80046ea:	f7ff ffc5 	bl	8004678 <I2C_WaitOnTXISFlagUntilTimeout>
 80046ee:	b118      	cbz	r0, 80046f8 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80046f0:	2001      	movs	r0, #1
}
 80046f2:	b002      	add	sp, #8
 80046f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046f8:	2e01      	cmp	r6, #1
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	d10d      	bne.n	800471a <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046fe:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004706:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	463b      	mov	r3, r7
 800470a:	f8cd 8000 	str.w	r8, [sp]
 800470e:	f7ff ff89 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004712:	3800      	subs	r0, #0
 8004714:	bf18      	it	ne
 8004716:	2001      	movne	r0, #1
 8004718:	e7eb      	b.n	80046f2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800471a:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471c:	4639      	mov	r1, r7
 800471e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	4642      	mov	r2, r8
 8004724:	f7ff ffa8 	bl	8004678 <I2C_WaitOnTXISFlagUntilTimeout>
 8004728:	2800      	cmp	r0, #0
 800472a:	d1e1      	bne.n	80046f0 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	e7e6      	b.n	80046fe <I2C_RequestMemoryWrite+0x36>
 8004730:	80002000 	.word	0x80002000

08004734 <I2C_RequestMemoryRead>:
{
 8004734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004738:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <I2C_RequestMemoryRead+0x68>)
{
 800473c:	4605      	mov	r5, r0
 800473e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	b2f2      	uxtb	r2, r6
 8004744:	2300      	movs	r3, #0
{
 8004746:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800474a:	f7ff fef5 	bl	8004538 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474e:	4628      	mov	r0, r5
 8004750:	4642      	mov	r2, r8
 8004752:	4639      	mov	r1, r7
 8004754:	f7ff ff90 	bl	8004678 <I2C_WaitOnTXISFlagUntilTimeout>
 8004758:	b118      	cbz	r0, 8004762 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800475a:	2001      	movs	r0, #1
}
 800475c:	b002      	add	sp, #8
 800475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004762:	2e01      	cmp	r6, #1
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	d10d      	bne.n	8004784 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004768:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	2200      	movs	r2, #0
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004770:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004772:	463b      	mov	r3, r7
 8004774:	f8cd 8000 	str.w	r8, [sp]
 8004778:	f7ff ff54 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800477c:	3800      	subs	r0, #0
 800477e:	bf18      	it	ne
 8004780:	2001      	movne	r0, #1
 8004782:	e7eb      	b.n	800475c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004784:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004786:	4639      	mov	r1, r7
 8004788:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800478a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478c:	4642      	mov	r2, r8
 800478e:	f7ff ff73 	bl	8004678 <I2C_WaitOnTXISFlagUntilTimeout>
 8004792:	2800      	cmp	r0, #0
 8004794:	d1e1      	bne.n	800475a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	e7e6      	b.n	8004768 <I2C_RequestMemoryRead+0x34>
 800479a:	bf00      	nop
 800479c:	80002000 	.word	0x80002000

080047a0 <HAL_I2C_MspInit>:
}
 80047a0:	4770      	bx	lr

080047a2 <HAL_I2C_Init>:
{
 80047a2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80047a4:	4604      	mov	r4, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d04a      	beq.n	8004840 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80047ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047b2:	b91b      	cbnz	r3, 80047bc <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80047b4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80047b8:	f7ff fff2 	bl	80047a0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80047bc:	2324      	movs	r3, #36	; 0x24
 80047be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047cc:	6862      	ldr	r2, [r4, #4]
 80047ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047d2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047da:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047dc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80047e0:	2901      	cmp	r1, #1
 80047e2:	d124      	bne.n	800482e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047e8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047ea:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ec:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80047f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047fe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004800:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004804:	430a      	orrs	r2, r1
 8004806:	69a1      	ldr	r1, [r4, #24]
 8004808:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800480c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800480e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800481e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004820:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004822:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800482c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800482e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004832:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004834:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004836:	d1d8      	bne.n	80047ea <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	e7d4      	b.n	80047ea <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e7f3      	b.n	800482c <HAL_I2C_Init+0x8a>

08004844 <HAL_I2C_MspDeInit>:
 8004844:	4770      	bx	lr

08004846 <HAL_I2C_DeInit>:
{
 8004846:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004848:	4604      	mov	r4, r0
 800484a:	b198      	cbz	r0, 8004874 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800484c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800484e:	2324      	movs	r3, #36	; 0x24
 8004850:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800485c:	f7ff fff2 	bl	8004844 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004860:	2000      	movs	r0, #0
 8004862:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004864:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004868:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004872:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004874:	2001      	movs	r0, #1
 8004876:	e7fc      	b.n	8004872 <HAL_I2C_DeInit+0x2c>

08004878 <HAL_I2C_Mem_Write>:
{
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	b085      	sub	sp, #20
 800487e:	469b      	mov	fp, r3
 8004880:	4604      	mov	r4, r0
 8004882:	460f      	mov	r7, r1
 8004884:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004888:	4692      	mov	sl, r2
 800488a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800488e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004890:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004894:	2b20      	cmp	r3, #32
 8004896:	f040 80a3 	bne.w	80049e0 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800489a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800489c:	b10b      	cbz	r3, 80048a2 <HAL_I2C_Mem_Write+0x2a>
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	b933      	cbnz	r3, 80048b0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80048a8:	2001      	movs	r0, #1
}
 80048aa:	b005      	add	sp, #20
 80048ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80048b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f000 8093 	beq.w	80049e0 <HAL_I2C_Mem_Write+0x168>
 80048ba:	2501      	movs	r5, #1
 80048bc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80048c0:	f7ff f81a 	bl	80038f8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048c4:	2319      	movs	r3, #25
 80048c6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80048c8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ca:	462a      	mov	r2, r5
 80048cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff fea7 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4680      	mov	r8, r0
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1e5      	bne.n	80048a8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048dc:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80048de:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048e0:	4652      	mov	r2, sl
 80048e2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048e8:	2340      	movs	r3, #64	; 0x40
 80048ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80048ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80048f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80048f6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80048fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048fe:	465b      	mov	r3, fp
 8004900:	f7ff fee2 	bl	80046c8 <I2C_RequestMemoryWrite>
 8004904:	b110      	cbz	r0, 800490c <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8004906:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800490a:	e7cd      	b.n	80048a8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800490c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	2bff      	cmp	r3, #255	; 0xff
 8004912:	d955      	bls.n	80049c0 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004914:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800491a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800491c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800491e:	4639      	mov	r1, r7
 8004920:	4620      	mov	r0, r4
 8004922:	f7ff fe09 	bl	8004538 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004926:	4632      	mov	r2, r6
 8004928:	4649      	mov	r1, r9
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fea4 	bl	8004678 <I2C_WaitOnTXISFlagUntilTimeout>
 8004930:	2800      	cmp	r0, #0
 8004932:	d1b9      	bne.n	80048a8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	f813 1b01 	ldrb.w	r1, [r3], #1
 800493c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800493e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004940:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004942:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004944:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004946:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004948:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800494a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800494c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800494e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004950:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004952:	b29b      	uxth	r3, r3
 8004954:	b1ab      	cbz	r3, 8004982 <HAL_I2C_Mem_Write+0x10a>
 8004956:	b9a2      	cbnz	r2, 8004982 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004958:	464b      	mov	r3, r9
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	4620      	mov	r0, r4
 800495e:	9600      	str	r6, [sp, #0]
 8004960:	f7ff fe60 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004964:	2800      	cmp	r0, #0
 8004966:	d19f      	bne.n	80048a8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2bff      	cmp	r3, #255	; 0xff
 800496e:	d92f      	bls.n	80049d0 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004970:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004972:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004976:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004978:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800497a:	4639      	mov	r1, r7
 800497c:	4620      	mov	r0, r4
 800497e:	f7ff fddb 	bl	8004538 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004982:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1cd      	bne.n	8004926 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800498a:	4632      	mov	r2, r6
 800498c:	4649      	mov	r1, r9
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff fe23 	bl	80045da <I2C_WaitOnSTOPFlagUntilTimeout>
 8004994:	2800      	cmp	r0, #0
 8004996:	d187      	bne.n	80048a8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	2120      	movs	r1, #32
 800499c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80049a4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80049a8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80049b6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ba:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80049be:	e774      	b.n	80048aa <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80049c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c6:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80049c8:	b292      	uxth	r2, r2
 80049ca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	e7a6      	b.n	800491e <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80049d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049d6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80049d8:	b292      	uxth	r2, r2
 80049da:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	e7cc      	b.n	800497a <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80049e0:	2002      	movs	r0, #2
 80049e2:	e762      	b.n	80048aa <HAL_I2C_Mem_Write+0x32>

080049e4 <HAL_I2C_Mem_Read>:
{
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	b085      	sub	sp, #20
 80049ea:	469b      	mov	fp, r3
 80049ec:	4604      	mov	r4, r0
 80049ee:	460f      	mov	r7, r1
 80049f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80049f4:	4692      	mov	sl, r2
 80049f6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80049fa:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	f040 80a7 	bne.w	8004b54 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8004a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a08:	b10b      	cbz	r3, 8004a0e <HAL_I2C_Mem_Read+0x2a>
 8004a0a:	9b03      	ldr	r3, [sp, #12]
 8004a0c:	b933      	cbnz	r3, 8004a1c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a12:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004a14:	2001      	movs	r0, #1
}
 8004a16:	b005      	add	sp, #20
 8004a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004a1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	f000 8097 	beq.w	8004b54 <HAL_I2C_Mem_Read+0x170>
 8004a26:	2501      	movs	r5, #1
 8004a28:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004a2c:	f7fe ff64 	bl	80038f8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a30:	2319      	movs	r3, #25
 8004a32:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004a34:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a36:	462a      	mov	r2, r5
 8004a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff fdf1 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4680      	mov	r8, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1e5      	bne.n	8004a14 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a48:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8004a4a:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4c:	4652      	mov	r2, sl
 8004a4e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a5e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004a60:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a62:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a64:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8004a68:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6a:	465b      	mov	r3, fp
 8004a6c:	f7ff fe62 	bl	8004734 <I2C_RequestMemoryRead>
 8004a70:	b110      	cbz	r0, 8004a78 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8004a72:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004a76:	e7cd      	b.n	8004a14 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_I2C_Mem_Read+0x174>)
 8004a80:	d958      	bls.n	8004b34 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a82:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a8a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a8c:	4639      	mov	r1, r7
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7ff fd52 	bl	8004538 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a94:	464b      	mov	r3, r9
 8004a96:	2200      	movs	r2, #0
 8004a98:	2104      	movs	r1, #4
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	9600      	str	r6, [sp, #0]
 8004a9e:	f7ff fdc1 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d1b6      	bne.n	8004a14 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004ab0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004ab2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004ab4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004ab6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004ab8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004aba:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004abc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004abe:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ac4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	b1ab      	cbz	r3, 8004af6 <HAL_I2C_Mem_Read+0x112>
 8004aca:	b9a2      	cbnz	r2, 8004af6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004acc:	464b      	mov	r3, r9
 8004ace:	2180      	movs	r1, #128	; 0x80
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	9600      	str	r6, [sp, #0]
 8004ad4:	f7ff fda6 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d19b      	bne.n	8004a14 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004adc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2bff      	cmp	r3, #255	; 0xff
 8004ae2:	d92f      	bls.n	8004b44 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ae4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aea:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004aee:	4639      	mov	r1, r7
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff fd21 	bl	8004538 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004af6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ca      	bne.n	8004a94 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afe:	4632      	mov	r2, r6
 8004b00:	4649      	mov	r1, r9
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff fd69 	bl	80045da <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d183      	bne.n	8004a14 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	2120      	movs	r1, #32
 8004b10:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004b18:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004b1c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004b2a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b2e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004b32:	e770      	b.n	8004a16 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8004b34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	e7a3      	b.n	8004a8c <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8004b44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004b4c:	b292      	uxth	r2, r2
 8004b4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	e7cc      	b.n	8004aee <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8004b54:	2002      	movs	r0, #2
 8004b56:	e75e      	b.n	8004a16 <HAL_I2C_Mem_Read+0x32>
 8004b58:	80002400 	.word	0x80002400

08004b5c <HAL_I2C_IsDeviceReady>:
{
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	461e      	mov	r6, r3
 8004b62:	b085      	sub	sp, #20
  __IO uint32_t I2C_Trials = 0UL;
 8004b64:	2300      	movs	r3, #0
{
 8004b66:	4604      	mov	r4, r0
 8004b68:	4691      	mov	r9, r2
  __IO uint32_t I2C_Trials = 0UL;
 8004b6a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	f040 808e 	bne.w	8004c92 <HAL_I2C_IsDeviceReady+0x136>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b76:	6803      	ldr	r3, [r0, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8004b7e:	f040 8088 	bne.w	8004c92 <HAL_I2C_IsDeviceReady+0x136>
    __HAL_LOCK(hi2c);
 8004b82:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004b86:	2a01      	cmp	r2, #1
 8004b88:	f000 8083 	beq.w	8004c92 <HAL_I2C_IsDeviceReady+0x136>
 8004b8c:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8004b90:	2201      	movs	r2, #1
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004b92:	f047 7a00 	orr.w	sl, r7, #33554432	; 0x2000000
    __HAL_LOCK(hi2c);
 8004b96:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9a:	2224      	movs	r2, #36	; 0x24
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004b9c:	f44a 5a00 	orr.w	sl, sl, #8192	; 0x2000
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba4:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004ba6:	68e3      	ldr	r3, [r4, #12]
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	bf0c      	ite	eq
 8004bae:	4653      	moveq	r3, sl
 8004bb0:	f447 5320 	orrne.w	r3, r7, #10240	; 0x2800
 8004bb4:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8004bb6:	f7fe fe9f 	bl	80038f8 <HAL_GetTick>
 8004bba:	4680      	mov	r8, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bc0:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc2:	f3c5 1540 	ubfx	r5, r5, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004bca:	431d      	orrs	r5, r3
 8004bcc:	d015      	beq.n	8004bfa <HAL_I2C_IsDeviceReady+0x9e>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd2:	4633      	mov	r3, r6
 8004bd4:	f8cd 8000 	str.w	r8, [sp]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004bd8:	f012 0210 	ands.w	r2, r2, #16
 8004bdc:	d126      	bne.n	8004c2c <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bde:	2120      	movs	r1, #32
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff fd1f 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004be6:	b9e8      	cbnz	r0, 8004c24 <HAL_I2C_IsDeviceReady+0xc8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be8:	2320      	movs	r3, #32
 8004bea:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8004bec:	4605      	mov	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bee:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8004bf4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        return HAL_OK;
 8004bf8:	e014      	b.n	8004c24 <HAL_I2C_IsDeviceReady+0xc8>
        if (Timeout != HAL_MAX_DELAY)
 8004bfa:	1c73      	adds	r3, r6, #1
 8004bfc:	d0de      	beq.n	8004bbc <HAL_I2C_IsDeviceReady+0x60>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fe fe7b 	bl	80038f8 <HAL_GetTick>
 8004c02:	eba0 0008 	sub.w	r0, r0, r8
 8004c06:	42b0      	cmp	r0, r6
 8004c08:	d801      	bhi.n	8004c0e <HAL_I2C_IsDeviceReady+0xb2>
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	d1d6      	bne.n	8004bbc <HAL_I2C_IsDeviceReady+0x60>
            hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	2320      	movs	r3, #32
            return HAL_ERROR;
 8004c10:	2501      	movs	r5, #1
            hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004c24:	4628      	mov	r0, r5
 8004c26:	b005      	add	sp, #20
 8004c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2120      	movs	r1, #32
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff fcf7 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d1f4      	bne.n	8004c24 <HAL_I2C_IsDeviceReady+0xc8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	f04f 0b20 	mov.w	fp, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c44:	f8c3 b01c 	str.w	fp, [r3, #28]
      if (I2C_Trials == Trials)
 8004c48:	9a03      	ldr	r2, [sp, #12]
 8004c4a:	454a      	cmp	r2, r9
 8004c4c:	d110      	bne.n	8004c70 <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c4e:	685a      	ldr	r2, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c50:	4659      	mov	r1, fp
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c56:	605a      	str	r2, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4633      	mov	r3, r6
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f8cd 8000 	str.w	r8, [sp]
 8004c62:	f7ff fcdf 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d1dc      	bne.n	8004c24 <HAL_I2C_IsDeviceReady+0xc8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	f8c3 b01c 	str.w	fp, [r3, #28]
      I2C_Trials++;
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	454b      	cmp	r3, r9
 8004c7a:	d394      	bcc.n	8004ba6 <HAL_I2C_IsDeviceReady+0x4a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c84:	f043 0320 	orr.w	r3, r3, #32
 8004c88:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8004c90:	e7c8      	b.n	8004c24 <HAL_I2C_IsDeviceReady+0xc8>
    return HAL_BUSY;
 8004c92:	2502      	movs	r5, #2
 8004c94:	e7c6      	b.n	8004c24 <HAL_I2C_IsDeviceReady+0xc8>

08004c96 <HAL_I2C_GetState>:
  return hi2c->State;
 8004c96:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004c9a:	4770      	bx	lr

08004c9c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c9c:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c9e:	f8d1 c000 	ldr.w	ip, [r1]
{
 8004ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ca6:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ca8:	6804      	ldr	r4, [r0, #0]
 8004caa:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cac:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cb0:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cb2:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004cb4:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004cb8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cbc:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cbe:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cc2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cc6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cc8:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cca:	68e0      	ldr	r0, [r4, #12]
 8004ccc:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004cd0:	4430      	add	r0, r6
 8004cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004cd6:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cd8:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004cda:	68e0      	ldr	r0, [r4, #12]
 8004cdc:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004ce0:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ce2:	6898      	ldr	r0, [r3, #8]
 8004ce4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004ce8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cea:	6888      	ldr	r0, [r1, #8]
 8004cec:	68e6      	ldr	r6, [r4, #12]
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004cf4:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004cf6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cf8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004cfc:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cfe:	6918      	ldr	r0, [r3, #16]
 8004d00:	f020 0007 	bic.w	r0, r0, #7
 8004d04:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d06:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004d08:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d0a:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d0e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004d12:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d16:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004d1a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004d1e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004d22:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8004d26:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d28:	6958      	ldr	r0, [r3, #20]
 8004d2a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004d2e:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d30:	6948      	ldr	r0, [r1, #20]
 8004d32:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d34:	69d8      	ldr	r0, [r3, #28]
 8004d36:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004d3a:	f020 0007 	bic.w	r0, r0, #7
 8004d3e:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d40:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8004d44:	4305      	orrs	r5, r0
 8004d46:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d48:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d4a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d4c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d50:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d52:	b31e      	cbz	r6, 8004d9c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d54:	2e01      	cmp	r6, #1
 8004d56:	d023      	beq.n	8004da0 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d58:	1eb0      	subs	r0, r6, #2
 8004d5a:	2802      	cmp	r0, #2
 8004d5c:	d922      	bls.n	8004da4 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d5e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004d60:	bf0c      	ite	eq
 8004d62:	2002      	moveq	r0, #2
 8004d64:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d66:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d68:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d6c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8004d70:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d72:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d74:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d76:	4345      	muls	r5, r0
 8004d78:	4378      	muls	r0, r7
 8004d7a:	3003      	adds	r0, #3
 8004d7c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004d80:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d84:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004d88:	f020 0007 	bic.w	r0, r0, #7
 8004d8c:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d8e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d90:	58a3      	ldr	r3, [r4, r2]
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	50a3      	str	r3, [r4, r2]
}
 8004d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004d9c:	2004      	movs	r0, #4
 8004d9e:	e7e2      	b.n	8004d66 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8004da0:	2003      	movs	r0, #3
 8004da2:	e7e0      	b.n	8004d66 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004da4:	2002      	movs	r0, #2
 8004da6:	e7de      	b.n	8004d66 <LTDC_SetConfig+0xca>

08004da8 <HAL_LTDC_MspInit>:
}
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_LTDC_Init>:
{
 8004dac:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004dae:	4604      	mov	r4, r0
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d063      	beq.n	8004e7c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004db4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004db8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004dbc:	b91b      	cbnz	r3, 8004dc6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004dbe:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004dc2:	f7ff fff1 	bl	8004da8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004dd4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dd6:	6999      	ldr	r1, [r3, #24]
 8004dd8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004ddc:	4302      	orrs	r2, r0
 8004dde:	68e0      	ldr	r0, [r4, #12]
 8004de0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004de2:	6920      	ldr	r0, [r4, #16]
 8004de4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004de6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004de8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004dea:	4925      	ldr	r1, [pc, #148]	; (8004e80 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	400a      	ands	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004dfa:	69a0      	ldr	r0, [r4, #24]
 8004dfc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004dfe:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e00:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	400a      	ands	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e0e:	6a20      	ldr	r0, [r4, #32]
 8004e10:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e12:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e14:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	400a      	ands	r2, r1
 8004e1a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004e24:	4302      	orrs	r2, r0
 8004e26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	4011      	ands	r1, r2
 8004e2c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e3e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e42:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e46:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e4a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e4e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004e52:	430a      	orrs	r2, r1
 8004e54:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004e58:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e5c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e62:	f042 0206 	orr.w	r2, r2, #6
 8004e66:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e70:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e72:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e76:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	e7fc      	b.n	8004e7a <HAL_LTDC_Init+0xce>
 8004e80:	f000f800 	.word	0xf000f800

08004e84 <HAL_LTDC_ConfigLayer>:
{
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004e88:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	460f      	mov	r7, r1
 8004e90:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	f04f 0002 	mov.w	r0, #2
 8004e98:	d01f      	beq.n	8004eda <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e9a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8004e9c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ea0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ea2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ea6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004eaa:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004eae:	3438      	adds	r4, #56	; 0x38
 8004eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ebc:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4662      	mov	r2, ip
 8004ec2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ec4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ec6:	f7ff fee9 	bl	8004c9c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004eca:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004ecc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ece:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ed2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004ed6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ede <HAL_LTDC_GetState>:
  return hltdc->State;
 8004ede:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ee4:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eea:	4c19      	ldr	r4, [pc, #100]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f02:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f04:	f7fe fcf8 	bl	80038f8 <HAL_GetTick>
 8004f08:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	03da      	lsls	r2, r3, #15
 8004f0e:	d50c      	bpl.n	8004f2a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f10:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f12:	4d0f      	ldr	r5, [pc, #60]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f18:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004f1a:	f7fe fced 	bl	80038f8 <HAL_GetTick>
 8004f1e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f20:	686b      	ldr	r3, [r5, #4]
 8004f22:	039b      	lsls	r3, r3, #14
 8004f24:	d50a      	bpl.n	8004f3c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004f26:	2000      	movs	r0, #0
 8004f28:	e006      	b.n	8004f38 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f2a:	f7fe fce5 	bl	80038f8 <HAL_GetTick>
 8004f2e:	1b40      	subs	r0, r0, r5
 8004f30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f34:	d9e9      	bls.n	8004f0a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8004f36:	2003      	movs	r0, #3
}
 8004f38:	b003      	add	sp, #12
 8004f3a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f3c:	f7fe fcdc 	bl	80038f8 <HAL_GetTick>
 8004f40:	1b00      	subs	r0, r0, r4
 8004f42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f46:	d9eb      	bls.n	8004f20 <HAL_PWREx_EnableOverDrive+0x3c>
 8004f48:	e7f5      	b.n	8004f36 <HAL_PWREx_EnableOverDrive+0x52>
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000

08004f54 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004f58:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004f5a:	b136      	cbz	r6, 8004f6a <QSPI_Config+0x16>
 8004f5c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8004f60:	d003      	beq.n	8004f6a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004f62:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004f64:	6804      	ldr	r4, [r0, #0]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004f6a:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8004f6e:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 8004f72:	f1ba 0f00 	cmp.w	sl, #0
 8004f76:	d04e      	beq.n	8005016 <QSPI_Config+0xc2>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004f78:	694b      	ldr	r3, [r1, #20]
 8004f7a:	ea46 0a0a 	orr.w	sl, r6, sl
 8004f7e:	6805      	ldr	r5, [r0, #0]
 8004f80:	f8d1 8000 	ldr.w	r8, [r1]
 8004f84:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 8004f88:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004f8a:	ea4a 0a02 	orr.w	sl, sl, r2
 8004f8e:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 8004f92:	f1bc 0f00 	cmp.w	ip, #0
 8004f96:	d026      	beq.n	8004fe6 <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004f98:	688b      	ldr	r3, [r1, #8]
 8004f9a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8004f9e:	690e      	ldr	r6, [r1, #16]
 8004fa0:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004fa2:	b1a7      	cbz	r7, 8004fce <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fa4:	ea48 0307 	orr.w	r3, r8, r7
 8004fa8:	4323      	orrs	r3, r4
 8004faa:	ea43 0309 	orr.w	r3, r3, r9
 8004fae:	4303      	orrs	r3, r0
 8004fb0:	68c8      	ldr	r0, [r1, #12]
 8004fb2:	4333      	orrs	r3, r6
 8004fb4:	4303      	orrs	r3, r0
 8004fb6:	ea43 030e 	orr.w	r3, r3, lr
 8004fba:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004fbe:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fc2:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004fc4:	d001      	beq.n	8004fca <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004fc6:	684b      	ldr	r3, [r1, #4]
 8004fc8:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fce:	ea48 0304 	orr.w	r3, r8, r4
 8004fd2:	ea43 0309 	orr.w	r3, r3, r9
 8004fd6:	4303      	orrs	r3, r0
 8004fd8:	4333      	orrs	r3, r6
 8004fda:	ea43 030e 	orr.w	r3, r3, lr
 8004fde:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fe2:	616b      	str	r3, [r5, #20]
 8004fe4:	e7f1      	b.n	8004fca <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004fe6:	b167      	cbz	r7, 8005002 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004fe8:	ea48 0307 	orr.w	r3, r8, r7
 8004fec:	4323      	orrs	r3, r4
 8004fee:	ea43 0309 	orr.w	r3, r3, r9
 8004ff2:	4303      	orrs	r3, r0
 8004ff4:	68c8      	ldr	r0, [r1, #12]
 8004ff6:	4303      	orrs	r3, r0
 8004ff8:	ea43 030e 	orr.w	r3, r3, lr
 8004ffc:	ea43 030a 	orr.w	r3, r3, sl
 8005000:	e7dd      	b.n	8004fbe <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005002:	ea48 0304 	orr.w	r3, r8, r4
 8005006:	ea43 0309 	orr.w	r3, r3, r9
 800500a:	4303      	orrs	r3, r0
 800500c:	ea43 030e 	orr.w	r3, r3, lr
 8005010:	ea43 030a 	orr.w	r3, r3, sl
 8005014:	e7e5      	b.n	8004fe2 <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005016:	f1bc 0f00 	cmp.w	ip, #0
 800501a:	d02c      	beq.n	8005076 <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800501c:	6804      	ldr	r4, [r0, #0]
 800501e:	688b      	ldr	r3, [r1, #8]
 8005020:	6908      	ldr	r0, [r1, #16]
 8005022:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005024:	ea46 030c 	orr.w	r3, r6, ip
 8005028:	694e      	ldr	r6, [r1, #20]
 800502a:	ea43 0502 	orr.w	r5, r3, r2
 800502e:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005032:	04b6      	lsls	r6, r6, #18
 8005034:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
 8005038:	b1a7      	cbz	r7, 8005064 <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800503a:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800503c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005040:	ea40 0008 	orr.w	r0, r0, r8
 8005044:	ea43 0300 	orr.w	r3, r3, r0
 8005048:	68c8      	ldr	r0, [r1, #12]
 800504a:	ea43 030c 	orr.w	r3, r3, ip
 800504e:	ea43 0300 	orr.w	r3, r3, r0
 8005052:	ea43 0306 	orr.w	r3, r3, r6
 8005056:	ea43 0305 	orr.w	r3, r3, r5
 800505a:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800505c:	d0b5      	beq.n	8004fca <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800505e:	684b      	ldr	r3, [r1, #4]
 8005060:	61a3      	str	r3, [r4, #24]
 8005062:	e7b2      	b.n	8004fca <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005064:	ea40 0008 	orr.w	r0, r0, r8
 8005068:	4303      	orrs	r3, r0
 800506a:	ea43 030c 	orr.w	r3, r3, ip
 800506e:	4333      	orrs	r3, r6
 8005070:	432b      	orrs	r3, r5
 8005072:	6163      	str	r3, [r4, #20]
 8005074:	e7a9      	b.n	8004fca <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005076:	b1d7      	cbz	r7, 80050ae <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005078:	ea46 0307 	orr.w	r3, r6, r7
 800507c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800507e:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005080:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005084:	ea43 0302 	orr.w	r3, r3, r2
 8005088:	ea43 0304 	orr.w	r3, r3, r4
 800508c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800508e:	ea43 0304 	orr.w	r3, r3, r4
 8005092:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005094:	ea43 0304 	orr.w	r3, r3, r4
 8005098:	68cc      	ldr	r4, [r1, #12]
 800509a:	ea43 0304 	orr.w	r3, r3, r4
 800509e:	694c      	ldr	r4, [r1, #20]
 80050a0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80050a4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80050a6:	d090      	beq.n	8004fca <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80050a8:	684b      	ldr	r3, [r1, #4]
 80050aa:	6183      	str	r3, [r0, #24]
 80050ac:	e78d      	b.n	8004fca <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d08b      	beq.n	8004fca <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050b2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80050b4:	6800      	ldr	r0, [r0, #0]
 80050b6:	4333      	orrs	r3, r6
 80050b8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80050ba:	431a      	orrs	r2, r3
 80050bc:	694b      	ldr	r3, [r1, #20]
 80050be:	4332      	orrs	r2, r6
 80050c0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80050c2:	4332      	orrs	r2, r6
 80050c4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80050c8:	6142      	str	r2, [r0, #20]
}
 80050ca:	e77e      	b.n	8004fca <QSPI_Config+0x76>

080050cc <QSPI_WaitFlagStateUntilTimeout>:
{
 80050cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80050d4:	4604      	mov	r4, r0
 80050d6:	460e      	mov	r6, r1
 80050d8:	4615      	mov	r5, r2
 80050da:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050dc:	6822      	ldr	r2, [r4, #0]
 80050de:	6893      	ldr	r3, [r2, #8]
 80050e0:	4233      	tst	r3, r6
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	d101      	bne.n	80050f0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80050ec:	2000      	movs	r0, #0
 80050ee:	e012      	b.n	8005116 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80050f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80050f4:	d0f3      	beq.n	80050de <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fe fbff 	bl	80038f8 <HAL_GetTick>
 80050fa:	1bc0      	subs	r0, r0, r7
 80050fc:	4540      	cmp	r0, r8
 80050fe:	d802      	bhi.n	8005106 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005100:	f1b8 0f00 	cmp.w	r8, #0
 8005104:	d1ea      	bne.n	80050dc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005106:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005108:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800510a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800510e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800511a <HAL_QSPI_MspInit>:
}
 800511a:	4770      	bx	lr

0800511c <HAL_QSPI_Init>:
{
 800511c:	b530      	push	{r4, r5, lr}
 800511e:	4604      	mov	r4, r0
 8005120:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005122:	f7fe fbe9 	bl	80038f8 <HAL_GetTick>
 8005126:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005128:	2c00      	cmp	r4, #0
 800512a:	d047      	beq.n	80051bc <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800512c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005130:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005134:	b94a      	cbnz	r2, 800514a <HAL_QSPI_Init+0x2e>
 8005136:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005138:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800513a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800513e:	f7ff ffec 	bl	800511a <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	68a1      	ldr	r1, [r4, #8]
 800514e:	6802      	ldr	r2, [r0, #0]
 8005150:	3901      	subs	r1, #1
 8005152:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800515a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800515c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800515e:	4620      	mov	r0, r4
 8005160:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005162:	9200      	str	r2, [sp, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	f7ff ffb1 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800516a:	bb10      	cbnz	r0, 80051b2 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	69e5      	ldr	r5, [r4, #28]
 8005170:	68e3      	ldr	r3, [r4, #12]
 8005172:	6811      	ldr	r1, [r2, #0]
 8005174:	432b      	orrs	r3, r5
 8005176:	6a25      	ldr	r5, [r4, #32]
 8005178:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800517c:	432b      	orrs	r3, r5
 800517e:	6865      	ldr	r5, [r4, #4]
 8005180:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005184:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005188:	430b      	orrs	r3, r1
 800518a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800518c:	6855      	ldr	r5, [r2, #4]
 800518e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005192:	430b      	orrs	r3, r1
 8005194:	6921      	ldr	r1, [r4, #16]
 8005196:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800519a:	4909      	ldr	r1, [pc, #36]	; (80051c0 <HAL_QSPI_Init+0xa4>)
 800519c:	4029      	ands	r1, r5
 800519e:	430b      	orrs	r3, r1
 80051a0:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80051aa:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051ac:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80051ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80051b2:	2300      	movs	r3, #0
 80051b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80051b8:	b005      	add	sp, #20
 80051ba:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80051bc:	2001      	movs	r0, #1
 80051be:	e7fb      	b.n	80051b8 <HAL_QSPI_Init+0x9c>
 80051c0:	ffe0f8fe 	.word	0xffe0f8fe

080051c4 <HAL_QSPI_MspDeInit>:
 80051c4:	4770      	bx	lr

080051c6 <HAL_QSPI_DeInit>:
{
 80051c6:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 80051c8:	4604      	mov	r4, r0
 80051ca:	b168      	cbz	r0, 80051e8 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 80051cc:	6802      	ldr	r2, [r0, #0]
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 80051d6:	f7ff fff5 	bl	80051c4 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051da:	2000      	movs	r0, #0
 80051dc:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 80051de:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80051e2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80051e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
 80051ea:	e7fc      	b.n	80051e6 <HAL_QSPI_DeInit+0x20>

080051ec <HAL_QSPI_Command>:
{
 80051ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051f0:	4604      	mov	r4, r0
 80051f2:	b085      	sub	sp, #20
 80051f4:	4617      	mov	r7, r2
 80051f6:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80051f8:	f7fe fb7e 	bl	80038f8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80051fc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005200:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005202:	2a01      	cmp	r2, #1
 8005204:	d033      	beq.n	800526e <HAL_QSPI_Command+0x82>
 8005206:	2201      	movs	r2, #1
 8005208:	2602      	movs	r6, #2
 800520a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800520e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005212:	2a01      	cmp	r2, #1
 8005214:	fa5f f882 	uxtb.w	r8, r2
 8005218:	d127      	bne.n	800526a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800521a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800521c:	9003      	str	r0, [sp, #12]
 800521e:	2120      	movs	r1, #32
 8005220:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005222:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005224:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005226:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800522a:	f7ff ff4f 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800522e:	4605      	mov	r5, r0
 8005230:	b9a0      	cbnz	r0, 800525c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005232:	4602      	mov	r2, r0
 8005234:	4649      	mov	r1, r9
 8005236:	4620      	mov	r0, r4
 8005238:	f7ff fe8c 	bl	8004f54 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800523c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	b94a      	cbnz	r2, 8005258 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005244:	4642      	mov	r2, r8
 8005246:	4631      	mov	r1, r6
 8005248:	4620      	mov	r0, r4
 800524a:	9700      	str	r7, [sp, #0]
 800524c:	f7ff ff3e 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005250:	4605      	mov	r5, r0
 8005252:	b918      	cbnz	r0, 800525c <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005258:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800525c:	2300      	movs	r3, #0
 800525e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005262:	4628      	mov	r0, r5
 8005264:	b005      	add	sp, #20
 8005266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800526a:	4635      	mov	r5, r6
 800526c:	e7f6      	b.n	800525c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800526e:	2502      	movs	r5, #2
 8005270:	e7f7      	b.n	8005262 <HAL_QSPI_Command+0x76>

08005272 <HAL_QSPI_AutoPolling>:
{
 8005272:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005276:	4604      	mov	r4, r0
 8005278:	4615      	mov	r5, r2
 800527a:	461e      	mov	r6, r3
 800527c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800527e:	f7fe fb3b 	bl	80038f8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005282:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005286:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005288:	2a01      	cmp	r2, #1
 800528a:	d040      	beq.n	800530e <HAL_QSPI_AutoPolling+0x9c>
 800528c:	2201      	movs	r2, #1
 800528e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005292:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005296:	2a01      	cmp	r2, #1
 8005298:	b2d7      	uxtb	r7, r2
 800529a:	d136      	bne.n	800530a <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800529c:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800529e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052a0:	9003      	str	r0, [sp, #12]
 80052a2:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052a4:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052a6:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80052a8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052ac:	2120      	movs	r1, #32
 80052ae:	f7ff ff0d 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80052b2:	bb20      	cbnz	r0, 80052fe <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80052b4:	6821      	ldr	r1, [r4, #0]
 80052b6:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80052b8:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80052ba:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80052bc:	686a      	ldr	r2, [r5, #4]
 80052be:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80052c0:	68aa      	ldr	r2, [r5, #8]
 80052c2:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80052c4:	680a      	ldr	r2, [r1, #0]
 80052c6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80052ca:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80052cc:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80052ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80052d2:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80052d4:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 80052d6:	68ea      	ldr	r2, [r5, #12]
 80052d8:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80052dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052e0:	f7ff fe38 	bl	8004f54 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80052e4:	9b03      	ldr	r3, [sp, #12]
 80052e6:	463a      	mov	r2, r7
 80052e8:	2108      	movs	r1, #8
 80052ea:	4620      	mov	r0, r4
 80052ec:	9600      	str	r6, [sp, #0]
 80052ee:	f7ff feed 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80052f2:	b920      	cbnz	r0, 80052fe <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	2208      	movs	r2, #8
 80052f8:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80052fa:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80052fe:	2300      	movs	r3, #0
 8005300:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005304:	b004      	add	sp, #16
 8005306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800530a:	2002      	movs	r0, #2
 800530c:	e7f7      	b.n	80052fe <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800530e:	2002      	movs	r0, #2
 8005310:	e7f8      	b.n	8005304 <HAL_QSPI_AutoPolling+0x92>

08005312 <HAL_QSPI_Abort>:
{
 8005312:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005314:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005316:	f7fe faef 	bl	80038f8 <HAL_GetTick>
 800531a:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800531c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005320:	f012 0002 	ands.w	r0, r2, #2
 8005324:	d036      	beq.n	8005394 <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 8005326:	2200      	movs	r2, #0
 8005328:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	6811      	ldr	r1, [r2, #0]
 8005330:	0749      	lsls	r1, r1, #29
 8005332:	d50d      	bpl.n	8005350 <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005334:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005336:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005338:	f021 0104 	bic.w	r1, r1, #4
 800533c:	9303      	str	r3, [sp, #12]
 800533e:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005340:	f7fe fc6b 	bl	8003c1a <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	b118      	cbz	r0, 8005350 <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005348:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800534a:	f042 0204 	orr.w	r2, r2, #4
 800534e:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005350:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005352:	4620      	mov	r0, r4
 8005354:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005356:	680a      	ldr	r2, [r1, #0]
 8005358:	f042 0202 	orr.w	r2, r2, #2
 800535c:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800535e:	2102      	movs	r1, #2
 8005360:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005362:	9200      	str	r2, [sp, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	f7ff feb1 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	b990      	cbnz	r0, 8005394 <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	2102      	movs	r1, #2
 8005372:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005374:	2120      	movs	r1, #32
 8005376:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005378:	9200      	str	r2, [sp, #0]
 800537a:	4602      	mov	r2, r0
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fea5 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005382:	b938      	cbnz	r0, 8005394 <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	6953      	ldr	r3, [r2, #20]
 8005388:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800538c:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800538e:	2301      	movs	r3, #1
 8005390:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005394:	b004      	add	sp, #16
 8005396:	bd10      	pop	{r4, pc}

08005398 <HAL_QSPI_Transmit>:
{
 8005398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539a:	4604      	mov	r4, r0
 800539c:	b085      	sub	sp, #20
 800539e:	4616      	mov	r6, r2
 80053a0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80053a2:	f7fe faa9 	bl	80038f8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80053a6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80053aa:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80053ac:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80053ae:	2a01      	cmp	r2, #1
 80053b0:	d04c      	beq.n	800544c <HAL_QSPI_Transmit+0xb4>
 80053b2:	2201      	movs	r2, #1
 80053b4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80053b8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80053bc:	2a01      	cmp	r2, #1
 80053be:	b2d0      	uxtb	r0, r2
 80053c0:	d142      	bne.n	8005448 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053c2:	2200      	movs	r2, #0
 80053c4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80053c6:	2f00      	cmp	r7, #0
 80053c8:	d039      	beq.n	800543e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80053ca:	2212      	movs	r2, #18
 80053cc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80053d0:	692a      	ldr	r2, [r5, #16]
 80053d2:	3201      	adds	r2, #1
 80053d4:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80053d6:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80053d8:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80053da:	3201      	adds	r2, #1
 80053dc:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80053de:	696a      	ldr	r2, [r5, #20]
 80053e0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80053e4:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80053e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053e8:	b9a2      	cbnz	r2, 8005414 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80053ea:	2201      	movs	r2, #1
 80053ec:	2102      	movs	r1, #2
 80053ee:	4620      	mov	r0, r4
 80053f0:	9600      	str	r6, [sp, #0]
 80053f2:	f7ff fe6b 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80053f6:	b928      	cbnz	r0, 8005404 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80053fc:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80053fe:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005400:	f7ff ff87 	bl	8005312 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005404:	2301      	movs	r3, #1
 8005406:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800540a:	2300      	movs	r3, #0
 800540c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005410:	b005      	add	sp, #20
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005414:	2201      	movs	r2, #1
 8005416:	2104      	movs	r1, #4
 8005418:	4620      	mov	r0, r4
 800541a:	9600      	str	r6, [sp, #0]
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	f7ff fe55 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005422:	2800      	cmp	r0, #0
 8005424:	d1ee      	bne.n	8005404 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005426:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005428:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005430:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005432:	3201      	adds	r2, #1
 8005434:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005438:	3a01      	subs	r2, #1
 800543a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800543c:	e7d3      	b.n	80053e6 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800543e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005446:	e7e0      	b.n	800540a <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8005448:	2002      	movs	r0, #2
 800544a:	e7de      	b.n	800540a <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800544c:	2002      	movs	r0, #2
 800544e:	e7df      	b.n	8005410 <HAL_QSPI_Transmit+0x78>

08005450 <HAL_QSPI_Receive>:
{
 8005450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005452:	4604      	mov	r4, r0
 8005454:	b085      	sub	sp, #20
 8005456:	4616      	mov	r6, r2
 8005458:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800545a:	f7fe fa4d 	bl	80038f8 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800545e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005460:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005462:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8005466:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800546a:	2a01      	cmp	r2, #1
 800546c:	d050      	beq.n	8005510 <HAL_QSPI_Receive+0xc0>
 800546e:	2201      	movs	r2, #1
 8005470:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005474:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005478:	2a01      	cmp	r2, #1
 800547a:	b2d0      	uxtb	r0, r2
 800547c:	d146      	bne.n	800550c <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800547e:	2200      	movs	r2, #0
 8005480:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005482:	2f00      	cmp	r7, #0
 8005484:	d03d      	beq.n	8005502 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005486:	2222      	movs	r2, #34	; 0x22
 8005488:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800548c:	692a      	ldr	r2, [r5, #16]
 800548e:	3201      	adds	r2, #1
 8005490:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005492:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8005494:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005496:	3201      	adds	r2, #1
 8005498:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800549a:	6969      	ldr	r1, [r5, #20]
 800549c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80054a0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80054a4:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80054a6:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80054aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054ac:	b9a2      	cbnz	r2, 80054d8 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80054ae:	2201      	movs	r2, #1
 80054b0:	2102      	movs	r1, #2
 80054b2:	4620      	mov	r0, r4
 80054b4:	9600      	str	r6, [sp, #0]
 80054b6:	f7ff fe09 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80054ba:	b928      	cbnz	r0, 80054c8 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80054c0:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80054c2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80054c4:	f7ff ff25 	bl	8005312 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80054ce:	2300      	movs	r3, #0
 80054d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054d4:	b005      	add	sp, #20
 80054d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80054d8:	2201      	movs	r2, #1
 80054da:	2106      	movs	r1, #6
 80054dc:	4620      	mov	r0, r4
 80054de:	9600      	str	r6, [sp, #0]
 80054e0:	9303      	str	r3, [sp, #12]
 80054e2:	f7ff fdf3 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1ee      	bne.n	80054c8 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80054ea:	f895 1020 	ldrb.w	r1, [r5, #32]
 80054ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80054f0:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80054f2:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80054f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054f6:	3201      	adds	r2, #1
 80054f8:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80054fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054fc:	3a01      	subs	r2, #1
 80054fe:	63a2      	str	r2, [r4, #56]	; 0x38
 8005500:	e7d3      	b.n	80054aa <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005502:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800550a:	e7e0      	b.n	80054ce <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 800550c:	2002      	movs	r0, #2
 800550e:	e7de      	b.n	80054ce <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8005510:	2002      	movs	r0, #2
 8005512:	e7df      	b.n	80054d4 <HAL_QSPI_Receive+0x84>

08005514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005518:	4604      	mov	r4, r0
 800551a:	b340      	cbz	r0, 800556e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551c:	6803      	ldr	r3, [r0, #0]
 800551e:	07d8      	lsls	r0, r3, #31
 8005520:	d410      	bmi.n	8005544 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0799      	lsls	r1, r3, #30
 8005526:	d464      	bmi.n	80055f2 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	0719      	lsls	r1, r3, #28
 800552c:	f100 80aa 	bmi.w	8005684 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	075a      	lsls	r2, r3, #29
 8005534:	f100 80cb 	bmi.w	80056ce <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005538:	69a2      	ldr	r2, [r4, #24]
 800553a:	2a00      	cmp	r2, #0
 800553c:	f040 8134 	bne.w	80057a8 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005540:	2000      	movs	r0, #0
 8005542:	e02b      	b.n	800559c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005544:	4b96      	ldr	r3, [pc, #600]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	f002 020c 	and.w	r2, r2, #12
 800554c:	2a04      	cmp	r2, #4
 800554e:	d007      	beq.n	8005560 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	f002 020c 	and.w	r2, r2, #12
 8005556:	2a08      	cmp	r2, #8
 8005558:	d10b      	bne.n	8005572 <HAL_RCC_OscConfig+0x5e>
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	0252      	lsls	r2, r2, #9
 800555e:	d508      	bpl.n	8005572 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005560:	4b8f      	ldr	r3, [pc, #572]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	039b      	lsls	r3, r3, #14
 8005566:	d5dc      	bpl.n	8005522 <HAL_RCC_OscConfig+0xe>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1d9      	bne.n	8005522 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800556e:	2001      	movs	r0, #1
 8005570:	e014      	b.n	800559c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005572:	6862      	ldr	r2, [r4, #4]
 8005574:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005578:	d113      	bne.n	80055a2 <HAL_RCC_OscConfig+0x8e>
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005580:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005582:	f7fe f9b9 	bl	80038f8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	4e86      	ldr	r6, [pc, #536]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005588:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	6833      	ldr	r3, [r6, #0]
 800558c:	039f      	lsls	r7, r3, #14
 800558e:	d4c8      	bmi.n	8005522 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005590:	f7fe f9b2 	bl	80038f8 <HAL_GetTick>
 8005594:	1b40      	subs	r0, r0, r5
 8005596:	2864      	cmp	r0, #100	; 0x64
 8005598:	d9f7      	bls.n	800558a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800559a:	2003      	movs	r0, #3
}
 800559c:	b002      	add	sp, #8
 800559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a2:	4d7f      	ldr	r5, [pc, #508]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b992      	cbnz	r2, 80055ce <HAL_RCC_OscConfig+0xba>
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80055b6:	f7fe f99f 	bl	80038f8 <HAL_GetTick>
 80055ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	0398      	lsls	r0, r3, #14
 80055c0:	d5af      	bpl.n	8005522 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c2:	f7fe f999 	bl	80038f8 <HAL_GetTick>
 80055c6:	1b80      	subs	r0, r0, r6
 80055c8:	2864      	cmp	r0, #100	; 0x64
 80055ca:	d9f7      	bls.n	80055bc <HAL_RCC_OscConfig+0xa8>
 80055cc:	e7e5      	b.n	800559a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ce:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_OscConfig+0xd0>
 80055d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	682b      	ldr	r3, [r5, #0]
 80055dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	e7ce      	b.n	8005582 <HAL_RCC_OscConfig+0x6e>
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f0:	e7f6      	b.n	80055e0 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055f2:	4b6b      	ldr	r3, [pc, #428]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	f012 0f0c 	tst.w	r2, #12
 80055fa:	d007      	beq.n	800560c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	f002 020c 	and.w	r2, r2, #12
 8005602:	2a08      	cmp	r2, #8
 8005604:	d111      	bne.n	800562a <HAL_RCC_OscConfig+0x116>
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	0251      	lsls	r1, r2, #9
 800560a:	d40e      	bmi.n	800562a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560c:	4b64      	ldr	r3, [pc, #400]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	0792      	lsls	r2, r2, #30
 8005612:	d502      	bpl.n	800561a <HAL_RCC_OscConfig+0x106>
 8005614:	68e2      	ldr	r2, [r4, #12]
 8005616:	2a01      	cmp	r2, #1
 8005618:	d1a9      	bne.n	800556e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	6921      	ldr	r1, [r4, #16]
 800561e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005622:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005626:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005628:	e77e      	b.n	8005528 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800562a:	68e2      	ldr	r2, [r4, #12]
 800562c:	b1c2      	cbz	r2, 8005660 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800562e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005630:	4d5b      	ldr	r5, [pc, #364]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005638:	f7fe f95e 	bl	80038f8 <HAL_GetTick>
 800563c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	079f      	lsls	r7, r3, #30
 8005642:	d507      	bpl.n	8005654 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	6922      	ldr	r2, [r4, #16]
 8005648:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800564c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	e769      	b.n	8005528 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005654:	f7fe f950 	bl	80038f8 <HAL_GetTick>
 8005658:	1b80      	subs	r0, r0, r6
 800565a:	2802      	cmp	r0, #2
 800565c:	d9ef      	bls.n	800563e <HAL_RCC_OscConfig+0x12a>
 800565e:	e79c      	b.n	800559a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8005660:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005662:	4e4f      	ldr	r6, [pc, #316]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800566a:	f7fe f945 	bl	80038f8 <HAL_GetTick>
 800566e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005670:	6833      	ldr	r3, [r6, #0]
 8005672:	0798      	lsls	r0, r3, #30
 8005674:	f57f af58 	bpl.w	8005528 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005678:	f7fe f93e 	bl	80038f8 <HAL_GetTick>
 800567c:	1b40      	subs	r0, r0, r5
 800567e:	2802      	cmp	r0, #2
 8005680:	d9f6      	bls.n	8005670 <HAL_RCC_OscConfig+0x15c>
 8005682:	e78a      	b.n	800559a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005684:	6963      	ldr	r3, [r4, #20]
 8005686:	4d46      	ldr	r5, [pc, #280]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 8005688:	b183      	cbz	r3, 80056ac <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800568a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005692:	f7fe f931 	bl	80038f8 <HAL_GetTick>
 8005696:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005698:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800569a:	079b      	lsls	r3, r3, #30
 800569c:	f53f af48 	bmi.w	8005530 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a0:	f7fe f92a 	bl	80038f8 <HAL_GetTick>
 80056a4:	1b80      	subs	r0, r0, r6
 80056a6:	2802      	cmp	r0, #2
 80056a8:	d9f6      	bls.n	8005698 <HAL_RCC_OscConfig+0x184>
 80056aa:	e776      	b.n	800559a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80056ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80056b4:	f7fe f920 	bl	80038f8 <HAL_GetTick>
 80056b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80056bc:	079f      	lsls	r7, r3, #30
 80056be:	f57f af37 	bpl.w	8005530 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c2:	f7fe f919 	bl	80038f8 <HAL_GetTick>
 80056c6:	1b80      	subs	r0, r0, r6
 80056c8:	2802      	cmp	r0, #2
 80056ca:	d9f6      	bls.n	80056ba <HAL_RCC_OscConfig+0x1a6>
 80056cc:	e765      	b.n	800559a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ce:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 80056d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d2:	00d0      	lsls	r0, r2, #3
 80056d4:	d427      	bmi.n	8005726 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80056d8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80056da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ea:	4d2e      	ldr	r5, [pc, #184]	; (80057a4 <HAL_RCC_OscConfig+0x290>)
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	05d9      	lsls	r1, r3, #23
 80056f0:	d51b      	bpl.n	800572a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	4d2a      	ldr	r5, [pc, #168]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d127      	bne.n	800574a <HAL_RCC_OscConfig+0x236>
 80056fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005702:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005706:	f7fe f8f7 	bl	80038f8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570a:	4e25      	ldr	r6, [pc, #148]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800570c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005710:	079b      	lsls	r3, r3, #30
 8005712:	d53f      	bpl.n	8005794 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8005714:	2f00      	cmp	r7, #0
 8005716:	f43f af0f 	beq.w	8005538 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <HAL_RCC_OscConfig+0x28c>)
 800571c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	6413      	str	r3, [r2, #64]	; 0x40
 8005724:	e708      	b.n	8005538 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8005726:	2700      	movs	r7, #0
 8005728:	e7df      	b.n	80056ea <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005730:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005732:	f7fe f8e1 	bl	80038f8 <HAL_GetTick>
 8005736:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	05da      	lsls	r2, r3, #23
 800573c:	d4d9      	bmi.n	80056f2 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573e:	f7fe f8db 	bl	80038f8 <HAL_GetTick>
 8005742:	1b80      	subs	r0, r0, r6
 8005744:	2864      	cmp	r0, #100	; 0x64
 8005746:	d9f7      	bls.n	8005738 <HAL_RCC_OscConfig+0x224>
 8005748:	e727      	b.n	800559a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574a:	b9ab      	cbnz	r3, 8005778 <HAL_RCC_OscConfig+0x264>
 800574c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	672b      	str	r3, [r5, #112]	; 0x70
 8005758:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005760:	f7fe f8ca 	bl	80038f8 <HAL_GetTick>
 8005764:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005768:	0798      	lsls	r0, r3, #30
 800576a:	d5d3      	bpl.n	8005714 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576c:	f7fe f8c4 	bl	80038f8 <HAL_GetTick>
 8005770:	1b80      	subs	r0, r0, r6
 8005772:	4540      	cmp	r0, r8
 8005774:	d9f7      	bls.n	8005766 <HAL_RCC_OscConfig+0x252>
 8005776:	e710      	b.n	800559a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005778:	2b05      	cmp	r3, #5
 800577a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800577c:	d103      	bne.n	8005786 <HAL_RCC_OscConfig+0x272>
 800577e:	f043 0304 	orr.w	r3, r3, #4
 8005782:	672b      	str	r3, [r5, #112]	; 0x70
 8005784:	e7b9      	b.n	80056fa <HAL_RCC_OscConfig+0x1e6>
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	672b      	str	r3, [r5, #112]	; 0x70
 800578c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	e7b5      	b.n	8005700 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fe f8b0 	bl	80038f8 <HAL_GetTick>
 8005798:	1b40      	subs	r0, r0, r5
 800579a:	4540      	cmp	r0, r8
 800579c:	d9b7      	bls.n	800570e <HAL_RCC_OscConfig+0x1fa>
 800579e:	e6fc      	b.n	800559a <HAL_RCC_OscConfig+0x86>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a8:	4d38      	ldr	r5, [pc, #224]	; (800588c <HAL_RCC_OscConfig+0x378>)
 80057aa:	68ab      	ldr	r3, [r5, #8]
 80057ac:	f003 030c 	and.w	r3, r3, #12
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d041      	beq.n	8005838 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80057b4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80057b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057bc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057be:	d12e      	bne.n	800581e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80057c0:	f7fe f89a 	bl	80038f8 <HAL_GetTick>
 80057c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	682b      	ldr	r3, [r5, #0]
 80057c8:	0199      	lsls	r1, r3, #6
 80057ca:	d422      	bmi.n	8005812 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80057d6:	430b      	orrs	r3, r1
 80057d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80057e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80057f6:	f7fe f87f 	bl	80038f8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fa:	4d24      	ldr	r5, [pc, #144]	; (800588c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80057fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	019a      	lsls	r2, r3, #6
 8005802:	f53f ae9d 	bmi.w	8005540 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005806:	f7fe f877 	bl	80038f8 <HAL_GetTick>
 800580a:	1b00      	subs	r0, r0, r4
 800580c:	2802      	cmp	r0, #2
 800580e:	d9f6      	bls.n	80057fe <HAL_RCC_OscConfig+0x2ea>
 8005810:	e6c3      	b.n	800559a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005812:	f7fe f871 	bl	80038f8 <HAL_GetTick>
 8005816:	1b80      	subs	r0, r0, r6
 8005818:	2802      	cmp	r0, #2
 800581a:	d9d4      	bls.n	80057c6 <HAL_RCC_OscConfig+0x2b2>
 800581c:	e6bd      	b.n	800559a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800581e:	f7fe f86b 	bl	80038f8 <HAL_GetTick>
 8005822:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	019b      	lsls	r3, r3, #6
 8005828:	f57f ae8a 	bpl.w	8005540 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800582c:	f7fe f864 	bl	80038f8 <HAL_GetTick>
 8005830:	1b00      	subs	r0, r0, r4
 8005832:	2802      	cmp	r0, #2
 8005834:	d9f6      	bls.n	8005824 <HAL_RCC_OscConfig+0x310>
 8005836:	e6b0      	b.n	800559a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005838:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800583a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583c:	f43f ae97 	beq.w	800556e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005844:	69e1      	ldr	r1, [r4, #28]
 8005846:	428a      	cmp	r2, r1
 8005848:	f47f ae91 	bne.w	800556e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800584c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005850:	6a21      	ldr	r1, [r4, #32]
 8005852:	428a      	cmp	r2, r1
 8005854:	f47f ae8b 	bne.w	800556e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005858:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800585e:	401a      	ands	r2, r3
 8005860:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005864:	f47f ae83 	bne.w	800556e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005868:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800586a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800586e:	0852      	lsrs	r2, r2, #1
 8005870:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005872:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005876:	f47f ae7a 	bne.w	800556e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800587a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800587e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005880:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005884:	f43f ae5c 	beq.w	8005540 <HAL_RCC_OscConfig+0x2c>
 8005888:	e671      	b.n	800556e <HAL_RCC_OscConfig+0x5a>
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800

08005890 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005890:	4913      	ldr	r1, [pc, #76]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005892:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005894:	688b      	ldr	r3, [r1, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b04      	cmp	r3, #4
 800589c:	d01b      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0x46>
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d11b      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058a4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a6:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80058b4:	bf1a      	itte	ne
 80058b6:	480b      	ldrne	r0, [pc, #44]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80058b8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ba:	480b      	ldreq	r0, [pc, #44]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x58>)
 80058bc:	fba1 0100 	umull	r0, r1, r1, r0
 80058c0:	f7fa fcf6 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80058cc:	3301      	adds	r3, #1
 80058ce:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80058d0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80058d4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d6:	4803      	ldr	r0, [pc, #12]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80058d8:	e7fc      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80058da:	4803      	ldr	r0, [pc, #12]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80058dc:	e7fa      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0x44>
 80058de:	bf00      	nop
 80058e0:	40023800 	.word	0x40023800
 80058e4:	017d7840 	.word	0x017d7840
 80058e8:	00f42400 	.word	0x00f42400

080058ec <HAL_RCC_ClockConfig>:
{
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80058f2:	4604      	mov	r4, r0
 80058f4:	b910      	cbnz	r0, 80058fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80058f6:	2001      	movs	r0, #1
}
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058fc:	4a46      	ldr	r2, [pc, #280]	; (8005a18 <HAL_RCC_ClockConfig+0x12c>)
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	428b      	cmp	r3, r1
 8005906:	d328      	bcc.n	800595a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	0797      	lsls	r7, r2, #30
 800590c:	d430      	bmi.n	8005970 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	07d0      	lsls	r0, r2, #31
 8005910:	d444      	bmi.n	800599c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005912:	4a41      	ldr	r2, [pc, #260]	; (8005a18 <HAL_RCC_ClockConfig+0x12c>)
 8005914:	6813      	ldr	r3, [r2, #0]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	42ab      	cmp	r3, r5
 800591c:	d867      	bhi.n	80059ee <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	0751      	lsls	r1, r2, #29
 8005922:	d470      	bmi.n	8005a06 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005924:	0713      	lsls	r3, r2, #28
 8005926:	d507      	bpl.n	8005938 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005928:	4a3c      	ldr	r2, [pc, #240]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
 800592a:	6921      	ldr	r1, [r4, #16]
 800592c:	6893      	ldr	r3, [r2, #8]
 800592e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005932:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005936:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005938:	f7ff ffaa 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 800593c:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
 800593e:	4a38      	ldr	r2, [pc, #224]	; (8005a20 <HAL_RCC_ClockConfig+0x134>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	40d8      	lsrs	r0, r3
 800594a:	4b36      	ldr	r3, [pc, #216]	; (8005a24 <HAL_RCC_ClockConfig+0x138>)
 800594c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800594e:	4b36      	ldr	r3, [pc, #216]	; (8005a28 <HAL_RCC_ClockConfig+0x13c>)
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f7fd ff8d 	bl	8003870 <HAL_InitTick>
  return HAL_OK;
 8005956:	2000      	movs	r0, #0
 8005958:	e7ce      	b.n	80058f8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	f023 030f 	bic.w	r3, r3, #15
 8005960:	430b      	orrs	r3, r1
 8005962:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005964:	6813      	ldr	r3, [r2, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	428b      	cmp	r3, r1
 800596c:	d1c3      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xa>
 800596e:	e7cb      	b.n	8005908 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	f012 0f04 	tst.w	r2, #4
 8005974:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
 8005976:	d003      	beq.n	8005980 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005978:	6899      	ldr	r1, [r3, #8]
 800597a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800597e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005980:	0716      	lsls	r6, r2, #28
 8005982:	d503      	bpl.n	800598c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005984:	6899      	ldr	r1, [r3, #8]
 8005986:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800598a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800598c:	4923      	ldr	r1, [pc, #140]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
 800598e:	68a0      	ldr	r0, [r4, #8]
 8005990:	688b      	ldr	r3, [r1, #8]
 8005992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005996:	4303      	orrs	r3, r0
 8005998:	608b      	str	r3, [r1, #8]
 800599a:	e7b8      	b.n	800590e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599c:	6861      	ldr	r1, [r4, #4]
 800599e:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
 80059a0:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a2:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a4:	d11b      	bne.n	80059de <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059aa:	d0a4      	beq.n	80058f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ac:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ae:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	4f1a      	ldr	r7, [pc, #104]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b4:	f022 0203 	bic.w	r2, r2, #3
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80059bc:	f7fd ff9c 	bl	80038f8 <HAL_GetTick>
 80059c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6862      	ldr	r2, [r4, #4]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80059ce:	d0a0      	beq.n	8005912 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fd ff92 	bl	80038f8 <HAL_GetTick>
 80059d4:	1b80      	subs	r0, r0, r6
 80059d6:	4540      	cmp	r0, r8
 80059d8:	d9f3      	bls.n	80059c2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80059da:	2003      	movs	r0, #3
 80059dc:	e78c      	b.n	80058f8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059de:	2902      	cmp	r1, #2
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80059e6:	e7e0      	b.n	80059aa <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	f012 0f02 	tst.w	r2, #2
 80059ec:	e7dd      	b.n	80059aa <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	f023 030f 	bic.w	r3, r3, #15
 80059f4:	432b      	orrs	r3, r5
 80059f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f8:	6813      	ldr	r3, [r2, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	42ab      	cmp	r3, r5
 8005a00:	f47f af79 	bne.w	80058f6 <HAL_RCC_ClockConfig+0xa>
 8005a04:	e78b      	b.n	800591e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a06:	4905      	ldr	r1, [pc, #20]	; (8005a1c <HAL_RCC_ClockConfig+0x130>)
 8005a08:	68e0      	ldr	r0, [r4, #12]
 8005a0a:	688b      	ldr	r3, [r1, #8]
 8005a0c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005a10:	4303      	orrs	r3, r0
 8005a12:	608b      	str	r3, [r1, #8]
 8005a14:	e786      	b.n	8005924 <HAL_RCC_ClockConfig+0x38>
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800f8d0 	.word	0x0800f8d0
 8005a24:	200000a0 	.word	0x200000a0
 8005a28:	200000a8 	.word	0x200000a8

08005a2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a2c:	6803      	ldr	r3, [r0, #0]
{
 8005a2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a32:	f013 0601 	ands.w	r6, r3, #1
{
 8005a36:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a3a:	4aaa      	ldr	r2, [pc, #680]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005a3c:	6891      	ldr	r1, [r2, #8]
 8005a3e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005a42:	6091      	str	r1, [r2, #8]
 8005a44:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005a46:	6891      	ldr	r1, [r2, #8]
 8005a48:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a4a:	fab6 f686 	clz	r6, r6
 8005a4e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a50:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a52:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8005a56:	d012      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a58:	49a2      	ldr	r1, [pc, #648]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005a5a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005a5c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a60:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8005a68:	bf08      	it	eq
 8005a6a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a6c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a70:	bf16      	itet	ne
 8005a72:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005a76:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a78:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a7a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a7e:	02df      	lsls	r7, r3, #11
 8005a80:	d510      	bpl.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a82:	4898      	ldr	r0, [pc, #608]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005a84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005a86:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a8a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a8e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005a92:	ea42 0201 	orr.w	r2, r2, r1
 8005a96:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a9a:	f000 8184 	beq.w	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	bf08      	it	eq
 8005aa2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8005aa4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005aa8:	bf18      	it	ne
 8005aaa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aac:	0698      	lsls	r0, r3, #26
 8005aae:	d531      	bpl.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ab0:	4b8c      	ldr	r3, [pc, #560]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ab2:	4f8d      	ldr	r7, [pc, #564]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ace:	f7fd ff13 	bl	80038f8 <HAL_GetTick>
 8005ad2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	05d9      	lsls	r1, r3, #23
 8005ad8:	f140 8167 	bpl.w	8005daa <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005adc:	4f81      	ldr	r7, [pc, #516]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005ae4:	f040 816c 	bne.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005aea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005aee:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005af2:	4a7c      	ldr	r2, [pc, #496]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005af4:	f040 818a 	bne.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005af8:	6891      	ldr	r1, [r2, #8]
 8005afa:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005afe:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005b02:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005b06:	4301      	orrs	r1, r0
 8005b08:	6091      	str	r1, [r2, #8]
 8005b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	06d8      	lsls	r0, r3, #27
 8005b18:	d50c      	bpl.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b1a:	4a72      	ldr	r2, [pc, #456]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005b1c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005b20:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005b24:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005b28:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005b2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005b2e:	4301      	orrs	r1, r0
 8005b30:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b34:	0459      	lsls	r1, r3, #17
 8005b36:	d508      	bpl.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b38:	496a      	ldr	r1, [pc, #424]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005b3a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005b3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005b44:	4302      	orrs	r2, r0
 8005b46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b4a:	041a      	lsls	r2, r3, #16
 8005b4c:	d508      	bpl.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b4e:	4965      	ldr	r1, [pc, #404]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005b50:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005b52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b56:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005b5a:	4302      	orrs	r2, r0
 8005b5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b60:	03df      	lsls	r7, r3, #15
 8005b62:	d508      	bpl.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b64:	495f      	ldr	r1, [pc, #380]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005b66:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005b68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005b70:	4302      	orrs	r2, r0
 8005b72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b76:	0398      	lsls	r0, r3, #14
 8005b78:	d508      	bpl.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b7a:	495a      	ldr	r1, [pc, #360]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005b7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005b7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b82:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005b86:	4302      	orrs	r2, r0
 8005b88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b8c:	0659      	lsls	r1, r3, #25
 8005b8e:	d508      	bpl.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b90:	4954      	ldr	r1, [pc, #336]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005b92:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005b94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b98:	f022 0203 	bic.w	r2, r2, #3
 8005b9c:	4302      	orrs	r2, r0
 8005b9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ba2:	061a      	lsls	r2, r3, #24
 8005ba4:	d508      	bpl.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba6:	494f      	ldr	r1, [pc, #316]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005ba8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005baa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bae:	f022 020c 	bic.w	r2, r2, #12
 8005bb2:	4302      	orrs	r2, r0
 8005bb4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bb8:	05df      	lsls	r7, r3, #23
 8005bba:	d508      	bpl.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bbc:	4949      	ldr	r1, [pc, #292]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005bbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005bc0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bc4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005bc8:	4302      	orrs	r2, r0
 8005bca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bce:	0598      	lsls	r0, r3, #22
 8005bd0:	d508      	bpl.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bd2:	4944      	ldr	r1, [pc, #272]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005bd4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005bd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005bde:	4302      	orrs	r2, r0
 8005be0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005be4:	0559      	lsls	r1, r3, #21
 8005be6:	d508      	bpl.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005be8:	493e      	ldr	r1, [pc, #248]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bf0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bf4:	4302      	orrs	r2, r0
 8005bf6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005bfa:	051a      	lsls	r2, r3, #20
 8005bfc:	d508      	bpl.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005bfe:	4939      	ldr	r1, [pc, #228]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c0a:	4302      	orrs	r2, r0
 8005c0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c10:	04df      	lsls	r7, r3, #19
 8005c12:	d508      	bpl.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c14:	4933      	ldr	r1, [pc, #204]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c16:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005c18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c1c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005c20:	4302      	orrs	r2, r0
 8005c22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c26:	0498      	lsls	r0, r3, #18
 8005c28:	d508      	bpl.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c2a:	492e      	ldr	r1, [pc, #184]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c2c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005c2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c32:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005c36:	4302      	orrs	r2, r0
 8005c38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c3c:	0259      	lsls	r1, r3, #9
 8005c3e:	d508      	bpl.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c40:	4928      	ldr	r1, [pc, #160]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c42:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005c44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c48:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005c4c:	4302      	orrs	r2, r0
 8005c4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c52:	029a      	lsls	r2, r3, #10
 8005c54:	d50c      	bpl.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c56:	4823      	ldr	r0, [pc, #140]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c58:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005c5a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8005c5e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c62:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8005c66:	bf08      	it	eq
 8005c68:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8005c70:	f013 0f08 	tst.w	r3, #8
 8005c74:	bf18      	it	ne
 8005c76:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c78:	035f      	lsls	r7, r3, #13
 8005c7a:	d508      	bpl.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c7c:	4919      	ldr	r1, [pc, #100]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c7e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005c80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c88:	4302      	orrs	r2, r0
 8005c8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c8e:	0218      	lsls	r0, r3, #8
 8005c90:	d509      	bpl.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c92:	4914      	ldr	r1, [pc, #80]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c94:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c9c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ca0:	4302      	orrs	r2, r0
 8005ca2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ca6:	2e01      	cmp	r6, #1
 8005ca8:	f000 80b4 	beq.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005cac:	0199      	lsls	r1, r3, #6
 8005cae:	f100 80b1 	bmi.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cb2:	2d01      	cmp	r5, #1
 8005cb4:	d175      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cb6:	4d0b      	ldr	r5, [pc, #44]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	462e      	mov	r6, r5
 8005cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc2:	f7fd fe19 	bl	80038f8 <HAL_GetTick>
 8005cc6:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	f100 8126 	bmi.w	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cd0:	6822      	ldr	r2, [r4, #0]
 8005cd2:	0315      	lsls	r5, r2, #12
 8005cd4:	d501      	bpl.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8005cd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cd8:	b143      	cbz	r3, 8005cec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005cda:	02d0      	lsls	r0, r2, #11
 8005cdc:	d521      	bpl.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ce0:	b9fb      	cbnz	r3, 8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cec:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cf0:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cf8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6961      	ldr	r1, [r4, #20]
 8005d00:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005d04:	69a1      	ldr	r1, [r4, #24]
 8005d06:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005d0a:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d0e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8005d12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d14:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005d18:	3901      	subs	r1, #1
 8005d1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d1e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d22:	0291      	lsls	r1, r2, #10
 8005d24:	d515      	bpl.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005d26:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d2c:	d111      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d2e:	4982      	ldr	r1, [pc, #520]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d30:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d34:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d38:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005d3c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005d40:	4303      	orrs	r3, r0
 8005d42:	6960      	ldr	r0, [r4, #20]
 8005d44:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005d48:	6a20      	ldr	r0, [r4, #32]
 8005d4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d52:	0712      	lsls	r2, r2, #28
 8005d54:	d519      	bpl.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d56:	4a78      	ldr	r2, [pc, #480]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d58:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d60:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6961      	ldr	r1, [r4, #20]
 8005d6c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005d70:	69e1      	ldr	r1, [r4, #28]
 8005d72:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005d76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005d7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d80:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005d84:	430b      	orrs	r3, r1
 8005d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d8a:	4c6b      	ldr	r4, [pc, #428]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d92:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d94:	f7fd fdb0 	bl	80038f8 <HAL_GetTick>
 8005d98:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	f140 80c4 	bpl.w	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005da2:	2000      	movs	r0, #0
 8005da4:	e009      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8005da6:	2601      	movs	r6, #1
 8005da8:	e67c      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005daa:	f7fd fda5 	bl	80038f8 <HAL_GetTick>
 8005dae:	eba0 0008 	sub.w	r0, r0, r8
 8005db2:	2864      	cmp	r0, #100	; 0x64
 8005db4:	f67f ae8e 	bls.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8005db8:	2003      	movs	r0, #3
}
 8005dba:	b003      	add	sp, #12
 8005dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005dc2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f43f ae8e 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005dd8:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ddc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005de0:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005de2:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de6:	07da      	lsls	r2, r3, #31
 8005de8:	f57f ae7e 	bpl.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8005dec:	f7fd fd84 	bl	80038f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005df4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df8:	079b      	lsls	r3, r3, #30
 8005dfa:	f53f ae75 	bmi.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dfe:	f7fd fd7b 	bl	80038f8 <HAL_GetTick>
 8005e02:	eba0 0008 	sub.w	r0, r0, r8
 8005e06:	4548      	cmp	r0, r9
 8005e08:	d9f5      	bls.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8005e0a:	e7d5      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0c:	6891      	ldr	r1, [r2, #8]
 8005e0e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005e12:	e679      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8005e14:	4e48      	ldr	r6, [pc, #288]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e16:	6833      	ldr	r3, [r6, #0]
 8005e18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e1c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005e1e:	f7fd fd6b 	bl	80038f8 <HAL_GetTick>
 8005e22:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e24:	6833      	ldr	r3, [r6, #0]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	d472      	bmi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	07d3      	lsls	r3, r2, #31
 8005e2e:	d512      	bpl.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8005e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e32:	b983      	cbnz	r3, 8005e56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e34:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e38:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e40:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6861      	ldr	r1, [r4, #4]
 8005e48:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005e4c:	68a1      	ldr	r1, [r4, #8]
 8005e4e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005e52:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e56:	0317      	lsls	r7, r2, #12
 8005e58:	d503      	bpl.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e60:	d005      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e62:	02d6      	lsls	r6, r2, #11
 8005e64:	d51e      	bpl.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6c:	d11a      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e6e:	4932      	ldr	r1, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e70:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e74:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e7c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005e80:	4303      	orrs	r3, r0
 8005e82:	6860      	ldr	r0, [r4, #4]
 8005e84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e88:	68e0      	ldr	r0, [r4, #12]
 8005e8a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005e8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e92:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e98:	f020 001f 	bic.w	r0, r0, #31
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	4303      	orrs	r3, r0
 8005ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ea4:	01d0      	lsls	r0, r2, #7
 8005ea6:	d511      	bpl.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ea8:	4923      	ldr	r1, [pc, #140]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005eaa:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005eae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005eb2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005eb6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005eba:	4303      	orrs	r3, r0
 8005ebc:	6860      	ldr	r0, [r4, #4]
 8005ebe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005ec2:	6920      	ldr	r0, [r4, #16]
 8005ec4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ecc:	0191      	lsls	r1, r2, #6
 8005ece:	d50d      	bpl.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	6862      	ldr	r2, [r4, #4]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005eda:	68e2      	ldr	r2, [r4, #12]
 8005edc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ee0:	68a2      	ldr	r2, [r4, #8]
 8005ee2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005ee6:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ee8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005eec:	4e12      	ldr	r6, [pc, #72]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005eee:	6833      	ldr	r3, [r6, #0]
 8005ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ef4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005ef6:	f7fd fcff 	bl	80038f8 <HAL_GetTick>
 8005efa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	011a      	lsls	r2, r3, #4
 8005f00:	f53f aed7 	bmi.w	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f04:	f7fd fcf8 	bl	80038f8 <HAL_GetTick>
 8005f08:	1bc0      	subs	r0, r0, r7
 8005f0a:	2864      	cmp	r0, #100	; 0x64
 8005f0c:	d9f6      	bls.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005f0e:	e753      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f10:	f7fd fcf2 	bl	80038f8 <HAL_GetTick>
 8005f14:	1bc0      	subs	r0, r0, r7
 8005f16:	2864      	cmp	r0, #100	; 0x64
 8005f18:	d984      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005f1a:	e74d      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f1c:	f7fd fcec 	bl	80038f8 <HAL_GetTick>
 8005f20:	1bc0      	subs	r0, r0, r7
 8005f22:	2864      	cmp	r0, #100	; 0x64
 8005f24:	f67f aed0 	bls.w	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8005f28:	e746      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f2a:	f7fd fce5 	bl	80038f8 <HAL_GetTick>
 8005f2e:	1b40      	subs	r0, r0, r5
 8005f30:	2864      	cmp	r0, #100	; 0x64
 8005f32:	f67f af32 	bls.w	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f36:	e73f      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8005f38:	40023800 	.word	0x40023800

08005f3c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005f3c:	4b53      	ldr	r3, [pc, #332]	; (800608c <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 8005f3e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005f40:	4b53      	ldr	r3, [pc, #332]	; (8006090 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 8005f42:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f46:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8005f4a:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f4c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f50:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005f54:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f56:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f5a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8005f5e:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f60:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f64:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005f68:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005f6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f6e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8005f72:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f78:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005f7c:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f82:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8005f86:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f8c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005f90:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8005f92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005f96:	f002 021f 	and.w	r2, r2, #31
 8005f9a:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8005f9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005fa0:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8005fa4:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8005fa6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005faa:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005fae:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005fb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005fb4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005fb8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005fba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005fbe:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005fc2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005fca:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005fcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005fd0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005fd4:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005fd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005fda:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005fde:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005fe0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005fe4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005fe8:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005fea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005fee:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005ff2:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005ff4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ff8:	f002 0203 	and.w	r2, r2, #3
 8005ffc:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005ffe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006002:	f002 020c 	and.w	r2, r2, #12
 8006006:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006008:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800600c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006010:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8006012:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006016:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800601a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800601c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006020:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006024:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8006026:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800602a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800602e:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006030:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006034:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006038:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800603a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800603e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8006042:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006044:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006048:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 800604c:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800604e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006052:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006056:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8006058:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800605c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006060:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006062:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006066:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800606a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800606e:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006072:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006076:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800607a:	430a      	orrs	r2, r1
 800607c:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800607e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006086:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00fffff1 	.word	0x00fffff1
 8006090:	40023800 	.word	0x40023800

08006094 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006094:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006098:	d13e      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    saiclocksource = RCC->DCKCFGR1;
 800609a:	4b2c      	ldr	r3, [pc, #176]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800609c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80060a0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80060a4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80060a8:	d044      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 80060aa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 80060ae:	d049      	beq.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	d149      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80060b4:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060b6:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80060b8:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80060ba:	4a24      	ldr	r2, [pc, #144]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80060c0:	bf54      	ite	pl
 80060c2:	4b23      	ldrpl	r3, [pc, #140]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060c4:	4b23      	ldrmi	r3, [pc, #140]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80060c6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060ca:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80060ce:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80060d2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80060d6:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80060d8:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80060dc:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80060e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80060e4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80060e8:	e012      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060ea:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060ee:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80060f2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80060f6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80060fa:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80060fe:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006100:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006104:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006108:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8006112:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8006116:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006118:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 800611c:	d114      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    saiclocksource = RCC->DCKCFGR1;
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006120:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006124:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8006128:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800612c:	d002      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800612e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006132:	e7bc      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006134:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006136:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006138:	0253      	lsls	r3, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800613a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800613e:	d4d4      	bmi.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x56>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006140:	4b03      	ldr	r3, [pc, #12]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006142:	e7d3      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006144:	4804      	ldr	r0, [pc, #16]	; (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8006146:	4770      	bx	lr
    switch (saiclocksource)
 8006148:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 800614a:	4770      	bx	lr
 800614c:	40023800 	.word	0x40023800
 8006150:	00f42400 	.word	0x00f42400
 8006154:	017d7840 	.word	0x017d7840
 8006158:	00bb8000 	.word	0x00bb8000

0800615c <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800615c:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800615e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006160:	6842      	ldr	r2, [r0, #4]
    tmpIT |= SAI_IT_FREQ;
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2309      	moveq	r3, #9
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006168:	2908      	cmp	r1, #8
 800616a:	d105      	bne.n	8006178 <SAI_InterruptFlag+0x1c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800616c:	f022 0102 	bic.w	r1, r2, #2
 8006170:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 8006172:	bf08      	it	eq
 8006174:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006178:	3a02      	subs	r2, #2
 800617a:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800617c:	bf94      	ite	ls
 800617e:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006182:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8006186:	4770      	bx	lr

08006188 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <SAI_Disable+0x38>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800618a:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8006192:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8006196:	680b      	ldr	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006198:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 800619a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800619e:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80061a0:	3a01      	subs	r2, #1
 80061a2:	d207      	bcs.n	80061b4 <SAI_Disable+0x2c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80061a4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80061a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80061b0:	2003      	movs	r0, #3
      break;
 80061b2:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80061b4:	680b      	ldr	r3, [r1, #0]
 80061b6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80061ba:	d1f1      	bne.n	80061a0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	4618      	mov	r0, r3

  return status;
}
 80061be:	4770      	bx	lr
 80061c0:	200000a0 	.word	0x200000a0

080061c4 <HAL_SAI_MspInit>:
}
 80061c4:	4770      	bx	lr
	...

080061c8 <HAL_SAI_Init>:
{
 80061c8:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80061ca:	4604      	mov	r4, r0
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f000 80ca 	beq.w	8006366 <HAL_SAI_Init+0x19e>
  if (hsai->State == HAL_SAI_STATE_RESET)
 80061d2:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80061d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061da:	b91b      	cbnz	r3, 80061e4 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80061dc:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80061e0:	f7ff fff0 	bl	80061c4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80061e4:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80061e6:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80061e8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80061ec:	f7ff ffcc 	bl	8006188 <SAI_Disable>
  switch (hsai->Init.SynchroExt)
 80061f0:	68e3      	ldr	r3, [r4, #12]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	f000 80a6 	beq.w	8006344 <HAL_SAI_Init+0x17c>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	bf14      	ite	ne
 80061fc:	2300      	movne	r3, #0
 80061fe:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 8006200:	68a2      	ldr	r2, [r4, #8]
 8006202:	2a02      	cmp	r2, #2
 8006204:	f000 80a2 	beq.w	800634c <HAL_SAI_Init+0x184>
 8006208:	2a03      	cmp	r2, #3
 800620a:	f000 809d 	beq.w	8006348 <HAL_SAI_Init+0x180>
 800620e:	2a01      	cmp	r2, #1
 8006210:	bf14      	ite	ne
 8006212:	2500      	movne	r5, #0
 8006214:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006218:	6822      	ldr	r2, [r4, #0]
 800621a:	4954      	ldr	r1, [pc, #336]	; (800636c <HAL_SAI_Init+0x1a4>)
 800621c:	428a      	cmp	r2, r1
 800621e:	d003      	beq.n	8006228 <HAL_SAI_Init+0x60>
 8006220:	4853      	ldr	r0, [pc, #332]	; (8006370 <HAL_SAI_Init+0x1a8>)
 8006222:	4282      	cmp	r2, r0
 8006224:	f040 8095 	bne.w	8006352 <HAL_SAI_Init+0x18a>
    SAI1->GCR = tmpregisterGCR;
 8006228:	4852      	ldr	r0, [pc, #328]	; (8006374 <HAL_SAI_Init+0x1ac>)
    SAI2->GCR = tmpregisterGCR;
 800622a:	6003      	str	r3, [r0, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800622c:	69e3      	ldr	r3, [r4, #28]
 800622e:	b343      	cbz	r3, 8006282 <HAL_SAI_Init+0xba>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006230:	428a      	cmp	r2, r1
 8006232:	d003      	beq.n	800623c <HAL_SAI_Init+0x74>
 8006234:	4b4e      	ldr	r3, [pc, #312]	; (8006370 <HAL_SAI_Init+0x1a8>)
 8006236:	429a      	cmp	r2, r3
 8006238:	f040 808d 	bne.w	8006356 <HAL_SAI_Init+0x18e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800623c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006240:	f7ff ff28 	bl	8006094 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	4a4c      	ldr	r2, [pc, #304]	; (8006378 <HAL_SAI_Init+0x1b0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d002      	beq.n	8006252 <HAL_SAI_Init+0x8a>
 800624c:	3220      	adds	r2, #32
 800624e:	4293      	cmp	r3, r2
 8006250:	d103      	bne.n	800625a <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006252:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006256:	f7ff ff1d 	bl	8006094 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800625a:	220a      	movs	r2, #10
 800625c:	69e3      	ldr	r3, [r4, #28]
 800625e:	4350      	muls	r0, r2
 8006260:	025b      	lsls	r3, r3, #9
 8006262:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8006266:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 800626a:	fb02 0013 	mls	r0, r2, r3, r0
 800626e:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 8006270:	bf08      	it	eq
 8006272:	3301      	addeq	r3, #1
 8006274:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006278:	2b04      	cmp	r3, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800627a:	bf02      	ittt	eq
 800627c:	6a23      	ldreq	r3, [r4, #32]
 800627e:	085b      	lsreq	r3, r3, #1
 8006280:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006286:	f033 0102 	bics.w	r1, r3, #2
 800628a:	d166      	bne.n	800635a <HAL_SAI_Init+0x192>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800628c:	2a01      	cmp	r2, #1
 800628e:	bf18      	it	ne
 8006290:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	4839      	ldr	r0, [pc, #228]	; (800637c <HAL_SAI_Init+0x1b4>)
 8006298:	6816      	ldr	r6, [r2, #0]
 800629a:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800629c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800629e:	4333      	orrs	r3, r6
 80062a0:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80062a2:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062a4:	4333      	orrs	r3, r6
 80062a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80062a8:	6810      	ldr	r0, [r2, #0]
 80062aa:	4333      	orrs	r3, r6
 80062ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062ae:	4333      	orrs	r3, r6
 80062b0:	6926      	ldr	r6, [r4, #16]
 80062b2:	4333      	orrs	r3, r6
 80062b4:	6966      	ldr	r6, [r4, #20]
 80062b6:	4333      	orrs	r3, r6
 80062b8:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80062ba:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062bc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80062c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062c2:	432b      	orrs	r3, r5
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80062c8:	6853      	ldr	r3, [r2, #4]
 80062ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80062ce:	f023 030f 	bic.w	r3, r3, #15
 80062d2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80062d4:	69a3      	ldr	r3, [r4, #24]
 80062d6:	6851      	ldr	r1, [r2, #4]
 80062d8:	4303      	orrs	r3, r0
 80062da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80062dc:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80062de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80062e4:	4b26      	ldr	r3, [pc, #152]	; (8006380 <HAL_SAI_Init+0x1b8>)
 80062e6:	6891      	ldr	r1, [r2, #8]
 80062e8:	400b      	ands	r3, r1
 80062ea:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80062ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062ee:	6891      	ldr	r1, [r2, #8]
 80062f0:	4303      	orrs	r3, r0
 80062f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80062f4:	4303      	orrs	r3, r0
 80062f6:	430b      	orrs	r3, r1
 80062f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80062fa:	3901      	subs	r1, #1
 80062fc:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80062fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006300:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006302:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006306:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006308:	68d3      	ldr	r3, [r2, #12]
 800630a:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800630e:	f023 030f 	bic.w	r3, r3, #15
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006318:	68d1      	ldr	r1, [r2, #12]
 800631a:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 800631e:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006320:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006322:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006324:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800632a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800632c:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800632e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006332:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8006334:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006336:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800633a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 800633e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8006342:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8006344:	2310      	movs	r3, #16
 8006346:	e75b      	b.n	8006200 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006348:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800634c:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006350:	e762      	b.n	8006218 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8006352:	480c      	ldr	r0, [pc, #48]	; (8006384 <HAL_SAI_Init+0x1bc>)
 8006354:	e769      	b.n	800622a <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 8006356:	2000      	movs	r0, #0
 8006358:	e774      	b.n	8006244 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800635a:	2a01      	cmp	r2, #1
 800635c:	bf14      	ite	ne
 800635e:	2100      	movne	r1, #0
 8006360:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8006364:	e796      	b.n	8006294 <HAL_SAI_Init+0xcc>
    return HAL_ERROR;
 8006366:	2001      	movs	r0, #1
 8006368:	e7eb      	b.n	8006342 <HAL_SAI_Init+0x17a>
 800636a:	bf00      	nop
 800636c:	40015804 	.word	0x40015804
 8006370:	40015824 	.word	0x40015824
 8006374:	40015800 	.word	0x40015800
 8006378:	40015c04 	.word	0x40015c04
 800637c:	ff05c010 	.word	0xff05c010
 8006380:	fff88000 	.word	0xfff88000
 8006384:	40015c00 	.word	0x40015c00

08006388 <HAL_SAI_MspDeInit>:
 8006388:	4770      	bx	lr

0800638a <HAL_SAI_DeInit>:
{
 800638a:	b538      	push	{r3, r4, r5, lr}
  if (hsai == NULL)
 800638c:	4604      	mov	r4, r0
 800638e:	b1d0      	cbz	r0, 80063c6 <HAL_SAI_DeInit+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006390:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8006392:	2500      	movs	r5, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->State = HAL_SAI_STATE_BUSY;
 8006398:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80063a0:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 80063a2:	f7ff fef1 	bl	8006188 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80063a6:	6822      	ldr	r2, [r4, #0]
  HAL_SAI_MspDeInit(hsai);
 80063a8:	4620      	mov	r0, r4
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80063aa:	6853      	ldr	r3, [r2, #4]
 80063ac:	f043 0308 	orr.w	r3, r3, #8
 80063b0:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 80063b2:	f7ff ffe9 	bl	8006388 <HAL_SAI_MspDeInit>
  return HAL_OK;
 80063b6:	4628      	mov	r0, r5
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80063b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80063bc:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 80063c0:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
}
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7fc      	b.n	80063c4 <HAL_SAI_DeInit+0x3a>

080063ca <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 80063ca:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d009      	beq.n	80063e6 <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80063d2:	6802      	ldr	r2, [r0, #0]
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063da:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
 80063dc:	2300      	movs	r3, #0
 80063de:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80063e2:	4618      	mov	r0, r3
 80063e4:	4770      	bx	lr
  __HAL_LOCK(hsai);
 80063e6:	2002      	movs	r0, #2
}
 80063e8:	4770      	bx	lr

080063ea <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 80063ea:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d010      	beq.n	8006414 <HAL_SAI_DMAResume+0x2a>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80063f2:	6803      	ldr	r3, [r0, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80063fa:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	03d2      	lsls	r2, r2, #15
 8006400:	d403      	bmi.n	800640a <HAL_SAI_DMAResume+0x20>
    __HAL_SAI_ENABLE(hsai);
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006408:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 800640a:	2300      	movs	r3, #0
 800640c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8006410:	4618      	mov	r0, r3
 8006412:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8006414:	2002      	movs	r0, #2
}
 8006416:	4770      	bx	lr

08006418 <HAL_SAI_DMAStop>:
{
 8006418:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800641a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800641e:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8006420:	2b01      	cmp	r3, #1
 8006422:	d041      	beq.n	80064a8 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006424:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8006426:	2501      	movs	r5, #1
 8006428:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800642c:	6813      	ldr	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800642e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006434:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006436:	bb20      	cbnz	r0, 8006482 <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8006438:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800643a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800643c:	b188      	cbz	r0, 8006462 <HAL_SAI_DMAStop+0x4a>
 800643e:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8006442:	2b22      	cmp	r3, #34	; 0x22
 8006444:	d10d      	bne.n	8006462 <HAL_SAI_DMAStop+0x4a>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8006446:	f7fd fbe8 	bl	8003c1a <HAL_DMA_Abort>
 800644a:	b150      	cbz	r0, 8006462 <HAL_SAI_DMAStop+0x4a>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800644c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800644e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d006      	beq.n	8006462 <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006454:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8006458:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800645a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
 8006462:	4620      	mov	r0, r4
 8006464:	f7ff fe90 	bl	8006188 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	6853      	ldr	r3, [r2, #4]
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8006472:	2301      	movs	r3, #1
 8006474:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8006478:	2300      	movs	r3, #0
 800647a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800647e:	4628      	mov	r0, r5
 8006480:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006482:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8006486:	2b12      	cmp	r3, #18
 8006488:	d1d6      	bne.n	8006438 <HAL_SAI_DMAStop+0x20>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800648a:	f7fd fbc6 	bl	8003c1a <HAL_DMA_Abort>
 800648e:	2800      	cmp	r0, #0
 8006490:	d0d2      	beq.n	8006438 <HAL_SAI_DMAStop+0x20>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006492:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d0ce      	beq.n	8006438 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800649a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80064a6:	e7c8      	b.n	800643a <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 80064a8:	2502      	movs	r5, #2
 80064aa:	e7e8      	b.n	800647e <HAL_SAI_DMAStop+0x66>

080064ac <HAL_SAI_Transmit_DMA>:
{
 80064ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b0:	460f      	mov	r7, r1
 80064b2:	4604      	mov	r4, r0
 80064b4:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80064b6:	f7fd fa1f 	bl	80038f8 <HAL_GetTick>
 80064ba:	4680      	mov	r8, r0
  if ((pData == NULL) || (Size == 0))
 80064bc:	2f00      	cmp	r7, #0
 80064be:	d059      	beq.n	8006574 <HAL_SAI_Transmit_DMA+0xc8>
 80064c0:	2e00      	cmp	r6, #0
 80064c2:	d057      	beq.n	8006574 <HAL_SAI_Transmit_DMA+0xc8>
  if (hsai->State == HAL_SAI_STATE_READY)
 80064c4:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	b2dd      	uxtb	r5, r3
 80064cc:	d154      	bne.n	8006578 <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_LOCK(hsai);
 80064ce:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d050      	beq.n	8006578 <HAL_SAI_Transmit_DMA+0xcc>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80064d6:	f04f 0900 	mov.w	r9, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80064da:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80064dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80064de:	4639      	mov	r1, r7
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80064e0:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80064e4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80064e8:	4b24      	ldr	r3, [pc, #144]	; (800657c <HAL_SAI_Transmit_DMA+0xd0>)
    __HAL_LOCK(hsai);
 80064ea:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80064ee:	6667      	str	r7, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 80064f0:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80064f4:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80064f8:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80064fa:	4b21      	ldr	r3, [pc, #132]	; (8006580 <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80064fc:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80064fe:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006500:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_SAI_Transmit_DMA+0xd8>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006502:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8006504:	e9c0 3913 	strd	r3, r9, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006508:	4633      	mov	r3, r6
 800650a:	f7fd fb49 	bl	8003ba0 <HAL_DMA_Start_IT>
 800650e:	4601      	mov	r1, r0
 8006510:	b120      	cbz	r0, 800651c <HAL_SAI_Transmit_DMA+0x70>
      __HAL_UNLOCK(hsai);
 8006512:	f884 907c 	strb.w	r9, [r4, #124]	; 0x7c
}
 8006516:	4628      	mov	r0, r5
 8006518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fe1d 	bl	800615c <SAI_InterruptFlag>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	4310      	orrs	r0, r2
 8006528:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006530:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	695d      	ldr	r5, [r3, #20]
 8006536:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800653a:	d00a      	beq.n	8006552 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	03d2      	lsls	r2, r2, #15
 8006540:	d403      	bmi.n	800654a <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006548:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800654a:	2500      	movs	r5, #0
 800654c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8006550:	e7e1      	b.n	8006516 <HAL_SAI_Transmit_DMA+0x6a>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006552:	f7fd f9d1 	bl	80038f8 <HAL_GetTick>
 8006556:	eba0 0008 	sub.w	r0, r0, r8
 800655a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800655e:	d9e8      	bls.n	8006532 <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006560:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        __HAL_UNLOCK(hsai);
 8006564:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8006568:	2503      	movs	r5, #3
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800656a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 8006572:	e7d0      	b.n	8006516 <HAL_SAI_Transmit_DMA+0x6a>
    return  HAL_ERROR;
 8006574:	2501      	movs	r5, #1
 8006576:	e7ce      	b.n	8006516 <HAL_SAI_Transmit_DMA+0x6a>
    return HAL_BUSY;
 8006578:	2502      	movs	r5, #2
 800657a:	e7cc      	b.n	8006516 <HAL_SAI_Transmit_DMA+0x6a>
 800657c:	08006661 	.word	0x08006661
 8006580:	08006629 	.word	0x08006629
 8006584:	080066ad 	.word	0x080066ad

08006588 <HAL_SAI_Receive_DMA>:
{
 8006588:	4613      	mov	r3, r2
  if ((pData == NULL) || (Size == 0))
 800658a:	460a      	mov	r2, r1
{
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0))
 8006590:	2900      	cmp	r1, #0
 8006592:	d03f      	beq.n	8006614 <HAL_SAI_Receive_DMA+0x8c>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d03d      	beq.n	8006614 <HAL_SAI_Receive_DMA+0x8c>
  if (hsai->State == HAL_SAI_STATE_READY)
 8006598:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
 800659c:	2901      	cmp	r1, #1
 800659e:	b2cd      	uxtb	r5, r1
 80065a0:	d13a      	bne.n	8006618 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
 80065a2:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 80065a6:	2901      	cmp	r1, #1
 80065a8:	d036      	beq.n	8006618 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065aa:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80065ac:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 80065ae:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065b2:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 80065b6:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80065b8:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
 80065bc:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80065c0:	4916      	ldr	r1, [pc, #88]	; (800661c <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
 80065c2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80065c6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80065c8:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80065ca:	4915      	ldr	r1, [pc, #84]	; (8006620 <HAL_SAI_Receive_DMA+0x98>)
 80065cc:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80065ce:	4915      	ldr	r1, [pc, #84]	; (8006624 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
 80065d0:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	311c      	adds	r1, #28
 80065d8:	f7fd fae2 	bl	8003ba0 <HAL_DMA_Start_IT>
 80065dc:	4601      	mov	r1, r0
 80065de:	b118      	cbz	r0, 80065e8 <HAL_SAI_Receive_DMA+0x60>
      __HAL_UNLOCK(hsai);
 80065e0:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 80065e4:	4628      	mov	r0, r5
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fdb7 	bl	800615c <SAI_InterruptFlag>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	4310      	orrs	r0, r2
 80065f4:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065fc:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	03d2      	lsls	r2, r2, #15
 8006602:	d403      	bmi.n	800660c <HAL_SAI_Receive_DMA+0x84>
      __HAL_SAI_ENABLE(hsai);
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800660a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800660c:	2500      	movs	r5, #0
 800660e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8006612:	e7e7      	b.n	80065e4 <HAL_SAI_Receive_DMA+0x5c>
    return  HAL_ERROR;
 8006614:	2501      	movs	r5, #1
 8006616:	e7e5      	b.n	80065e4 <HAL_SAI_Receive_DMA+0x5c>
    return HAL_BUSY;
 8006618:	2502      	movs	r5, #2
 800661a:	e7e3      	b.n	80065e4 <HAL_SAI_Receive_DMA+0x5c>
 800661c:	080066a3 	.word	0x080066a3
 8006620:	0800666b 	.word	0x0800666b
 8006624:	080066ad 	.word	0x080066ad

08006628 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006628:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800662a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800662e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006632:	d011      	beq.n	8006658 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006634:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8006636:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006638:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800663a:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 800663c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006640:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006644:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006646:	f7ff fd89 	bl	800615c <SAI_InterruptFlag>
 800664a:	692b      	ldr	r3, [r5, #16]
 800664c:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 8006650:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006652:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8006654:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006658:	4620      	mov	r0, r4
 800665a:	f7fa ffe9 	bl	8001630 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800665e:	bd38      	pop	{r3, r4, r5, pc}

08006660 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006660:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006662:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006664:	f7fa ffe8 	bl	8001638 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006668:	bd08      	pop	{r3, pc}

0800666a <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800666a:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800666c:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d011      	beq.n	800669a <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006676:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8006678:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800667a:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006682:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8006684:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006688:	f7ff fd68 	bl	800615c <SAI_InterruptFlag>
 800668c:	692b      	ldr	r3, [r5, #16]
 800668e:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 8006692:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006694:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8006696:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800669a:	4620      	mov	r0, r4
 800669c:	f7fb f98a 	bl	80019b4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80066a0:	bd38      	pop	{r3, r4, r5, pc}

080066a2 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80066a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80066a4:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 80066a6:	f7fb f989 	bl	80019bc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80066aa:	bd08      	pop	{r3, pc}

080066ac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80066ac:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ae:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80066b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80066b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80066bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80066be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d003      	beq.n	80066cc <SAI_DMAError+0x20>
 80066c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d10d      	bne.n	80066e8 <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80066cc:	6822      	ldr	r2, [r4, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80066ce:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066d6:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80066d8:	f7ff fd56 	bl	8006188 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80066dc:	2301      	movs	r3, #1
 80066de:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80066e8:	4620      	mov	r0, r4
 80066ea:	f7fb f96b 	bl	80019c4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80066ee:	bd10      	pop	{r4, pc}

080066f0 <HAL_SAI_GetState>:
  return hsai->State;
 80066f0:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80066f4:	4770      	bx	lr

080066f6 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80066f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f8:	4605      	mov	r5, r0
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80066fe:	f7fd f8fb 	bl	80038f8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8006702:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8006704:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006706:	2108      	movs	r1, #8
 8006708:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800670a:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800670e:	f000 ff9a 	bl	8007646 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006712:	4604      	mov	r4, r0
 8006714:	b9d8      	cbnz	r0, 800674e <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006716:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8006718:	6828      	ldr	r0, [r5, #0]
 800671a:	0409      	lsls	r1, r1, #16
 800671c:	f001 f8e8 	bl	80078f0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006720:	4604      	mov	r4, r0
 8006722:	b9a0      	cbnz	r0, 800674e <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8006724:	f04f 32ff 	mov.w	r2, #4294967295
 8006728:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800672a:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800672c:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800672e:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8006730:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006734:	2302      	movs	r3, #2
 8006736:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800673a:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800673c:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800673e:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006740:	f000 ff6e 	bl	8007620 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006744:	6828      	ldr	r0, [r5, #0]
 8006746:	f001 f91c 	bl	8007982 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800674a:	4604      	mov	r4, r0
 800674c:	b190      	cbz	r0, 8006774 <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800674e:	4620      	mov	r0, r4
 8006750:	b009      	add	sp, #36	; 0x24
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006754:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006756:	0293      	lsls	r3, r2, #10
 8006758:	d512      	bpl.n	8006780 <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800675a:	f000 ff37 	bl	80075cc <SDMMC_ReadFIFO>
 800675e:	ab08      	add	r3, sp, #32
 8006760:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 8006764:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006766:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800676a:	f7fd f8c5 	bl	80038f8 <HAL_GetTick>
 800676e:	1bc0      	subs	r0, r0, r7
 8006770:	3001      	adds	r0, #1
 8006772:	d023      	beq.n	80067bc <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006774:	6828      	ldr	r0, [r5, #0]
 8006776:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006778:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 800677c:	d0ea      	beq.n	8006754 <SD_FindSCR+0x5e>
 800677e:	e002      	b.n	8006786 <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006780:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006782:	0491      	lsls	r1, r2, #18
 8006784:	d4f1      	bmi.n	800676a <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006786:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006788:	0712      	lsls	r2, r2, #28
 800678a:	d502      	bpl.n	8006792 <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800678c:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800678e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8006790:	e7dd      	b.n	800674e <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006792:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006794:	0793      	lsls	r3, r2, #30
 8006796:	d501      	bpl.n	800679c <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006798:	2402      	movs	r4, #2
 800679a:	e7f8      	b.n	800678e <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800679c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800679e:	f014 0420 	ands.w	r4, r4, #32
 80067a2:	d001      	beq.n	80067a8 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80067a4:	2420      	movs	r4, #32
 80067a6:	e7f2      	b.n	800678e <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80067ae:	ba1b      	rev	r3, r3
 80067b0:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80067b2:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80067b4:	9b00      	ldr	r3, [sp, #0]
 80067b6:	ba1b      	rev	r3, r3
 80067b8:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 80067ba:	e7c8      	b.n	800674e <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 80067bc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80067c0:	e7c5      	b.n	800674e <SD_FindSCR+0x58>

080067c2 <HAL_SD_MspInit>:
}
 80067c2:	4770      	bx	lr

080067c4 <HAL_SD_ReadBlocks>:
{
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	460d      	mov	r5, r1
 80067ca:	b087      	sub	sp, #28
 80067cc:	4604      	mov	r4, r0
 80067ce:	4616      	mov	r6, r2
 80067d0:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 80067d2:	f7fd f891 	bl	80038f8 <HAL_GetTick>
 80067d6:	4680      	mov	r8, r0
  if(NULL == pData)
 80067d8:	b92d      	cbnz	r5, 80067e6 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 80067e0:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80067e2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80067e4:	e010      	b.n	8006808 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 80067e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	b2df      	uxtb	r7, r3
 80067ee:	f040 80df 	bne.w	80069b0 <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067f2:	eb06 030a 	add.w	r3, r6, sl
 80067f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067f8:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067fa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067fc:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067fe:	d907      	bls.n	8006810 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006806:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006808:	4638      	mov	r0, r7
 800680a:	b007      	add	sp, #28
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8006810:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8006812:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006814:	2200      	movs	r2, #0
 8006816:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800681a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800681e:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006822:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8006824:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006826:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006828:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006830:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 8006834:	bf18      	it	ne
 8006836:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006838:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800683a:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800683c:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006840:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006844:	f000 feec 	bl	8007620 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8006848:	45da      	cmp	sl, fp
 800684a:	d912      	bls.n	8006872 <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800684c:	4631      	mov	r1, r6
 800684e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006850:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006854:	f000 ff27 	bl	80076a6 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006858:	b190      	cbz	r0, 8006880 <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	4a56      	ldr	r2, [pc, #344]	; (80069b8 <HAL_SD_ReadBlocks+0x1f4>)
 800685e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006862:	4318      	orrs	r0, r3
 8006864:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006866:	2301      	movs	r3, #1
 8006868:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800686c:	2300      	movs	r3, #0
 800686e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8006870:	e7ca      	b.n	8006808 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006872:	4631      	mov	r1, r6
 8006874:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006876:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800687a:	f000 fefc 	bl	8007676 <SDMMC_CmdReadSingleBlock>
 800687e:	e7eb      	b.n	8006858 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 8006880:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006886:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800688a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800688c:	d017      	beq.n	80068be <HAL_SD_ReadBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800688e:	05db      	lsls	r3, r3, #23
 8006890:	d509      	bpl.n	80068a6 <HAL_SD_ReadBlocks+0xe2>
 8006892:	f1ba 0f01 	cmp.w	sl, #1
 8006896:	d906      	bls.n	80068a6 <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006898:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800689a:	2b03      	cmp	r3, #3
 800689c:	d003      	beq.n	80068a6 <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800689e:	f000 ff93 	bl	80077c8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d1d9      	bne.n	800685a <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068aa:	f011 0108 	ands.w	r1, r1, #8
 80068ae:	d036      	beq.n	800691e <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068b0:	4a41      	ldr	r2, [pc, #260]	; (80069b8 <HAL_SD_ReadBlocks+0x1f4>)
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068b6:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80068ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80068bc:	e7d3      	b.n	8006866 <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80068be:	041a      	lsls	r2, r3, #16
 80068c0:	d518      	bpl.n	80068f4 <HAL_SD_ReadBlocks+0x130>
 80068c2:	b1be      	cbz	r6, 80068f4 <HAL_SD_ReadBlocks+0x130>
 80068c4:	f105 0b04 	add.w	fp, r5, #4
 80068c8:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	f10b 0b04 	add.w	fp, fp, #4
 80068d2:	f000 fe7b 	bl	80075cc <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80068d6:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80068da:	0a02      	lsrs	r2, r0, #8
 80068dc:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80068e0:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80068e2:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80068e4:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80068e8:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 80068ec:	45d9      	cmp	r9, fp
 80068ee:	d1ed      	bne.n	80068cc <HAL_SD_ReadBlocks+0x108>
 80068f0:	3520      	adds	r5, #32
 80068f2:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80068f4:	f7fd f800 	bl	80038f8 <HAL_GetTick>
 80068f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068fa:	eba0 0008 	sub.w	r0, r0, r8
 80068fe:	4298      	cmp	r0, r3
 8006900:	d3bf      	bcc.n	8006882 <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006902:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8006904:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006906:	4a2c      	ldr	r2, [pc, #176]	; (80069b8 <HAL_SD_ReadBlocks+0x1f4>)
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800690a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800690c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006910:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006912:	2301      	movs	r3, #1
 8006914:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006918:	2300      	movs	r3, #0
 800691a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800691c:	e774      	b.n	8006808 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800691e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006920:	f012 0202 	ands.w	r2, r2, #2
 8006924:	d00a      	beq.n	800693c <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006926:	4a24      	ldr	r2, [pc, #144]	; (80069b8 <HAL_SD_ReadBlocks+0x1f4>)
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800692a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800692c:	f043 0302 	orr.w	r3, r3, #2
 8006930:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006932:	2301      	movs	r3, #1
 8006934:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006938:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800693a:	e765      	b.n	8006808 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800693c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800693e:	0689      	lsls	r1, r1, #26
 8006940:	d527      	bpl.n	8006992 <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006942:	491d      	ldr	r1, [pc, #116]	; (80069b8 <HAL_SD_ReadBlocks+0x1f4>)
 8006944:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006948:	f043 0320 	orr.w	r3, r3, #32
 800694c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800694e:	2301      	movs	r3, #1
 8006950:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006954:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006956:	e757      	b.n	8006808 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006958:	f000 fe38 	bl	80075cc <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 800695c:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006960:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 8006962:	3e04      	subs	r6, #4
 8006964:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006966:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800696a:	0c03      	lsrs	r3, r0, #16
 800696c:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006970:	0e03      	lsrs	r3, r0, #24
 8006972:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006976:	f7fc ffbf 	bl	80038f8 <HAL_GetTick>
 800697a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800697c:	eba0 0008 	sub.w	r0, r0, r8
 8006980:	4298      	cmp	r0, r3
 8006982:	d307      	bcc.n	8006994 <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <HAL_SD_ReadBlocks+0x1f4>)
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800698a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800698c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006990:	e793      	b.n	80068ba <HAL_SD_ReadBlocks+0xf6>
 8006992:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006994:	6820      	ldr	r0, [r4, #0]
 8006996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	d501      	bpl.n	80069a0 <HAL_SD_ReadBlocks+0x1dc>
 800699c:	2e00      	cmp	r6, #0
 800699e:	d1db      	bne.n	8006958 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069a0:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 80069a4:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069a6:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80069ae:	e72b      	b.n	8006808 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80069b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069b6:	e713      	b.n	80067e0 <HAL_SD_ReadBlocks+0x1c>
 80069b8:	004005ff 	.word	0x004005ff

080069bc <HAL_SD_WriteBlocks>:
{
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	460d      	mov	r5, r1
 80069c2:	b089      	sub	sp, #36	; 0x24
 80069c4:	4604      	mov	r4, r0
 80069c6:	4692      	mov	sl, r2
 80069c8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80069ca:	f7fc ff95 	bl	80038f8 <HAL_GetTick>
 80069ce:	4681      	mov	r9, r0
  if(NULL == pData)
 80069d0:	b935      	cbnz	r5, 80069e0 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 80069d8:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80069dc:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80069de:	e011      	b.n	8006a04 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 80069e0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	fa5f f883 	uxtb.w	r8, r3
 80069ea:	f040 80ac 	bne.w	8006b46 <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069ee:	eb0a 0307 	add.w	r3, sl, r7
 80069f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069f4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069f6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069f8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069fa:	d907      	bls.n	8006a0c <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80069fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a02:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006a04:	4640      	mov	r0, r8
 8006a06:	b009      	add	sp, #36	; 0x24
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8006a0c:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8006a0e:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8006a10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8006a16:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006a18:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a1a:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a20:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006a22:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8006a26:	bf18      	it	ne
 8006a28:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006a2c:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a34:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a36:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a38:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a3a:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a3c:	f000 fdf0 	bl	8007620 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8006a40:	2f01      	cmp	r7, #1
 8006a42:	d912      	bls.n	8006a6a <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006a44:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006a46:	4651      	mov	r1, sl
 8006a48:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006a4a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006a4c:	f000 fe5b 	bl	8007706 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a50:	b190      	cbz	r0, 8006a78 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	4a3e      	ldr	r2, [pc, #248]	; (8006b50 <HAL_SD_WriteBlocks+0x194>)
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006a58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a5a:	4318      	orrs	r0, r3
 8006a5c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006a68:	e7cc      	b.n	8006a04 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006a6a:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006a6c:	4651      	mov	r1, sl
 8006a6e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006a70:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006a72:	f000 fe30 	bl	80076d6 <SDMMC_CmdWriteSingleBlock>
 8006a76:	e7eb      	b.n	8006a50 <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 8006a78:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a7a:	6820      	ldr	r0, [r4, #0]
 8006a7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a7e:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006a82:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a84:	d016      	beq.n	8006ab4 <HAL_SD_WriteBlocks+0xf8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a86:	05db      	lsls	r3, r3, #23
 8006a88:	d508      	bpl.n	8006a9c <HAL_SD_WriteBlocks+0xe0>
 8006a8a:	2f01      	cmp	r7, #1
 8006a8c:	d906      	bls.n	8006a9c <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006a8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d003      	beq.n	8006a9c <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a94:	f000 fe98 	bl	80077c8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d1da      	bne.n	8006a52 <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006aa0:	f010 0008 	ands.w	r0, r0, #8
 8006aa4:	d029      	beq.n	8006afa <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa6:	4a2a      	ldr	r2, [pc, #168]	; (8006b50 <HAL_SD_WriteBlocks+0x194>)
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aac:	f043 0308 	orr.w	r3, r3, #8
 8006ab0:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ab2:	e7d4      	b.n	8006a5e <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006ab4:	045a      	lsls	r2, r3, #17
 8006ab6:	d50c      	bpl.n	8006ad2 <HAL_SD_WriteBlocks+0x116>
 8006ab8:	b15e      	cbz	r6, 8006ad2 <HAL_SD_WriteBlocks+0x116>
 8006aba:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006ac2:	a901      	add	r1, sp, #4
 8006ac4:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006ac6:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006ac8:	f000 fd83 	bl	80075d2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006acc:	45ab      	cmp	fp, r5
 8006ace:	d1f6      	bne.n	8006abe <HAL_SD_WriteBlocks+0x102>
 8006ad0:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006ad2:	f7fc ff11 	bl	80038f8 <HAL_GetTick>
 8006ad6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ad8:	eba0 0009 	sub.w	r0, r0, r9
 8006adc:	4298      	cmp	r0, r3
 8006ade:	d3cc      	bcc.n	8006a7a <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae0:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8006ae2:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae6:	4a1a      	ldr	r2, [pc, #104]	; (8006b50 <HAL_SD_WriteBlocks+0x194>)
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aec:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8006af8:	e784      	b.n	8006a04 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006afa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006afc:	f011 0102 	ands.w	r1, r1, #2
 8006b00:	d00a      	beq.n	8006b18 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b02:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <HAL_SD_WriteBlocks+0x194>)
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b14:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006b16:	e775      	b.n	8006a04 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b1a:	f012 0210 	ands.w	r2, r2, #16
 8006b1e:	d00a      	beq.n	8006b36 <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b20:	4a0b      	ldr	r2, [pc, #44]	; (8006b50 <HAL_SD_WriteBlocks+0x194>)
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b26:	f043 0310 	orr.w	r3, r3, #16
 8006b2a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b32:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006b34:	e766      	b.n	8006a04 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b36:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 8006b3a:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b3c:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006b44:	e75e      	b.n	8006a04 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b4c:	e744      	b.n	80069d8 <HAL_SD_WriteBlocks+0x1c>
 8006b4e:	bf00      	nop
 8006b50:	004005ff 	.word	0x004005ff

08006b54 <HAL_SD_Erase>:
{
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsd->State == HAL_SD_STATE_READY)
 8006b56:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	460e      	mov	r6, r1
 8006b5e:	4615      	mov	r5, r2
  if(hsd->State == HAL_SD_STATE_READY)
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	b2df      	uxtb	r7, r3
 8006b64:	d151      	bne.n	8006c0a <HAL_SD_Erase+0xb6>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b66:	2100      	movs	r1, #0
    if(end_add < start_add)
 8006b68:	4296      	cmp	r6, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b6a:	6381      	str	r1, [r0, #56]	; 0x38
    if(end_add < start_add)
 8006b6c:	d905      	bls.n	8006b7a <HAL_SD_Erase+0x26>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b74:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006b76:	4638      	mov	r0, r7
 8006b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(end_add > (hsd->SdCard.LogBlockNbr))
 8006b7a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d203      	bcs.n	8006b88 <HAL_SD_Erase+0x34>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b86:	e7f5      	b.n	8006b74 <HAL_SD_Erase+0x20>
    hsd->State = HAL_SD_STATE_BUSY;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 8006b8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b90:	6800      	ldr	r0, [r0, #0]
 8006b92:	069a      	lsls	r2, r3, #26
 8006b94:	d408      	bmi.n	8006ba8 <HAL_SD_Erase+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b96:	4b1e      	ldr	r3, [pc, #120]	; (8006c10 <HAL_SD_Erase+0xbc>)
 8006b98:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ba0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ba2:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      return HAL_ERROR;
 8006ba6:	e7e6      	b.n	8006b76 <HAL_SD_Erase+0x22>
    if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ba8:	f000 fd37 	bl	800761a <SDMMC_GetResponse>
 8006bac:	0183      	lsls	r3, r0, #6
 8006bae:	d506      	bpl.n	8006bbe <HAL_SD_Erase+0x6a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <HAL_SD_Erase+0xbc>)
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bbc:	e7f0      	b.n	8006ba0 <HAL_SD_Erase+0x4c>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d003      	beq.n	8006bcc <HAL_SD_Erase+0x78>
    if(hsd->SdCard.CardType != CARD_SECURED)
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d016      	beq.n	8006bf6 <HAL_SD_Erase+0xa2>
      start_add *= 512U;
 8006bc8:	0276      	lsls	r6, r6, #9
      end_add   *= 512U;
 8006bca:	026d      	lsls	r5, r5, #9
      errorstate = SDMMC_CmdSDEraseStartAdd(hsd->Instance, start_add);
 8006bcc:	4631      	mov	r1, r6
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	f000 fdb1 	bl	8007736 <SDMMC_CmdSDEraseStartAdd>
      if(errorstate != HAL_SD_ERROR_NONE)
 8006bd4:	b148      	cbz	r0, 8006bea <HAL_SD_Erase+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <HAL_SD_Erase+0xbc>)
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bde:	4318      	orrs	r0, r3
      hsd->State = HAL_SD_STATE_READY;
 8006be0:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 8006be2:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006be4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8006be8:	e7c5      	b.n	8006b76 <HAL_SD_Erase+0x22>
      errorstate = SDMMC_CmdSDEraseEndAdd(hsd->Instance, end_add);
 8006bea:	4629      	mov	r1, r5
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	f000 fdba 	bl	8007766 <SDMMC_CmdSDEraseEndAdd>
      if(errorstate != HAL_SD_ERROR_NONE)
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d1ef      	bne.n	8006bd6 <HAL_SD_Erase+0x82>
    errorstate = SDMMC_CmdErase(hsd->Instance);
 8006bf6:	6820      	ldr	r0, [r4, #0]
 8006bf8:	f000 fdcd 	bl	8007796 <SDMMC_CmdErase>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d1ea      	bne.n	8006bd6 <HAL_SD_Erase+0x82>
    hsd->State = HAL_SD_STATE_READY;
 8006c00:	2301      	movs	r3, #1
    return HAL_OK;
 8006c02:	4607      	mov	r7, r0
    hsd->State = HAL_SD_STATE_READY;
 8006c04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006c08:	e7b5      	b.n	8006b76 <HAL_SD_Erase+0x22>
    return HAL_BUSY;
 8006c0a:	2702      	movs	r7, #2
 8006c0c:	e7b3      	b.n	8006b76 <HAL_SD_Erase+0x22>
 8006c0e:	bf00      	nop
 8006c10:	004005ff 	.word	0x004005ff

08006c14 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c14:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c16:	0f9a      	lsrs	r2, r3, #30
 8006c18:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c1a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8006c1e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c20:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006c24:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c26:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006c2a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c30:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c32:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c34:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c36:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006c38:	0d1a      	lsrs	r2, r3, #20
 8006c3a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c3c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8006c40:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c42:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006c46:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c48:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006c4c:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006c4e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8006c52:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c54:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006c58:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8006c60:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d16b      	bne.n	8006d3e <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c66:	f640 74fc 	movw	r4, #4092	; 0xffc
 8006c6a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006c6c:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8006c70:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006c74:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c76:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8006c7a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c7c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8006c80:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c82:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8006c86:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c88:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c8c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c90:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c92:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c94:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006c96:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c98:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006c9a:	f002 0207 	and.w	r2, r2, #7
 8006c9e:	3202      	adds	r2, #2
 8006ca0:	4093      	lsls	r3, r2
 8006ca2:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ca4:	7a0a      	ldrb	r2, [r1, #8]
 8006ca6:	f002 040f 	and.w	r4, r2, #15
 8006caa:	2201      	movs	r2, #1
 8006cac:	40a2      	lsls	r2, r4
 8006cae:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006cb0:	0a52      	lsrs	r2, r2, #9
 8006cb2:	4353      	muls	r3, r2
 8006cb4:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006cba:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006cbc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006cbe:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006cc2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006cc4:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ccc:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006cce:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006cd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 8006cd2:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006cd4:	0fda      	lsrs	r2, r3, #31
 8006cd6:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006cd8:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8006cdc:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006cde:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006ce2:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ce4:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8006ce8:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006cea:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006cee:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cf2:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8006cf6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cfa:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006cfe:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006d02:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006d06:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006d0a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d0e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8006d12:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d16:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006d1a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d1e:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8006d22:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d26:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d2a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d2e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d32:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8006d3c:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006d3e:	2a01      	cmp	r2, #1
 8006d40:	d10f      	bne.n	8006d62 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006d48:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d50:	690b      	ldr	r3, [r1, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	029b      	lsls	r3, r3, #10
 8006d56:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d58:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d5e:	6583      	str	r3, [r0, #88]	; 0x58
 8006d60:	e7ab      	b.n	8006cba <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d62:	6803      	ldr	r3, [r0, #0]
 8006d64:	4a05      	ldr	r2, [pc, #20]	; (8006d7c <HAL_SD_GetCardCSD+0x168>)
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006d76:	4618      	mov	r0, r3
 8006d78:	e7e0      	b.n	8006d3c <HAL_SD_GetCardCSD+0x128>
 8006d7a:	bf00      	nop
 8006d7c:	004005ff 	.word	0x004005ff

08006d80 <HAL_SD_InitCard>:
{
 8006d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d84:	2300      	movs	r3, #0
{
 8006d86:	b098      	sub	sp, #96	; 0x60
 8006d88:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d8a:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d8c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006d90:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006d94:	2376      	movs	r3, #118	; 0x76
 8006d96:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8006d98:	ab0a      	add	r3, sp, #40	; 0x28
 8006d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d9e:	ab07      	add	r3, sp, #28
 8006da0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006da8:	f000 fbf4 	bl	8007594 <SDMMC_Init>
  if(status != HAL_OK)
 8006dac:	4605      	mov	r5, r0
 8006dae:	bb50      	cbnz	r0, 8006e06 <HAL_SD_InitCard+0x86>
  __HAL_SD_DISABLE(hsd);
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	6843      	ldr	r3, [r0, #4]
 8006db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db8:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006dba:	f000 fc0f 	bl	80075dc <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8006dbe:	6820      	ldr	r0, [r4, #0]
 8006dc0:	6843      	ldr	r3, [r0, #4]
 8006dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc6:	6043      	str	r3, [r0, #4]
  __IO uint32_t count = 0U;
 8006dc8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dca:	f000 fd2f 	bl	800782c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dce:	4605      	mov	r5, r0
 8006dd0:	b998      	cbnz	r0, 8006dfa <HAL_SD_InitCard+0x7a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	f000 fd50 	bl	8007878 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dd8:	b130      	cbz	r0, 8006de8 <HAL_SD_InitCard+0x68>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dda:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ddc:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dde:	f000 fd25 	bl	800782c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006de2:	b190      	cbz	r0, 8006e0a <HAL_SD_InitCard+0x8a>
 8006de4:	4605      	mov	r5, r0
 8006de6:	e008      	b.n	8006dfa <HAL_SD_InitCard+0x7a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006de8:	2301      	movs	r3, #1
 8006dea:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006dec:	2100      	movs	r1, #0
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	f000 fd7e 	bl	80078f0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006df4:	b160      	cbz	r0, 8006e10 <HAL_SD_InitCard+0x90>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006df6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e02:	432b      	orrs	r3, r5
 8006e04:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006e06:	2501      	movs	r5, #1
 8006e08:	e0b3      	b.n	8006f72 <HAL_SD_InitCard+0x1f2>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d0ed      	beq.n	8006dec <HAL_SD_InitCard+0x6c>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e10:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 8006e14:	2100      	movs	r1, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e16:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8006f80 <HAL_SD_InitCard+0x200>
 8006e1a:	4637      	mov	r7, r6
 8006e1c:	e014      	b.n	8006e48 <HAL_SD_InitCard+0xc8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	f000 fd66 	bl	80078f0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e24:	4605      	mov	r5, r0
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1e7      	bne.n	8006dfa <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	f000 fd77 	bl	8007920 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d1df      	bne.n	8006df6 <HAL_SD_InitCard+0x76>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e36:	4629      	mov	r1, r5
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	f000 fbee 	bl	800761a <SDMMC_GetResponse>
    count++;
 8006e3e:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e40:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e42:	0fc1      	lsrs	r1, r0, #31
    count++;
 8006e44:	3301      	adds	r3, #1
 8006e46:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	42b3      	cmp	r3, r6
 8006e4c:	d801      	bhi.n	8006e52 <HAL_SD_InitCard+0xd2>
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	d0e5      	beq.n	8006e1e <HAL_SD_InitCard+0x9e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	42bb      	cmp	r3, r7
 8006e56:	d80c      	bhi.n	8006e72 <HAL_SD_InitCard+0xf2>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e58:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8006e5c:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8006e62:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e66:	f000 fbc1 	bl	80075ec <SDMMC_GetPowerState>
 8006e6a:	b928      	cbnz	r0, 8006e78 <HAL_SD_InitCard+0xf8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006e70:	e079      	b.n	8006f66 <HAL_SD_InitCard+0x1e6>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e72:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8006e76:	e7c0      	b.n	8006dfa <HAL_SD_InitCard+0x7a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d043      	beq.n	8006f06 <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e7e:	6820      	ldr	r0, [r4, #0]
 8006e80:	f000 fd97 	bl	80079b2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d16e      	bne.n	8006f66 <HAL_SD_InitCard+0x1e6>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e88:	4601      	mov	r1, r0
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f000 fbc5 	bl	800761a <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e90:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e92:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	f000 fbc0 	bl	800761a <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e9a:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e9c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e9e:	6820      	ldr	r0, [r4, #0]
 8006ea0:	f000 fbbb 	bl	800761a <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ea4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ea6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	f000 fbb6 	bl	800761a <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006eb0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d026      	beq.n	8006f06 <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006eb8:	f10d 0116 	add.w	r1, sp, #22
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	f000 fda3 	bl	8007a08 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d14f      	bne.n	8006f66 <HAL_SD_InitCard+0x1e6>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d01b      	beq.n	8006f06 <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ece:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8006ed2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed4:	0409      	lsls	r1, r1, #16
 8006ed6:	f000 fd81 	bl	80079dc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d143      	bne.n	8006f66 <HAL_SD_InitCard+0x1e6>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ede:	4601      	mov	r1, r0
 8006ee0:	6820      	ldr	r0, [r4, #0]
 8006ee2:	f000 fb9a 	bl	800761a <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ee6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ee8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	f000 fb95 	bl	800761a <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ef0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ef2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	f000 fb90 	bl	800761a <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006efa:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006efc:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006efe:	6820      	ldr	r0, [r4, #0]
 8006f00:	f000 fb8b 	bl	800761a <SDMMC_GetResponse>
 8006f04:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f06:	2104      	movs	r1, #4
 8006f08:	6820      	ldr	r0, [r4, #0]
 8006f0a:	f000 fb86 	bl	800761a <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f0e:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f10:	0d00      	lsrs	r0, r0, #20
 8006f12:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7ff fe7d 	bl	8006c14 <HAL_SD_GetCardCSD>
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	bb08      	cbnz	r0, 8006f62 <HAL_SD_InitCard+0x1e2>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006f20:	4603      	mov	r3, r0
 8006f22:	6820      	ldr	r0, [r4, #0]
 8006f24:	0412      	lsls	r2, r2, #16
 8006f26:	f000 fc69 	bl	80077fc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f2a:	b9e0      	cbnz	r0, 8006f66 <HAL_SD_InitCard+0x1e6>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006f2c:	f104 0310 	add.w	r3, r4, #16
 8006f30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f34:	1d23      	adds	r3, r4, #4
 8006f36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f3e:	f000 fb29 	bl	8007594 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f46:	6820      	ldr	r0, [r4, #0]
 8006f48:	f000 fb7d 	bl	8007646 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f4c:	b188      	cbz	r0, 8006f72 <HAL_SD_InitCard+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f4e:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8006f50:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_SD_InitCard+0x1fc>)
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f58:	4318      	orrs	r0, r3
 8006f5a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f5c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006f60:	e007      	b.n	8006f72 <HAL_SD_InitCard+0x1f2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8006f66:	2501      	movs	r5, #1
 8006f68:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f6e:	4301      	orrs	r1, r0
 8006f70:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8006f72:	4628      	mov	r0, r5
 8006f74:	b018      	add	sp, #96	; 0x60
 8006f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7a:	bf00      	nop
 8006f7c:	004005ff 	.word	0x004005ff
 8006f80:	c1100000 	.word	0xc1100000

08006f84 <HAL_SD_Init>:
{
 8006f84:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8006f86:	4604      	mov	r4, r0
 8006f88:	b908      	cbnz	r0, 8006f8e <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8006f8a:	2001      	movs	r0, #1
}
 8006f8c:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8006f8e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006f92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f96:	b913      	cbnz	r3, 8006f9e <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8006f98:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8006f9a:	f7ff fc12 	bl	80067c2 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8006f9e:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006fa0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8006fa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006fa6:	f7ff feeb 	bl	8006d80 <HAL_SD_InitCard>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d1ed      	bne.n	8006f8a <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8006fae:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fb0:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006fb2:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006fb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006fb8:	e7e8      	b.n	8006f8c <HAL_SD_Init+0x8>
	...

08006fbc <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8006fbc:	2303      	movs	r3, #3
{
 8006fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8006fc0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8006fc4:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d002      	beq.n	8006fd6 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006fd0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006fd4:	d103      	bne.n	8006fde <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	e065      	b.n	80070aa <HAL_SD_ConfigWideBusOperation+0xee>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006fde:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	d13c      	bne.n	8007060 <HAL_SD_ConfigWideBusOperation+0xa4>
  uint32_t scr[2U] = {0U, 0U};
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fec:	f000 fb15 	bl	800761a <SDMMC_GetResponse>
 8006ff0:	0180      	lsls	r0, r0, #6
 8006ff2:	d430      	bmi.n	8007056 <HAL_SD_ConfigWideBusOperation+0x9a>
  errorstate = SD_FindSCR(hsd, scr);
 8006ff4:	a904      	add	r1, sp, #16
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7ff fb7d 	bl	80066f6 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ffc:	b960      	cbnz	r0, 8007018 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ffe:	9b05      	ldr	r3, [sp, #20]
 8007000:	0359      	lsls	r1, r3, #13
 8007002:	d52a      	bpl.n	800705a <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007004:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007006:	6820      	ldr	r0, [r4, #0]
 8007008:	0409      	lsls	r1, r1, #16
 800700a:	f000 fc71 	bl	80078f0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800700e:	b918      	cbnz	r0, 8007018 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007010:	2102      	movs	r1, #2
 8007012:	6820      	ldr	r0, [r4, #0]
 8007014:	f000 fc9d 	bl	8007952 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8007018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800701a:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800701c:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800701e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007020:	6827      	ldr	r7, [r4, #0]
 8007022:	2e00      	cmp	r6, #0
 8007024:	d043      	beq.n	80070ae <HAL_SD_ConfigWideBusOperation+0xf2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007026:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <HAL_SD_ConfigWideBusOperation+0x120>)
    hsd->State = HAL_SD_STATE_READY;
 8007028:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800702c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	f000 fb06 	bl	8007646 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800703a:	b130      	cbz	r0, 800704a <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800703c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800703e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007040:	4a26      	ldr	r2, [pc, #152]	; (80070dc <HAL_SD_ConfigWideBusOperation+0x120>)
 8007042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007046:	4318      	orrs	r0, r3
 8007048:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800704a:	2301      	movs	r3, #1
}
 800704c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800704e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8007052:	b00b      	add	sp, #44	; 0x2c
 8007054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007056:	4628      	mov	r0, r5
 8007058:	e7de      	b.n	8007018 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800705a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800705e:	e7db      	b.n	8007018 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007060:	bb01      	cbnz	r1, 80070a4 <HAL_SD_ConfigWideBusOperation+0xe8>
  uint32_t scr[2U] = {0U, 0U};
 8007062:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007066:	f000 fad8 	bl	800761a <SDMMC_GetResponse>
 800706a:	0182      	lsls	r2, r0, #6
 800706c:	d414      	bmi.n	8007098 <HAL_SD_ConfigWideBusOperation+0xdc>
  errorstate = SD_FindSCR(hsd, scr);
 800706e:	a904      	add	r1, sp, #16
 8007070:	4620      	mov	r0, r4
 8007072:	f7ff fb40 	bl	80066f6 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007076:	b960      	cbnz	r0, 8007092 <HAL_SD_ConfigWideBusOperation+0xd6>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007078:	9b05      	ldr	r3, [sp, #20]
 800707a:	03db      	lsls	r3, r3, #15
 800707c:	d50f      	bpl.n	800709e <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800707e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	0409      	lsls	r1, r1, #16
 8007084:	f000 fc34 	bl	80078f0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007088:	b918      	cbnz	r0, 8007092 <HAL_SD_ConfigWideBusOperation+0xd6>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800708a:	4601      	mov	r1, r0
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	f000 fc60 	bl	8007952 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8007092:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007094:	4308      	orrs	r0, r1
 8007096:	e7c1      	b.n	800701c <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007098:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800709c:	e7f9      	b.n	8007092 <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800709e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80070a2:	e7f6      	b.n	8007092 <HAL_SD_ConfigWideBusOperation+0xd6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80070ac:	e7b7      	b.n	800701e <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80070b6:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80070b8:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80070bc:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80070c0:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80070c2:	69a3      	ldr	r3, [r4, #24]
 80070c4:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 80070c6:	ab0a      	add	r3, sp, #40	; 0x28
 80070c8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80070cc:	ab04      	add	r3, sp, #16
 80070ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80070d2:	4638      	mov	r0, r7
 80070d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070d6:	f000 fa5d 	bl	8007594 <SDMMC_Init>
 80070da:	e7a9      	b.n	8007030 <HAL_SD_ConfigWideBusOperation+0x74>
 80070dc:	004005ff 	.word	0x004005ff

080070e0 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070e0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80070e2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070e4:	0409      	lsls	r1, r1, #16
{
 80070e6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070e8:	6800      	ldr	r0, [r0, #0]
 80070ea:	f000 fcdf 	bl	8007aac <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ee:	b930      	cbnz	r0, 80070fe <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80070f0:	4601      	mov	r1, r0
 80070f2:	6820      	ldr	r0, [r4, #0]
 80070f4:	f000 fa91 	bl	800761a <SDMMC_GetResponse>
}
 80070f8:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80070fc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80070fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007100:	4308      	orrs	r0, r1
 8007102:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8007104:	2000      	movs	r0, #0
 8007106:	e7f7      	b.n	80070f8 <HAL_SD_GetCardState+0x18>

08007108 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007108:	4770      	bx	lr

0800710a <HAL_SDRAM_Init>:
{   
 800710a:	b538      	push	{r3, r4, r5, lr}
 800710c:	460d      	mov	r5, r1
  if(hsdram == NULL)
 800710e:	4604      	mov	r4, r0
 8007110:	b1c8      	cbz	r0, 8007146 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007112:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007116:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800711a:	b91b      	cbnz	r3, 8007124 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800711c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007120:	f7ff fff2 	bl	8007108 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007124:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007126:	1d21      	adds	r1, r4, #4
 8007128:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800712a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800712e:	f000 f8c7 	bl	80072c0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	4629      	mov	r1, r5
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	f000 f8f8 	bl	800732c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800713c:	2301      	movs	r3, #1
  return HAL_OK;
 800713e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007140:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007144:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007146:	2001      	movs	r0, #1
 8007148:	e7fc      	b.n	8007144 <HAL_SDRAM_Init+0x3a>

0800714a <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 800714a:	b530      	push	{r4, r5, lr}
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800714c:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
 8007150:	2c01      	cmp	r4, #1
 8007152:	d101      	bne.n	8007158 <HAL_SDRAM_Read_32b+0xe>
 8007154:	2002      	movs	r0, #2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
  
  return HAL_OK; 
}
 8007156:	bd30      	pop	{r4, r5, pc}
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007158:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hsdram);
 800715c:	2401      	movs	r4, #1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800715e:	2d02      	cmp	r5, #2
  __HAL_LOCK(hsdram);
 8007160:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007164:	d0f6      	beq.n	8007154 <HAL_SDRAM_Read_32b+0xa>
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8007166:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800716a:	2d05      	cmp	r5, #5
 800716c:	d00d      	beq.n	800718a <HAL_SDRAM_Read_32b+0x40>
 800716e:	2400      	movs	r4, #0
  for(; BufferSize != 0; BufferSize--)
 8007170:	42a3      	cmp	r3, r4
 8007172:	d104      	bne.n	800717e <HAL_SDRAM_Read_32b+0x34>
  __HAL_UNLOCK(hsdram);       
 8007174:	2300      	movs	r3, #0
 8007176:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  return HAL_OK; 
 800717a:	4618      	mov	r0, r3
 800717c:	e7eb      	b.n	8007156 <HAL_SDRAM_Read_32b+0xc>
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 800717e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8007182:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  for(; BufferSize != 0; BufferSize--)
 8007186:	3401      	adds	r4, #1
 8007188:	e7f2      	b.n	8007170 <HAL_SDRAM_Read_32b+0x26>
    return  HAL_ERROR; 
 800718a:	4620      	mov	r0, r4
 800718c:	e7e3      	b.n	8007156 <HAL_SDRAM_Read_32b+0xc>

0800718e <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 800718e:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
  uint32_t tmp = 0;
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007190:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
 8007194:	2c01      	cmp	r4, #1
 8007196:	d101      	bne.n	800719c <HAL_SDRAM_Write_32b+0xe>
 8007198:	2002      	movs	r0, #2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
  
  return HAL_OK;  
}
 800719a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hsdram->State;
 800719c:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hsdram);
 80071a0:	2401      	movs	r4, #1
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80071a2:	2e02      	cmp	r6, #2
  tmp = hsdram->State;
 80071a4:	b2f5      	uxtb	r5, r6
  __HAL_LOCK(hsdram);
 80071a6:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80071aa:	d0f5      	beq.n	8007198 <HAL_SDRAM_Write_32b+0xa>
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80071ac:	3d04      	subs	r5, #4
 80071ae:	42a5      	cmp	r5, r4
 80071b0:	d90d      	bls.n	80071ce <HAL_SDRAM_Write_32b+0x40>
 80071b2:	2400      	movs	r4, #0
  for(; BufferSize != 0; BufferSize--)
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	d104      	bne.n	80071c2 <HAL_SDRAM_Write_32b+0x34>
  __HAL_UNLOCK(hsdram);    
 80071b8:	2300      	movs	r3, #0
 80071ba:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  return HAL_OK;  
 80071be:	4618      	mov	r0, r3
 80071c0:	e7eb      	b.n	800719a <HAL_SDRAM_Write_32b+0xc>
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80071c2:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80071c6:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
  for(; BufferSize != 0; BufferSize--)
 80071ca:	3401      	adds	r4, #1
 80071cc:	e7f2      	b.n	80071b4 <HAL_SDRAM_Write_32b+0x26>
    return  HAL_ERROR; 
 80071ce:	4620      	mov	r0, r4
 80071d0:	e7e3      	b.n	800719a <HAL_SDRAM_Write_32b+0xc>
	...

080071d4 <HAL_SDRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	4605      	mov	r5, r0
  uint32_t tmp = 0;
    
  /* Process Locked */
  __HAL_LOCK(hsdram);
 80071d8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80071dc:	2801      	cmp	r0, #1
 80071de:	d101      	bne.n	80071e4 <HAL_SDRAM_Read_DMA+0x10>
 80071e0:	2002      	movs	r0, #2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);  
  
  return HAL_OK; 
}
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hsdram->State;
 80071e4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
  __HAL_LOCK(hsdram);
 80071e8:	2401      	movs	r4, #1
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80071ea:	2802      	cmp	r0, #2
  tmp = hsdram->State;
 80071ec:	b2c6      	uxtb	r6, r0
  __HAL_LOCK(hsdram);
 80071ee:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80071f2:	d0f5      	beq.n	80071e0 <HAL_SDRAM_Read_DMA+0xc>
  else if(tmp == HAL_SDRAM_STATE_PRECHARGED)
 80071f4:	2e05      	cmp	r6, #5
 80071f6:	d00b      	beq.n	8007210 <HAL_SDRAM_Read_DMA+0x3c>
  hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 80071f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80071fa:	4c06      	ldr	r4, [pc, #24]	; (8007214 <HAL_SDRAM_Read_DMA+0x40>)
 80071fc:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 80071fe:	4c06      	ldr	r4, [pc, #24]	; (8007218 <HAL_SDRAM_Read_DMA+0x44>)
 8007200:	64c4      	str	r4, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8007202:	f7fc fccd 	bl	8003ba0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hsdram);  
 8007206:	2300      	movs	r3, #0
  return HAL_OK; 
 8007208:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsdram);  
 800720a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  return HAL_OK; 
 800720e:	e7e8      	b.n	80071e2 <HAL_SDRAM_Read_DMA+0xe>
    return  HAL_ERROR; 
 8007210:	4620      	mov	r0, r4
 8007212:	e7e6      	b.n	80071e2 <HAL_SDRAM_Read_DMA+0xe>
 8007214:	08009be9 	.word	0x08009be9
 8007218:	08009bf9 	.word	0x08009bf9

0800721c <HAL_SDRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	460e      	mov	r6, r1
 8007220:	4611      	mov	r1, r2
  uint32_t tmp = 0;
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8007222:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
{
 8007226:	4605      	mov	r5, r0
  __HAL_LOCK(hsdram);
 8007228:	2a01      	cmp	r2, #1
 800722a:	d101      	bne.n	8007230 <HAL_SDRAM_Write_DMA+0x14>
 800722c:	2002      	movs	r0, #2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);
  
  return HAL_OK;
}
 800722e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hsdram);
 8007230:	2401      	movs	r4, #1
 8007232:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  tmp = hsdram->State;
 8007236:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  if(tmp == HAL_SDRAM_STATE_BUSY)
 800723a:	2802      	cmp	r0, #2
  tmp = hsdram->State;
 800723c:	b2c2      	uxtb	r2, r0
  if(tmp == HAL_SDRAM_STATE_BUSY)
 800723e:	d0f5      	beq.n	800722c <HAL_SDRAM_Write_DMA+0x10>
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8007240:	3a04      	subs	r2, #4
 8007242:	42a2      	cmp	r2, r4
 8007244:	d90c      	bls.n	8007260 <HAL_SDRAM_Write_DMA+0x44>
  hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 8007246:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007248:	4a06      	ldr	r2, [pc, #24]	; (8007264 <HAL_SDRAM_Write_DMA+0x48>)
 800724a:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 800724c:	4a06      	ldr	r2, [pc, #24]	; (8007268 <HAL_SDRAM_Write_DMA+0x4c>)
 800724e:	64c2      	str	r2, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8007250:	4632      	mov	r2, r6
 8007252:	f7fc fca5 	bl	8003ba0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hsdram);
 8007256:	2300      	movs	r3, #0
  return HAL_OK;
 8007258:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsdram);
 800725a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  return HAL_OK;
 800725e:	e7e6      	b.n	800722e <HAL_SDRAM_Write_DMA+0x12>
    return  HAL_ERROR; 
 8007260:	4620      	mov	r0, r4
 8007262:	e7e4      	b.n	800722e <HAL_SDRAM_Write_DMA+0x12>
 8007264:	08009be9 	.word	0x08009be9
 8007268:	08009bf9 	.word	0x08009bf9

0800726c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800726c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800726e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007276:	2b02      	cmp	r3, #2
 8007278:	b2d8      	uxtb	r0, r3
 800727a:	d00d      	beq.n	8007298 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800727c:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800727e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007280:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007284:	f000 f895 	bl	80073b2 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007288:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800728a:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800728c:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800728e:	bf0c      	ite	eq
 8007290:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007292:	2301      	movne	r3, #1
 8007294:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007298:	bd38      	pop	{r3, r4, r5, pc}

0800729a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800729a:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800729c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80072a0:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	b2d8      	uxtb	r0, r3
 80072a6:	d009      	beq.n	80072bc <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072a8:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80072aa:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80072b0:	f000 f891 	bl	80073d6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80072b4:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80072b6:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80072b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80072bc:	bd10      	pop	{r4, pc}
	...

080072c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80072c6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80072ca:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80072ce:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80072d2:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80072d6:	6809      	ldr	r1, [r1, #0]
 80072d8:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072da:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80072dc:	2901      	cmp	r1, #1
 80072de:	4912      	ldr	r1, [pc, #72]	; (8007328 <FMC_SDRAM_Init+0x68>)
 80072e0:	d00f      	beq.n	8007302 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072e2:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80072e4:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072e6:	432a      	orrs	r2, r5
 80072e8:	ea42 0308 	orr.w	r3, r2, r8
 80072ec:	ea43 030e 	orr.w	r3, r3, lr
 80072f0:	ea43 030c 	orr.w	r3, r3, ip
 80072f4:	433b      	orrs	r3, r7
 80072f6:	4333      	orrs	r3, r6
 80072f8:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072fa:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80072fc:	2000      	movs	r0, #0
 80072fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007302:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007304:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007306:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800730a:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800730c:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007310:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007312:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007316:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007318:	ea42 020c 	orr.w	r2, r2, ip
 800731c:	433a      	orrs	r2, r7
 800731e:	4332      	orrs	r2, r6
 8007320:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007322:	6042      	str	r2, [r0, #4]
 8007324:	e7ea      	b.n	80072fc <FMC_SDRAM_Init+0x3c>
 8007326:	bf00      	nop
 8007328:	ffff8000 	.word	0xffff8000

0800732c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800732c:	68cb      	ldr	r3, [r1, #12]
 800732e:	2a01      	cmp	r2, #1
{
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	680c      	ldr	r4, [r1, #0]
 8007334:	f103 37ff 	add.w	r7, r3, #4294967295
 8007338:	694b      	ldr	r3, [r1, #20]
 800733a:	688e      	ldr	r6, [r1, #8]
 800733c:	f104 3cff 	add.w	ip, r4, #4294967295
 8007340:	690d      	ldr	r5, [r1, #16]
 8007342:	f103 33ff 	add.w	r3, r3, #4294967295
 8007346:	684c      	ldr	r4, [r1, #4]
 8007348:	f106 36ff 	add.w	r6, r6, #4294967295
 800734c:	6989      	ldr	r1, [r1, #24]
 800734e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8007352:	f104 34ff 	add.w	r4, r4, #4294967295
 8007356:	f105 35ff 	add.w	r5, r5, #4294967295
 800735a:	f101 31ff 	add.w	r1, r1, #4294967295
 800735e:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8007362:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8007366:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800736a:	ea4f 6101 	mov.w	r1, r1, lsl #24
 800736e:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8007372:	d00c      	beq.n	800738e <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007374:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007378:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800737a:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800737c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007380:	4333      	orrs	r3, r6
 8007382:	432b      	orrs	r3, r5
 8007384:	430b      	orrs	r3, r1
 8007386:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007388:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800738a:	2000      	movs	r0, #0
 800738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800738e:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007390:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007392:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007396:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800739a:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800739e:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80073a0:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80073a2:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073a4:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80073a6:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073aa:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073ac:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80073ae:	60c2      	str	r2, [r0, #12]
 80073b0:	e7eb      	b.n	800738a <FMC_SDRAM_Timing_Init+0x5e>

080073b2 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80073b2:	6902      	ldr	r2, [r0, #16]
{ 
 80073b4:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80073b6:	e9d1 3400 	ldrd	r3, r4, [r1]
 80073ba:	0d92      	lsrs	r2, r2, #22
 80073bc:	4323      	orrs	r3, r4
 80073be:	68cc      	ldr	r4, [r1, #12]
 80073c0:	0592      	lsls	r2, r2, #22
 80073c2:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80073c6:	4313      	orrs	r3, r2
 80073c8:	688a      	ldr	r2, [r1, #8]
 80073ca:	3a01      	subs	r2, #1
 80073cc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80073d0:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 80073d2:	2000      	movs	r0, #0
 80073d4:	bd10      	pop	{r4, pc}

080073d6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80073d6:	6943      	ldr	r3, [r0, #20]
 80073d8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80073dc:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80073de:	2000      	movs	r0, #0
 80073e0:	4770      	bx	lr
	...

080073e4 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <SDMMC_GetCmdResp2+0x48>)
 80073e6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80073ea:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	fbb3 f1f1 	udiv	r1, r3, r1
 80073f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80073f6:	434b      	muls	r3, r1
  
  do
  {
    if (count-- == 0U)
 80073f8:	3b01      	subs	r3, #1
 80073fa:	d313      	bcc.n	8007424 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80073fc:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073fe:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007402:	d0f9      	beq.n	80073f8 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007404:	0509      	lsls	r1, r1, #20
 8007406:	d4f7      	bmi.n	80073f8 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007408:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800740a:	075b      	lsls	r3, r3, #29
 800740c:	d502      	bpl.n	8007414 <SDMMC_GetCmdResp2+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800740e:	2004      	movs	r0, #4
 8007410:	6390      	str	r0, [r2, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007412:	4770      	bx	lr
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007414:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8007416:	f010 0001 	ands.w	r0, r0, #1
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800741a:	bf14      	ite	ne
 800741c:	2301      	movne	r3, #1
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800741e:	23c5      	moveq	r3, #197	; 0xc5
 8007420:	6393      	str	r3, [r2, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007422:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007424:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	200000a0 	.word	0x200000a0

08007430 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <SDMMC_GetCmdResp3+0x40>)
 8007432:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8007436:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	fbb3 f1f1 	udiv	r1, r3, r1
 800743e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007442:	434b      	muls	r3, r1
  
  do
  {
    if (count-- == 0U)
 8007444:	3b01      	subs	r3, #1
 8007446:	d30f      	bcc.n	8007468 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007448:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800744a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800744e:	d0f9      	beq.n	8007444 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007450:	0509      	lsls	r1, r1, #20
 8007452:	d4f7      	bmi.n	8007444 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007454:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8007456:	f010 0004 	ands.w	r0, r0, #4
 800745a:	d002      	beq.n	8007462 <SDMMC_GetCmdResp3+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800745c:	2004      	movs	r0, #4
 800745e:	6390      	str	r0, [r2, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007460:	4770      	bx	lr
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007462:	23c5      	movs	r3, #197	; 0xc5
 8007464:	6393      	str	r3, [r2, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007466:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007468:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	200000a0 	.word	0x200000a0

08007474 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007474:	4b45      	ldr	r3, [pc, #276]	; (800758c <SDMMC_GetCmdResp1+0x118>)
{
 8007476:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007478:	681b      	ldr	r3, [r3, #0]
{
 800747a:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800747c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007480:	fbb3 f3f0 	udiv	r3, r3, r0
 8007484:	435a      	muls	r2, r3
    if (count-- == 0U)
 8007486:	2a00      	cmp	r2, #0
 8007488:	d049      	beq.n	800751e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800748a:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800748c:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007490:	d007      	beq.n	80074a2 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007492:	051b      	lsls	r3, r3, #20
 8007494:	d405      	bmi.n	80074a2 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007498:	0758      	lsls	r0, r3, #29
 800749a:	d504      	bpl.n	80074a6 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800749c:	2004      	movs	r0, #4
 800749e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	3a01      	subs	r2, #1
 80074a4:	e7ef      	b.n	8007486 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80074a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80074a8:	f010 0001 	ands.w	r0, r0, #1
 80074ac:	d002      	beq.n	80074b4 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074ae:	2301      	movs	r3, #1
 80074b0:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074b2:	e7f5      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074b4:	23c5      	movs	r3, #197	; 0xc5
 80074b6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80074b8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	4299      	cmp	r1, r3
 80074be:	d131      	bne.n	8007524 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 80074c0:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80074c2:	4833      	ldr	r0, [pc, #204]	; (8007590 <SDMMC_GetCmdResp1+0x11c>)
 80074c4:	4018      	ands	r0, r3
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d0ea      	beq.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db2c      	blt.n	8007528 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80074ce:	005a      	lsls	r2, r3, #1
 80074d0:	d42d      	bmi.n	800752e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80074d2:	009c      	lsls	r4, r3, #2
 80074d4:	d42d      	bmi.n	8007532 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80074d6:	00d9      	lsls	r1, r3, #3
 80074d8:	d42d      	bmi.n	8007536 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074da:	011a      	lsls	r2, r3, #4
 80074dc:	d42e      	bmi.n	800753c <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074de:	015c      	lsls	r4, r3, #5
 80074e0:	d42f      	bmi.n	8007542 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074e2:	01d9      	lsls	r1, r3, #7
 80074e4:	d430      	bmi.n	8007548 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80074e6:	021a      	lsls	r2, r3, #8
 80074e8:	d431      	bmi.n	800754e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80074ea:	025c      	lsls	r4, r3, #9
 80074ec:	d432      	bmi.n	8007554 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80074ee:	0299      	lsls	r1, r3, #10
 80074f0:	d433      	bmi.n	800755a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80074f2:	02da      	lsls	r2, r3, #11
 80074f4:	d434      	bmi.n	8007560 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80074f6:	035c      	lsls	r4, r3, #13
 80074f8:	d435      	bmi.n	8007566 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80074fa:	0399      	lsls	r1, r3, #14
 80074fc:	d436      	bmi.n	800756c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80074fe:	03da      	lsls	r2, r3, #15
 8007500:	d437      	bmi.n	8007572 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007502:	041c      	lsls	r4, r3, #16
 8007504:	d438      	bmi.n	8007578 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007506:	0459      	lsls	r1, r3, #17
 8007508:	d439      	bmi.n	800757e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800750a:	049a      	lsls	r2, r3, #18
 800750c:	d43a      	bmi.n	8007584 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800750e:	f013 0f08 	tst.w	r3, #8
 8007512:	bf14      	ite	ne
 8007514:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8007518:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800751c:	e7c0      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800751e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007522:	e7bd      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007524:	2001      	movs	r0, #1
 8007526:	e7bb      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007528:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800752c:	e7b8      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800752e:	2040      	movs	r0, #64	; 0x40
 8007530:	e7b6      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007532:	2080      	movs	r0, #128	; 0x80
 8007534:	e7b4      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800753a:	e7b1      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800753c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007540:	e7ae      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007542:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007546:	e7ab      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800754c:	e7a8      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800754e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007552:	e7a5      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007554:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007558:	e7a2      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800755a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800755e:	e79f      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8007560:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007564:	e79c      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007566:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800756a:	e799      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800756c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007570:	e796      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007572:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007576:	e793      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007578:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800757c:	e790      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800757e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007582:	e78d      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8007584:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007588:	e78a      	b.n	80074a0 <SDMMC_GetCmdResp1+0x2c>
 800758a:	bf00      	nop
 800758c:	200000a0 	.word	0x200000a0
 8007590:	fdffe008 	.word	0xfdffe008

08007594 <SDMMC_Init>:
{
 8007594:	b084      	sub	sp, #16
 8007596:	b510      	push	{r4, lr}
 8007598:	ac03      	add	r4, sp, #12
 800759a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800759e:	460b      	mov	r3, r1
 80075a0:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075a2:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80075a4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80075a6:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075a8:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 80075ac:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80075ae:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075b0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 80075b4:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80075b6:	9907      	ldr	r1, [sp, #28]
 80075b8:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80075ba:	9908      	ldr	r1, [sp, #32]
 80075bc:	430b      	orrs	r3, r1
}
 80075be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075c2:	4313      	orrs	r3, r2
}
 80075c4:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80075c6:	6043      	str	r3, [r0, #4]
}
 80075c8:	2000      	movs	r0, #0
 80075ca:	4770      	bx	lr

080075cc <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80075cc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80075d0:	4770      	bx	lr

080075d2 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80075d2:	680b      	ldr	r3, [r1, #0]
 80075d4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80075d8:	2000      	movs	r0, #0
 80075da:	4770      	bx	lr

080075dc <SDMMC_PowerState_ON>:
{  
 80075dc:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80075de:	2303      	movs	r3, #3
 80075e0:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 80075e2:	2002      	movs	r0, #2
 80075e4:	f7fc f98e 	bl	8003904 <HAL_Delay>
}
 80075e8:	2000      	movs	r0, #0
 80075ea:	bd08      	pop	{r3, pc}

080075ec <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075ec:	6800      	ldr	r0, [r0, #0]
}
 80075ee:	f000 0003 	and.w	r0, r0, #3
 80075f2:	4770      	bx	lr

080075f4 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80075f4:	680b      	ldr	r3, [r1, #0]
{
 80075f6:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 80075f8:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80075fa:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075fc:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007600:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007604:	4323      	orrs	r3, r4
                       Command->Response         |\
 8007606:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8007608:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800760a:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 800760e:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8007610:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007612:	4313      	orrs	r3, r2
 8007614:	60c3      	str	r3, [r0, #12]
}
 8007616:	2000      	movs	r0, #0
 8007618:	bd10      	pop	{r4, pc}

0800761a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800761a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800761c:	5840      	ldr	r0, [r0, r1]
}  
 800761e:	4770      	bx	lr

08007620 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007620:	680b      	ldr	r3, [r1, #0]
{
 8007622:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007624:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007626:	684b      	ldr	r3, [r1, #4]
 8007628:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800762a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800762c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007630:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007634:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8007636:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8007638:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800763a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800763c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800763e:	4313      	orrs	r3, r2
 8007640:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007642:	2000      	movs	r0, #0
 8007644:	bd10      	pop	{r4, pc}

08007646 <SDMMC_CmdBlockLength>:
{
 8007646:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007648:	2340      	movs	r3, #64	; 0x40
{
 800764a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800764c:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800764e:	2200      	movs	r2, #0
{
 8007650:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007652:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007654:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007656:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007662:	f7ff ffc7 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007666:	f241 3288 	movw	r2, #5000	; 0x1388
 800766a:	4629      	mov	r1, r5
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff ff01 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007672:	b007      	add	sp, #28
 8007674:	bd30      	pop	{r4, r5, pc}

08007676 <SDMMC_CmdReadSingleBlock>:
{
 8007676:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007678:	2340      	movs	r3, #64	; 0x40
{
 800767a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800767c:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800767e:	2200      	movs	r2, #0
{
 8007680:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007682:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007684:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007686:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800768a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800768e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007692:	f7ff ffaf 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007696:	f241 3288 	movw	r2, #5000	; 0x1388
 800769a:	4629      	mov	r1, r5
 800769c:	4620      	mov	r0, r4
 800769e:	f7ff fee9 	bl	8007474 <SDMMC_GetCmdResp1>
}
 80076a2:	b007      	add	sp, #28
 80076a4:	bd30      	pop	{r4, r5, pc}

080076a6 <SDMMC_CmdReadMultiBlock>:
{
 80076a6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076a8:	2340      	movs	r3, #64	; 0x40
{
 80076aa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076ac:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ae:	2200      	movs	r2, #0
{
 80076b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80076b2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076b6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076c2:	f7ff ff97 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80076c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ca:	4629      	mov	r1, r5
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7ff fed1 	bl	8007474 <SDMMC_GetCmdResp1>
}
 80076d2:	b007      	add	sp, #28
 80076d4:	bd30      	pop	{r4, r5, pc}

080076d6 <SDMMC_CmdWriteSingleBlock>:
{
 80076d6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076d8:	2340      	movs	r3, #64	; 0x40
{
 80076da:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076dc:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076de:	2200      	movs	r2, #0
{
 80076e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80076e2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076e4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076e6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076f2:	f7ff ff7f 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80076f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fa:	4629      	mov	r1, r5
 80076fc:	4620      	mov	r0, r4
 80076fe:	f7ff feb9 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007702:	b007      	add	sp, #28
 8007704:	bd30      	pop	{r4, r5, pc}

08007706 <SDMMC_CmdWriteMultiBlock>:
{
 8007706:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007708:	2340      	movs	r3, #64	; 0x40
{
 800770a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800770c:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800770e:	2200      	movs	r2, #0
{
 8007710:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007712:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007714:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007716:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800771a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007722:	f7ff ff67 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007726:	f241 3288 	movw	r2, #5000	; 0x1388
 800772a:	4629      	mov	r1, r5
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff fea1 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007732:	b007      	add	sp, #28
 8007734:	bd30      	pop	{r4, r5, pc}

08007736 <SDMMC_CmdSDEraseStartAdd>:
{
 8007736:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007738:	2340      	movs	r3, #64	; 0x40
{
 800773a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800773c:	2520      	movs	r5, #32
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800773e:	2200      	movs	r2, #0
{
 8007740:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 8007742:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007744:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007746:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800774a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007752:	f7ff ff4f 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 8007756:	f241 3288 	movw	r2, #5000	; 0x1388
 800775a:	4629      	mov	r1, r5
 800775c:	4620      	mov	r0, r4
 800775e:	f7ff fe89 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007762:	b007      	add	sp, #28
 8007764:	bd30      	pop	{r4, r5, pc}

08007766 <SDMMC_CmdSDEraseEndAdd>:
{
 8007766:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007768:	2340      	movs	r3, #64	; 0x40
{
 800776a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800776c:	2521      	movs	r5, #33	; 0x21
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800776e:	2200      	movs	r2, #0
{
 8007770:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 8007772:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007774:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007776:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800777a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007782:	f7ff ff37 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 8007786:	f241 3288 	movw	r2, #5000	; 0x1388
 800778a:	4629      	mov	r1, r5
 800778c:	4620      	mov	r0, r4
 800778e:	f7ff fe71 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007792:	b007      	add	sp, #28
 8007794:	bd30      	pop	{r4, r5, pc}

08007796 <SDMMC_CmdErase>:
{
 8007796:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 8007798:	2300      	movs	r3, #0
{
 800779a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 800779c:	2526      	movs	r5, #38	; 0x26
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800779e:	2240      	movs	r2, #64	; 0x40
{
 80077a0:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 80077a8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077b2:	f7ff ff1f 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 80077b6:	f24f 6218 	movw	r2, #63000	; 0xf618
 80077ba:	4629      	mov	r1, r5
 80077bc:	4620      	mov	r0, r4
 80077be:	f7ff fe59 	bl	8007474 <SDMMC_GetCmdResp1>
}
 80077c2:	b007      	add	sp, #28
 80077c4:	bd30      	pop	{r4, r5, pc}
	...

080077c8 <SDMMC_CmdStopTransfer>:
{
 80077c8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077ca:	2300      	movs	r3, #0
{
 80077cc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077ce:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077d0:	2240      	movs	r2, #64	; 0x40
{
 80077d2:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077d4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077da:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077e4:	f7ff ff06 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80077e8:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <SDMMC_CmdStopTransfer+0x30>)
 80077ea:	4629      	mov	r1, r5
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff fe41 	bl	8007474 <SDMMC_GetCmdResp1>
}
 80077f2:	b007      	add	sp, #28
 80077f4:	bd30      	pop	{r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	05f5e100 	.word	0x05f5e100

080077fc <SDMMC_CmdSelDesel>:
{
 80077fc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077fe:	2340      	movs	r3, #64	; 0x40
{
 8007800:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007802:	2507      	movs	r5, #7
{
 8007804:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007806:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007808:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800780a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800780c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007814:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007818:	f7ff feec 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4629      	mov	r1, r5
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff fe26 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007828:	b007      	add	sp, #28
 800782a:	bd30      	pop	{r4, r5, pc}

0800782c <SDMMC_CmdGoIdleState>:
{
 800782c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800782e:	2300      	movs	r3, #0
{
 8007830:	b086      	sub	sp, #24
 8007832:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007834:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007836:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800783a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007844:	f7ff fed6 	bl	80075f4 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <SDMMC_CmdGoIdleState+0x48>)
 800784a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	fbb3 f2f2 	udiv	r2, r3, r2
 8007854:	f241 3388 	movw	r3, #5000	; 0x1388
 8007858:	4353      	muls	r3, r2
    if (count-- == 0U)
 800785a:	3b01      	subs	r3, #1
 800785c:	d307      	bcc.n	800786e <SDMMC_CmdGoIdleState+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800785e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007860:	0612      	lsls	r2, r2, #24
 8007862:	d5fa      	bpl.n	800785a <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007864:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8007866:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007868:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800786a:	b006      	add	sp, #24
 800786c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800786e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8007872:	e7fa      	b.n	800786a <SDMMC_CmdGoIdleState+0x3e>
 8007874:	200000a0 	.word	0x200000a0

08007878 <SDMMC_CmdOperCond>:
{
 8007878:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800787a:	f44f 7cd5 	mov.w	ip, #426	; 0x1aa
{
 800787e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007880:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007882:	f04f 0e40 	mov.w	lr, #64	; 0x40
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007886:	a901      	add	r1, sp, #4
{
 8007888:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800788a:	e9cd c301 	strd	ip, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800788e:	2300      	movs	r3, #0
 8007890:	e9cd e303 	strd	lr, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007898:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800789a:	f7ff feab 	bl	80075f4 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <SDMMC_CmdOperCond+0x74>)
 80078a0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80078aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80078ae:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80078b0:	3b01      	subs	r3, #1
 80078b2:	d318      	bcc.n	80078e6 <SDMMC_CmdOperCond+0x6e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80078b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078b6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80078ba:	d0f9      	beq.n	80078b0 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80078bc:	0511      	lsls	r1, r2, #20
 80078be:	d4f7      	bmi.n	80078b0 <SDMMC_CmdOperCond+0x38>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078c2:	075a      	lsls	r2, r3, #29
 80078c4:	d503      	bpl.n	80078ce <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078c6:	2004      	movs	r0, #4
 80078c8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80078ca:	b006      	add	sp, #24
 80078cc:	bd10      	pop	{r4, pc}
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078d0:	f010 0001 	ands.w	r0, r0, #1
 80078d4:	d002      	beq.n	80078dc <SDMMC_CmdOperCond+0x64>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078d6:	2301      	movs	r3, #1
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80078d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80078da:	e7f6      	b.n	80078ca <SDMMC_CmdOperCond+0x52>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80078dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078de:	065b      	lsls	r3, r3, #25
 80078e0:	d5f3      	bpl.n	80078ca <SDMMC_CmdOperCond+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80078e2:	2340      	movs	r3, #64	; 0x40
 80078e4:	e7f8      	b.n	80078d8 <SDMMC_CmdOperCond+0x60>
      return SDMMC_ERROR_TIMEOUT;
 80078e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80078ea:	e7ee      	b.n	80078ca <SDMMC_CmdOperCond+0x52>
 80078ec:	200000a0 	.word	0x200000a0

080078f0 <SDMMC_CmdAppCommand>:
{
 80078f0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078f2:	2340      	movs	r3, #64	; 0x40
{
 80078f4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078f6:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078f8:	2200      	movs	r2, #0
{
 80078fa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80078fc:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078fe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007900:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007908:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800790c:	f7ff fe72 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007910:	f241 3288 	movw	r2, #5000	; 0x1388
 8007914:	4629      	mov	r1, r5
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff fdac 	bl	8007474 <SDMMC_GetCmdResp1>
}
 800791c:	b007      	add	sp, #28
 800791e:	bd30      	pop	{r4, r5, pc}

08007920 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007920:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007924:	2229      	movs	r2, #41	; 0x29
 8007926:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 800792c:	b510      	push	{r4, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007932:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007936:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793c:	2100      	movs	r1, #0
 800793e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007942:	a901      	add	r1, sp, #4
 8007944:	f7ff fe56 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff fd71 	bl	8007430 <SDMMC_GetCmdResp3>
}
 800794e:	b006      	add	sp, #24
 8007950:	bd10      	pop	{r4, pc}

08007952 <SDMMC_CmdBusWidth>:
{
 8007952:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007954:	2340      	movs	r3, #64	; 0x40
{
 8007956:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007958:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800795a:	2200      	movs	r2, #0
{
 800795c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800795e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007960:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007962:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800796e:	f7ff fe41 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007972:	f241 3288 	movw	r2, #5000	; 0x1388
 8007976:	4629      	mov	r1, r5
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fd7b 	bl	8007474 <SDMMC_GetCmdResp1>
}
 800797e:	b007      	add	sp, #28
 8007980:	bd30      	pop	{r4, r5, pc}

08007982 <SDMMC_CmdSendSCR>:
{
 8007982:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007984:	2300      	movs	r3, #0
{
 8007986:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007988:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800798a:	2240      	movs	r2, #64	; 0x40
{
 800798c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800798e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007990:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007994:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800799c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800799e:	f7ff fe29 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80079a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a6:	4629      	mov	r1, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f7ff fd63 	bl	8007474 <SDMMC_GetCmdResp1>
}
 80079ae:	b007      	add	sp, #28
 80079b0:	bd30      	pop	{r4, r5, pc}

080079b2 <SDMMC_CmdSendCID>:
{
 80079b2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079b4:	2300      	movs	r3, #0
{
 80079b6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079b8:	2202      	movs	r2, #2
{
 80079ba:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079bc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079be:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079c2:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079cc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ce:	f7ff fe11 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80079d2:	4620      	mov	r0, r4
 80079d4:	f7ff fd06 	bl	80073e4 <SDMMC_GetCmdResp2>
}
 80079d8:	b006      	add	sp, #24
 80079da:	bd10      	pop	{r4, pc}

080079dc <SDMMC_CmdSendCSD>:
{
 80079dc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079de:	2209      	movs	r2, #9
{
 80079e0:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079e2:	23c0      	movs	r3, #192	; 0xc0
{
 80079e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80079e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079e8:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079f6:	a901      	add	r1, sp, #4
 80079f8:	f7ff fdfc 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7ff fcf1 	bl	80073e4 <SDMMC_GetCmdResp2>
}
 8007a02:	b006      	add	sp, #24
 8007a04:	bd10      	pop	{r4, pc}
	...

08007a08 <SDMMC_CmdSetRelAdd>:
{
 8007a08:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a0a:	2300      	movs	r3, #0
{
 8007a0c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a0e:	2203      	movs	r2, #3
{
 8007a10:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a12:	a901      	add	r1, sp, #4
{
 8007a14:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a16:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a1a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a1c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a24:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a26:	f7ff fde5 	bl	80075f4 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a2a:	4b1f      	ldr	r3, [pc, #124]	; (8007aa8 <SDMMC_CmdSetRelAdd+0xa0>)
 8007a2c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a36:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a3a:	4353      	muls	r3, r2
    if (count-- == 0U)
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	d32a      	bcc.n	8007a96 <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 8007a40:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a42:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007a46:	d0f9      	beq.n	8007a3c <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a48:	0510      	lsls	r0, r2, #20
 8007a4a:	d4f7      	bmi.n	8007a3c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a4e:	0759      	lsls	r1, r3, #29
 8007a50:	d503      	bpl.n	8007a5a <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a52:	2004      	movs	r0, #4
 8007a54:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007a56:	b007      	add	sp, #28
 8007a58:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007a5c:	f010 0001 	ands.w	r0, r0, #1
 8007a60:	d002      	beq.n	8007a68 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a62:	2301      	movs	r3, #1
 8007a64:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a66:	e7f6      	b.n	8007a56 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a68:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d115      	bne.n	8007a9c <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a70:	23c5      	movs	r3, #197	; 0xc5
 8007a72:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007a74:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a76:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8007a7a:	d102      	bne.n	8007a82 <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	802b      	strh	r3, [r5, #0]
    return SDMMC_ERROR_NONE;
 8007a80:	e7e9      	b.n	8007a56 <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a82:	045a      	lsls	r2, r3, #17
 8007a84:	d40c      	bmi.n	8007aa0 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a86:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007a8a:	bf14      	ite	ne
 8007a8c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007a90:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007a94:	e7df      	b.n	8007a56 <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 8007a96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007a9a:	e7dc      	b.n	8007a56 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	e7da      	b.n	8007a56 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007aa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007aa4:	e7d7      	b.n	8007a56 <SDMMC_CmdSetRelAdd+0x4e>
 8007aa6:	bf00      	nop
 8007aa8:	200000a0 	.word	0x200000a0

08007aac <SDMMC_CmdSendStatus>:
{
 8007aac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007aae:	2340      	movs	r3, #64	; 0x40
{
 8007ab0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ab2:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ab4:	2200      	movs	r2, #0
{
 8007ab6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007ab8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007abc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ac8:	f7ff fd94 	bl	80075f4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff fcce 	bl	8007474 <SDMMC_GetCmdResp1>
}
 8007ad8:	b007      	add	sp, #28
 8007ada:	bd30      	pop	{r4, r5, pc}

08007adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007ae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007ae2:	e003      	b.n	8007aec <LoopCopyDataInit>

08007ae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007ae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007aea:	3104      	adds	r1, #4

08007aec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007aec:	480b      	ldr	r0, [pc, #44]	; (8007b1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007aee:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007af0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007af2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007af4:	d3f6      	bcc.n	8007ae4 <CopyDataInit>
  ldr  r2, =_sbss
 8007af6:	4a0b      	ldr	r2, [pc, #44]	; (8007b24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007af8:	e002      	b.n	8007b00 <LoopFillZerobss>

08007afa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007afa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007afc:	f842 3b04 	str.w	r3, [r2], #4

08007b00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b04:	d3f9      	bcc.n	8007afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007b06:	f7fb fe8b 	bl	8003820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b0a:	f002 fe6f 	bl	800a7ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b0e:	f001 fa5f 	bl	8008fd0 <main>
  bx  lr    
 8007b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b14:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007b18:	0801297c 	.word	0x0801297c
  ldr  r0, =_sdata
 8007b1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b20:	200005ec 	.word	0x200005ec
  ldr  r2, =_sbss
 8007b24:	20000600 	.word	0x20000600
  ldr  r3, = _ebss
 8007b28:	200280d4 	.word	0x200280d4

08007b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b2c:	e7fe      	b.n	8007b2c <ADC_IRQHandler>

08007b2e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8007b2e:	b570      	push	{r4, r5, r6, lr}
 8007b30:	460e      	mov	r6, r1
 8007b32:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b34:	2500      	movs	r5, #0
 8007b36:	42a5      	cmp	r5, r4
 8007b38:	db01      	blt.n	8007b3e <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8007b3e:	f3af 8000 	nop.w
 8007b42:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7f6      	b.n	8007b36 <_read+0x8>

08007b48 <_write>:

int _write(int file, char *ptr, int len)
{
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	460e      	mov	r6, r1
 8007b4c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b4e:	2500      	movs	r5, #0
 8007b50:	42a5      	cmp	r5, r4
 8007b52:	db01      	blt.n	8007b58 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8007b54:	4620      	mov	r0, r4
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007b58:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b5a:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8007b5c:	f002 fd04 	bl	800a568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b60:	e7f6      	b.n	8007b50 <_write+0x8>
	...

08007b64 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007b64:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <_sbrk+0x2c>)
{
 8007b68:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007b6a:	6819      	ldr	r1, [r3, #0]
 8007b6c:	b909      	cbnz	r1, 8007b72 <_sbrk+0xe>
		heap_end = &end;
 8007b6e:	4909      	ldr	r1, [pc, #36]	; (8007b94 <_sbrk+0x30>)
 8007b70:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007b72:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007b74:	4669      	mov	r1, sp
 8007b76:	4402      	add	r2, r0
 8007b78:	428a      	cmp	r2, r1
 8007b7a:	d906      	bls.n	8007b8a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007b7c:	f002 fe30 	bl	800a7e0 <__errno>
 8007b80:	230c      	movs	r3, #12
 8007b82:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8007b88:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8007b8a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8007b8c:	e7fc      	b.n	8007b88 <_sbrk+0x24>
 8007b8e:	bf00      	nop
 8007b90:	20000c70 	.word	0x20000c70
 8007b94:	200280d8 	.word	0x200280d8

08007b98 <_close>:

int _close(int file)
{
	return -1;
}
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	4770      	bx	lr

08007b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007ba2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007ba4:	604b      	str	r3, [r1, #4]
}
 8007ba6:	4770      	bx	lr

08007ba8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007ba8:	2001      	movs	r0, #1
 8007baa:	4770      	bx	lr

08007bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007bac:	2000      	movs	r0, #0
 8007bae:	4770      	bx	lr

08007bb0 <AudioLoopback_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioLoopback_demo (void)
{
 8007bb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  * @retval None
  */
static void AudioLoopback_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	f7fa f9e6 	bl	8001f88 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007bbc:	4869      	ldr	r0, [pc, #420]	; (8007d64 <AudioLoopback_demo+0x1b4>)
 8007bbe:	f7fa f9bb 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8007bc2:	f7fa f963 	bl	8001e8c <BSP_LCD_GetXSize>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	b282      	uxth	r2, r0
 8007bca:	235a      	movs	r3, #90	; 0x5a
 8007bcc:	4608      	mov	r0, r1
 8007bce:	f7fa fd99 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	f7fa f9af 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8007bda:	4862      	ldr	r0, [pc, #392]	; (8007d64 <AudioLoopback_demo+0x1b4>)
 8007bdc:	f7fa f9b6 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8007be0:	4861      	ldr	r0, [pc, #388]	; (8007d68 <AudioLoopback_demo+0x1b8>)
 8007be2:	f7fa f9bd 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO LOOPBACK EXAMPLE", CENTER_MODE);
 8007be6:	2100      	movs	r1, #0
 8007be8:	2301      	movs	r3, #1
 8007bea:	4a60      	ldr	r2, [pc, #384]	; (8007d6c <AudioLoopback_demo+0x1bc>)
 8007bec:	4608      	mov	r0, r1
 8007bee:	f7fa fabd 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8007bf2:	485f      	ldr	r0, [pc, #380]	; (8007d70 <AudioLoopback_demo+0x1c0>)
 8007bf4:	f7fa f9b4 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4a5e      	ldr	r2, [pc, #376]	; (8007d74 <AudioLoopback_demo+0x1c4>)
 8007bfc:	211e      	movs	r1, #30
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f7fa fab4 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007c04:	4857      	ldr	r0, [pc, #348]	; (8007d64 <AudioLoopback_demo+0x1b4>)
 8007c06:	f7fa f997 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8007c0a:	f7fa f93f 	bl	8001e8c <BSP_LCD_GetXSize>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7fa f948 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007c14:	386e      	subs	r0, #110	; 0x6e
 8007c16:	f1a4 0214 	sub.w	r2, r4, #20
 8007c1a:	2164      	movs	r1, #100	; 0x64
 8007c1c:	b283      	uxth	r3, r0
 8007c1e:	200a      	movs	r0, #10
 8007c20:	b292      	uxth	r2, r2
 8007c22:	f7fa fa13 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8007c26:	f7fa f931 	bl	8001e8c <BSP_LCD_GetXSize>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	f7fa f93a 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007c30:	3870      	subs	r0, #112	; 0x70
 8007c32:	f1a4 0216 	sub.w	r2, r4, #22
 8007c36:	2165      	movs	r1, #101	; 0x65
 8007c38:	b283      	uxth	r3, r0
 8007c3a:	200b      	movs	r0, #11
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	f7fa fa05 	bl	800204c <BSP_LCD_DrawRect>
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8007c42:	2102      	movs	r1, #2
 8007c44:	2310      	movs	r3, #16
 8007c46:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8007c4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c4e:	9100      	str	r1, [sp, #0]
 8007c50:	f7f9 ffb2 	bl	8001bb8 <BSP_AUDIO_IN_OUT_Init>
 8007c54:	4604      	mov	r4, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	d15c      	bne.n	8007d18 <AudioLoopback_demo+0x168>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c5e:	f7fa f975 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007c62:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007c66:	f7fa f967 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8007c6a:	f7fa f91b 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	385f      	subs	r0, #95	; 0x5f
 8007c72:	4a41      	ldr	r2, [pc, #260]	; (8007d78 <AudioLoopback_demo+0x1c8>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8007c74:	b281      	uxth	r1, r0
 8007c76:	2000      	movs	r0, #0
 8007c78:	f7fa fa78 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	f7fa f964 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007c84:	4837      	ldr	r0, [pc, #220]	; (8007d64 <AudioLoopback_demo+0x1b4>)
 8007c86:	f7fa f957 	bl	8001f38 <BSP_LCD_SetTextColor>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007c8a:	4c3c      	ldr	r4, [pc, #240]	; (8007d7c <AudioLoopback_demo+0x1cc>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Microphones sound streamed to headphones", CENTER_MODE);
 8007c8c:	f7fa f90a 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007c90:	3850      	subs	r0, #80	; 0x50
 8007c92:	2301      	movs	r3, #1
 8007c94:	4a3a      	ldr	r2, [pc, #232]	; (8007d80 <AudioLoopback_demo+0x1d0>)
 8007c96:	b281      	uxth	r1, r0
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f7fa fa67 	bl	800216c <BSP_LCD_DisplayStringAt>
  memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 8007c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4837      	ldr	r0, [pc, #220]	; (8007d84 <AudioLoopback_demo+0x1d4>)
 8007ca6:	f002 fded 	bl	800a884 <memset>
  memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 8007caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4835      	ldr	r0, [pc, #212]	; (8007d88 <AudioLoopback_demo+0x1d8>)
 8007cb2:	f002 fde7 	bl	800a884 <memset>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007cb6:	2300      	movs	r3, #0
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8007cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cbc:	4831      	ldr	r0, [pc, #196]	; (8007d84 <AudioLoopback_demo+0x1d4>)
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007cbe:	6023      	str	r3, [r4, #0]
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8007cc0:	f7f9 fe54 	bl	800196c <BSP_AUDIO_IN_Record>
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007cc4:	4f2f      	ldr	r7, [pc, #188]	; (8007d84 <AudioLoopback_demo+0x1d4>)
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8007cc6:	2005      	movs	r0, #5
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007cc8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8007d88 <AudioLoopback_demo+0x1d8>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8007ccc:	f7f9 fc9c 	bl	8001608 <BSP_AUDIO_OUT_SetAudioFrameSlot>
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8007cd0:	4e2e      	ldr	r6, [pc, #184]	; (8007d8c <AudioLoopback_demo+0x1dc>)
  BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 8007cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cd6:	482c      	ldr	r0, [pc, #176]	; (8007d88 <AudioLoopback_demo+0x1d8>)
 8007cd8:	f7f9 fc28 	bl	800152c <BSP_AUDIO_OUT_Play>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d12e      	bne.n	8007d40 <AudioLoopback_demo+0x190>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007ce2:	2300      	movs	r3, #0
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ce8:	4639      	mov	r1, r7
 8007cea:	4640      	mov	r0, r8
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007cec:	6023      	str	r3, [r4, #0]
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007cee:	f002 fdbb 	bl	800a868 <memcpy>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	2d02      	cmp	r5, #2
 8007cf6:	d130      	bne.n	8007d5a <AudioLoopback_demo+0x1aa>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007cf8:	2300      	movs	r3, #0
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8007cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4823      	ldr	r0, [pc, #140]	; (8007d90 <AudioLoopback_demo+0x1e0>)
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007d02:	6023      	str	r3, [r4, #0]
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8007d04:	f002 fdb0 	bl	800a868 <memcpy>
    if (CheckForUserInput() > 0)
 8007d08:	f001 fa88 	bl	800921c <CheckForUserInput>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d0e5      	beq.n	8007cdc <AudioLoopback_demo+0x12c>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7f9 fe35 	bl	8001980 <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007d16:	e01a      	b.n	8007d4e <AudioLoopback_demo+0x19e>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d18:	f7fa f918 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007d1c:	481d      	ldr	r0, [pc, #116]	; (8007d94 <AudioLoopback_demo+0x1e4>)
 8007d1e:	f7fa f90b 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 8007d22:	f7fa f8bf 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007d26:	385f      	subs	r0, #95	; 0x5f
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	; (8007d98 <AudioLoopback_demo+0x1e8>)
 8007d2c:	b281      	uxth	r1, r0
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f7fa fa1c 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8007d34:	f7fa f8b6 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	3850      	subs	r0, #80	; 0x50
 8007d3c:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <AudioLoopback_demo+0x1ec>)
 8007d3e:	e799      	b.n	8007c74 <AudioLoopback_demo+0xc4>
      if (CheckForUserInput() > 0)
 8007d40:	f001 fa6c 	bl	800921c <CheckForUserInput>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d0c9      	beq.n	8007cdc <AudioLoopback_demo+0x12c>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007d48:	2002      	movs	r0, #2
 8007d4a:	f7f9 fc35 	bl	80015b8 <BSP_AUDIO_OUT_Stop>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007d4e:	2002      	movs	r0, #2
}
 8007d50:	b002      	add	sp, #8
 8007d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007d56:	f7f9 bc2f 	b.w	80015b8 <BSP_AUDIO_OUT_Stop>
      if (CheckForUserInput() > 0)
 8007d5a:	f001 fa5f 	bl	800921c <CheckForUserInput>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d0c7      	beq.n	8007cf2 <AudioLoopback_demo+0x142>
 8007d62:	e7f1      	b.n	8007d48 <AudioLoopback_demo+0x198>
 8007d64:	ff0000ff 	.word	0xff0000ff
 8007d68:	20000074 	.word	0x20000074
 8007d6c:	08011cde 	.word	0x08011cde
 8007d70:	20000084 	.word	0x20000084
 8007d74:	08011cf5 	.word	0x08011cf5
 8007d78:	08011d15 	.word	0x08011d15
 8007d7c:	20022bd8 	.word	0x20022bd8
 8007d80:	08011d5c 	.word	0x08011d5c
 8007d84:	c0115800 	.word	0xc0115800
 8007d88:	c0115c00 	.word	0xc0115c00
 8007d8c:	c0115a00 	.word	0xc0115a00
 8007d90:	c0115e00 	.word	0xc0115e00
 8007d94:	ffff0000 	.word	0xffff0000
 8007d98:	08011d2e 	.word	0x08011d2e
 8007d9c:	08011d47 	.word	0x08011d47

08007da0 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8007da0:	b570      	push	{r4, r5, r6, lr}
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;
  
  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8007da2:	4c07      	ldr	r4, [pc, #28]	; (8007dc0 <GetData+0x20>)
 8007da4:	6825      	ldr	r5, [r4, #0]
 8007da6:	1844      	adds	r4, r0, r1
  ReadDataNbr = 0;
 8007da8:	2000      	movs	r0, #0
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8007daa:	1846      	adds	r6, r0, r1
 8007dac:	42b5      	cmp	r5, r6
 8007dae:	d901      	bls.n	8007db4 <GetData+0x14>
 8007db0:	4298      	cmp	r0, r3
 8007db2:	d100      	bne.n	8007db6 <GetData+0x16>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
  }
  return ReadDataNbr;
}
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8007db6:	f814 6b01 	ldrb.w	r6, [r4], #1
 8007dba:	5416      	strb	r6, [r2, r0]
    ReadDataNbr++;
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	e7f4      	b.n	8007daa <GetData+0xa>
 8007dc0:	20000c80 	.word	0x20000c80

08007dc4 <SCB_CleanDCache_by_Addr.constprop.0>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007dc4:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8007dc8:	4a06      	ldr	r2, [pc, #24]	; (8007de4 <SCB_CleanDCache_by_Addr.constprop.0+0x20>)
 8007dca:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 8007dce:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8007dd2:	3020      	adds	r0, #32
    while (op_size > 0) {
 8007dd4:	4298      	cmp	r0, r3
 8007dd6:	d1fa      	bne.n	8007dce <SCB_CleanDCache_by_Addr.constprop.0+0xa>
 8007dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ddc:	f3bf 8f6f 	isb	sy
}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <AUDIO_Start>:
{
 8007de8:	b570      	push	{r4, r5, r6, lr}
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007dea:	4c11      	ldr	r4, [pc, #68]	; (8007e30 <AUDIO_Start+0x48>)
 8007dec:	2500      	movs	r5, #0
  bytesread = GetData( (void *)AudioStartAddress,
 8007dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  AudioFileSize = audio_file_size;
 8007df2:	4622      	mov	r2, r4
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007df4:	f884 5824 	strb.w	r5, [r4, #2084]	; 0x824
  AudioStartAddress = audio_start_address;
 8007df8:	f8c4 0828 	str.w	r0, [r4, #2088]	; 0x828
  AudioFileSize = audio_file_size;
 8007dfc:	f842 1b20 	str.w	r1, [r2], #32
  bytesread = GetData( (void *)AudioStartAddress,
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7ff ffcd 	bl	8007da0 <GetData>
  if(bytesread > 0)
 8007e06:	4606      	mov	r6, r0
 8007e08:	b180      	cbz	r0, 8007e2c <AUDIO_Start+0x44>
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8007e0a:	f104 0020 	add.w	r0, r4, #32
 8007e0e:	f7ff ffd9 	bl	8007dc4 <SCB_CleanDCache_by_Addr.constprop.0>
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8007e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e16:	f104 0020 	add.w	r0, r4, #32
 8007e1a:	f7f9 fb87 	bl	800152c <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 8007e1e:	2302      	movs	r3, #2
    return AUDIO_ERROR_NONE;
 8007e20:	4628      	mov	r0, r5
    buffer_ctl.fptr = bytesread;
 8007e22:	f8c4 6820 	str.w	r6, [r4, #2080]	; 0x820
    audio_state = AUDIO_STATE_PLAYING;      
 8007e26:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
}
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
  return AUDIO_ERROR_IO;
 8007e2c:	2002      	movs	r0, #2
 8007e2e:	e7fc      	b.n	8007e2a <AUDIO_Start+0x42>
 8007e30:	20000c80 	.word	0x20000c80

08007e34 <AUDIO_Process>:
{
 8007e34:	b538      	push	{r3, r4, r5, lr}
  switch(audio_state)
 8007e36:	4c22      	ldr	r4, [pc, #136]	; (8007ec0 <AUDIO_Process+0x8c>)
 8007e38:	f894 382c 	ldrb.w	r3, [r4, #2092]	; 0x82c
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d13c      	bne.n	8007eba <AUDIO_Process+0x86>
    if(buffer_ctl.fptr >= AudioFileSize)
 8007e40:	f8d4 2820 	ldr.w	r2, [r4, #2080]	; 0x820
 8007e44:	2500      	movs	r5, #0
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	429a      	cmp	r2, r3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8007e4a:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
      buffer_ctl.fptr = 0; 
 8007e4e:	bf24      	itt	cs
 8007e50:	f8c4 5820 	strcs.w	r5, [r4, #2080]	; 0x820
      error_state = AUDIO_ERROR_EOF;
 8007e54:	2503      	movcs	r5, #3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d114      	bne.n	8007e84 <AUDIO_Process+0x50>
      bytesread = GetData((void *)AudioStartAddress,
 8007e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e5e:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <AUDIO_Process+0x90>)
 8007e60:	f8d4 1820 	ldr.w	r1, [r4, #2080]	; 0x820
 8007e64:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
 8007e68:	f7ff ff9a 	bl	8007da0 <GetData>
      if( bytesread >0)
 8007e6c:	b150      	cbz	r0, 8007e84 <AUDIO_Process+0x50>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f884 3824 	strb.w	r3, [r4, #2084]	; 0x824
        buffer_ctl.fptr += bytesread; 
 8007e74:	f8d4 3820 	ldr.w	r3, [r4, #2080]	; 0x820
 8007e78:	4418      	add	r0, r3
 8007e7a:	f8c4 0820 	str.w	r0, [r4, #2080]	; 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8007e7e:	4811      	ldr	r0, [pc, #68]	; (8007ec4 <AUDIO_Process+0x90>)
 8007e80:	f7ff ffa0 	bl	8007dc4 <SCB_CleanDCache_by_Addr.constprop.0>
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8007e84:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d114      	bne.n	8007eb6 <AUDIO_Process+0x82>
      bytesread = GetData((void *)AudioStartAddress,
 8007e8c:	4a0e      	ldr	r2, [pc, #56]	; (8007ec8 <AUDIO_Process+0x94>)
 8007e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e92:	f8d4 1820 	ldr.w	r1, [r4, #2080]	; 0x820
 8007e96:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
 8007e9a:	f7ff ff81 	bl	8007da0 <GetData>
      if( bytesread > 0)
 8007e9e:	b150      	cbz	r0, 8007eb6 <AUDIO_Process+0x82>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f884 3824 	strb.w	r3, [r4, #2084]	; 0x824
        buffer_ctl.fptr += bytesread;
 8007ea6:	f8d4 3820 	ldr.w	r3, [r4, #2080]	; 0x820
 8007eaa:	4418      	add	r0, r3
 8007eac:	f8c4 0820 	str.w	r0, [r4, #2080]	; 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7ff ff87 	bl	8007dc4 <SCB_CleanDCache_by_Addr.constprop.0>
}
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
    error_state = AUDIO_ERROR_NOTREADY;
 8007eba:	2501      	movs	r5, #1
 8007ebc:	e7fb      	b.n	8007eb6 <AUDIO_Process+0x82>
 8007ebe:	bf00      	nop
 8007ec0:	20000c80 	.word	0x20000c80
 8007ec4:	20000ca0 	.word	0x20000ca0
 8007ec8:	200010a0 	.word	0x200010a0

08007ecc <AudioPlay_demo>:
{
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t FreqStr[256] = {0};
 8007ed0:	2500      	movs	r5, #0
{
 8007ed2:	b0cd      	sub	sp, #308	; 0x134
  uint8_t FreqStr[256] = {0};
 8007ed4:	22fc      	movs	r2, #252	; 0xfc
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 8007ed6:	2601      	movs	r6, #1
  uint8_t FreqStr[256] = {0};
 8007ed8:	4629      	mov	r1, r5
 8007eda:	a80d      	add	r0, sp, #52	; 0x34
  uwVolume = 70;
 8007edc:	4cba      	ldr	r4, [pc, #744]	; (80081c8 <AudioPlay_demo+0x2fc>)
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 8007ede:	4fbb      	ldr	r7, [pc, #748]	; (80081cc <AudioPlay_demo+0x300>)
  uint8_t FreqStr[256] = {0};
 8007ee0:	950c      	str	r5, [sp, #48]	; 0x30
 8007ee2:	f002 fccf 	bl	800a884 <memset>
  uwVolume = 70;
 8007ee6:	2346      	movs	r3, #70	; 0x46
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 8007eec:	f8c7 6830 	str.w	r6, [r7, #2096]	; 0x830
  uwVolume = 70;
 8007ef0:	6263      	str	r3, [r4, #36]	; 0x24
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007ef2:	f7fa f849 	bl	8001f88 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007ef6:	48b6      	ldr	r0, [pc, #728]	; (80081d0 <AudioPlay_demo+0x304>)
 8007ef8:	f7fa f81e 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8007efc:	f7f9 ffc6 	bl	8001e8c <BSP_LCD_GetXSize>
 8007f00:	235a      	movs	r3, #90	; 0x5a
 8007f02:	b282      	uxth	r2, r0
 8007f04:	4629      	mov	r1, r5
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7fa fbfc 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	f7fa f812 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8007f14:	48ae      	ldr	r0, [pc, #696]	; (80081d0 <AudioPlay_demo+0x304>)
 8007f16:	f7fa f819 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8007f1a:	48ae      	ldr	r0, [pc, #696]	; (80081d4 <AudioPlay_demo+0x308>)
 8007f1c:	f7fa f820 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO EXAMPLE", CENTER_MODE);
 8007f20:	4633      	mov	r3, r6
 8007f22:	4aad      	ldr	r2, [pc, #692]	; (80081d8 <AudioPlay_demo+0x30c>)
 8007f24:	4629      	mov	r1, r5
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7fa f920 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8007f2c:	48ab      	ldr	r0, [pc, #684]	; (80081dc <AudioPlay_demo+0x310>)
 8007f2e:	f7fa f817 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8007f32:	4633      	mov	r3, r6
 8007f34:	4aaa      	ldr	r2, [pc, #680]	; (80081e0 <AudioPlay_demo+0x314>)
 8007f36:	211e      	movs	r1, #30
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7fa f917 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"Press Top/Bottom screen to change Volume   ", CENTER_MODE);
 8007f3e:	4633      	mov	r3, r6
 8007f40:	4aa8      	ldr	r2, [pc, #672]	; (80081e4 <AudioPlay_demo+0x318>)
 8007f42:	212d      	movs	r1, #45	; 0x2d
 8007f44:	4628      	mov	r0, r5
 8007f46:	f7fa f911 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Press Left/Right screen to change Frequency", CENTER_MODE);
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	4aa6      	ldr	r2, [pc, #664]	; (80081e8 <AudioPlay_demo+0x31c>)
 8007f4e:	213c      	movs	r1, #60	; 0x3c
 8007f50:	4628      	mov	r0, r5
 8007f52:	f7fa f90b 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 75, (uint8_t *)"Press 2 fingers for Pause/Resume           ", CENTER_MODE);
 8007f56:	4633      	mov	r3, r6
 8007f58:	4aa4      	ldr	r2, [pc, #656]	; (80081ec <AudioPlay_demo+0x320>)
 8007f5a:	214b      	movs	r1, #75	; 0x4b
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7fa f905 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007f62:	489b      	ldr	r0, [pc, #620]	; (80081d0 <AudioPlay_demo+0x304>)
 8007f64:	f7f9 ffe8 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8007f68:	f7f9 ff90 	bl	8001e8c <BSP_LCD_GetXSize>
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	f7f9 ff99 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007f72:	386e      	subs	r0, #110	; 0x6e
 8007f74:	f1a8 0214 	sub.w	r2, r8, #20
 8007f78:	2164      	movs	r1, #100	; 0x64
 8007f7a:	b283      	uxth	r3, r0
 8007f7c:	200a      	movs	r0, #10
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	f7fa f864 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8007f84:	f7f9 ff82 	bl	8001e8c <BSP_LCD_GetXSize>
 8007f88:	4680      	mov	r8, r0
 8007f8a:	f7f9 ff8b 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007f8e:	3870      	subs	r0, #112	; 0x70
 8007f90:	f1a8 0216 	sub.w	r2, r8, #22
 8007f94:	2165      	movs	r1, #101	; 0x65
 8007f96:	b283      	uxth	r3, r0
 8007f98:	200b      	movs	r0, #11
 8007f9a:	b292      	uxth	r2, r2
 8007f9c:	f7fa f856 	bl	800204c <BSP_LCD_DrawRect>
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
 8007fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fa2:	69a2      	ldr	r2, [r4, #24]
 8007fa4:	2002      	movs	r0, #2
 8007fa6:	b2c9      	uxtb	r1, r1
 8007fa8:	f7f9 fc5c 	bl	8001864 <BSP_AUDIO_OUT_Init>
 8007fac:	4680      	mov	r8, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	f040 80ad 	bne.w	8008114 <AudioPlay_demo+0x248>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007fba:	f7f9 ffc7 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007fbe:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007fc2:	f7f9 ffb9 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC   OK  ", CENTER_MODE);
 8007fc6:	f7f9 ff6d 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007fca:	385f      	subs	r0, #95	; 0x5f
 8007fcc:	4633      	mov	r3, r6
 8007fce:	4a88      	ldr	r2, [pc, #544]	; (80081f0 <AudioPlay_demo+0x324>)
 8007fd0:	b281      	uxth	r1, r0
 8007fd2:	4640      	mov	r0, r8
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8007fd4:	f7fa f8ca 	bl	800216c <BSP_LCD_DisplayStringAt>
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK)
 8007fd8:	f7f9 ff58 	bl	8001e8c <BSP_LCD_GetXSize>
 8007fdc:	4605      	mov	r5, r0
 8007fde:	f7f9 ff61 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007fe2:	b281      	uxth	r1, r0
 8007fe4:	b2a8      	uxth	r0, r5
 8007fe6:	f7fb fb21 	bl	800362c <BSP_TS_Init>
 8007fea:	b1c0      	cbz	r0, 800801e <AudioPlay_demo+0x152>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	f7f9 ffac 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ff4:	487f      	ldr	r0, [pc, #508]	; (80081f4 <AudioPlay_demo+0x328>)
 8007ff6:	f7f9 ff9f 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"ERROR", CENTER_MODE);
 8007ffa:	f7f9 ff53 	bl	8001ea4 <BSP_LCD_GetYSize>
 8007ffe:	3841      	subs	r0, #65	; 0x41
 8008000:	2301      	movs	r3, #1
 8008002:	4a7d      	ldr	r2, [pc, #500]	; (80081f8 <AudioPlay_demo+0x32c>)
 8008004:	b281      	uxth	r1, r0
 8008006:	2000      	movs	r0, #0
 8008008:	f7fa f8b0 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 800800c:	f7f9 ff4a 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008010:	3832      	subs	r0, #50	; 0x32
 8008012:	2301      	movs	r3, #1
 8008014:	4a79      	ldr	r2, [pc, #484]	; (80081fc <AudioPlay_demo+0x330>)
 8008016:	b281      	uxth	r1, r0
 8008018:	2000      	movs	r0, #0
 800801a:	f7fa f8a7 	bl	800216c <BSP_LCD_DisplayStringAt>
  AUDIO_Start(AUDIO_FILE_ADDRESS, AUDIO_FILE_SIZE);
 800801e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008022:	4877      	ldr	r0, [pc, #476]	; (8008200 <AudioPlay_demo+0x334>)
 8008024:	f7ff fee0 	bl	8007de8 <AUDIO_Start>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	f7f9 ff8e 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008030:	4867      	ldr	r0, [pc, #412]	; (80081d0 <AudioPlay_demo+0x304>)
 8008032:	f7f9 ff81 	bl	8001f38 <BSP_LCD_SetTextColor>
  AudioFreq_ptr = AudioFreq+6; /*AF_48K*/
 8008036:	4d73      	ldr	r5, [pc, #460]	; (8008204 <AudioPlay_demo+0x338>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 8008038:	f7f9 ff34 	bl	8001ea4 <BSP_LCD_GetYSize>
 800803c:	3850      	subs	r0, #80	; 0x50
 800803e:	2301      	movs	r3, #1
 8008040:	4a71      	ldr	r2, [pc, #452]	; (8008208 <AudioPlay_demo+0x33c>)
 8008042:	b281      	uxth	r1, r0
 8008044:	2000      	movs	r0, #0
 8008046:	f7fa f891 	bl	800216c <BSP_LCD_DisplayStringAt>
  sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 800804a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800804c:	496f      	ldr	r1, [pc, #444]	; (800820c <AudioPlay_demo+0x340>)
 800804e:	a80c      	add	r0, sp, #48	; 0x30
 8008050:	f002 fc6c 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 8008054:	4e6e      	ldr	r6, [pc, #440]	; (8008210 <AudioPlay_demo+0x344>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8008056:	f7f9 ff25 	bl	8001ea4 <BSP_LCD_GetYSize>
 800805a:	3841      	subs	r0, #65	; 0x41
 800805c:	2301      	movs	r3, #1
 800805e:	aa0c      	add	r2, sp, #48	; 0x30
 8008060:	b281      	uxth	r1, r0
 8008062:	2000      	movs	r0, #0
 8008064:	f7fa f882 	bl	800216c <BSP_LCD_DisplayStringAt>
  sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8008068:	69a2      	ldr	r2, [r4, #24]
 800806a:	496a      	ldr	r1, [pc, #424]	; (8008214 <AudioPlay_demo+0x348>)
 800806c:	a80c      	add	r0, sp, #48	; 0x30
 800806e:	f002 fc5d 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 8008072:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8008208 <AudioPlay_demo+0x33c>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 8008076:	f7f9 ff15 	bl	8001ea4 <BSP_LCD_GetYSize>
 800807a:	3832      	subs	r0, #50	; 0x32
 800807c:	2301      	movs	r3, #1
 800807e:	aa0c      	add	r2, sp, #48	; 0x30
 8008080:	b281      	uxth	r1, r0
 8008082:	2000      	movs	r0, #0
 8008084:	f7fa f872 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_SetVolume(70);
 8008088:	2046      	movs	r0, #70	; 0x46
 800808a:	f7f9 faaf 	bl	80015ec <BSP_AUDIO_OUT_SetVolume>
        if (*AudioFreq_ptr != 96000)
 800808e:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8008220 <AudioPlay_demo+0x354>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008092:	f04f 30ff 	mov.w	r0, #4294967295
 8008096:	f7f9 ff59 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800809a:	484d      	ldr	r0, [pc, #308]	; (80081d0 <AudioPlay_demo+0x304>)
 800809c:	f7f9 ff4c 	bl	8001f38 <BSP_LCD_SetTextColor>
    AUDIO_Process();
 80080a0:	f7ff fec8 	bl	8007e34 <AUDIO_Process>
    BSP_TS_GetState(&TS_State);
 80080a4:	a801      	add	r0, sp, #4
 80080a6:	f7fb fb0b 	bl	80036c0 <BSP_TS_GetState>
    if(TS_State.touchDetected == 1)
 80080aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	f040 80b8 	bne.w	8008224 <AudioPlay_demo+0x358>
      if (TS_State.touchY[0] < 30)
 80080b4:	f8bd a010 	ldrh.w	sl, [sp, #16]
 80080b8:	f1ba 0f1d 	cmp.w	sl, #29
 80080bc:	d842      	bhi.n	8008144 <AudioPlay_demo+0x278>
        if (uwVolume < 95)
 80080be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c0:	2b5e      	cmp	r3, #94	; 0x5e
 80080c2:	d83d      	bhi.n	8008140 <AudioPlay_demo+0x274>
          uwVolume += 5;
 80080c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c6:	3305      	adds	r3, #5
          uwVolume = 0;
 80080c8:	6263      	str	r3, [r4, #36]	; 0x24
        sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 80080ca:	a80c      	add	r0, sp, #48	; 0x30
 80080cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080ce:	494f      	ldr	r1, [pc, #316]	; (800820c <AudioPlay_demo+0x340>)
 80080d0:	f002 fc2c 	bl	800a92c <siprintf>
        BSP_AUDIO_OUT_SetVolume(uwVolume);
 80080d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080d6:	b2c0      	uxtb	r0, r0
 80080d8:	f7f9 fa88 	bl	80015ec <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 80080dc:	f7f9 fee2 	bl	8001ea4 <BSP_LCD_GetYSize>
 80080e0:	3841      	subs	r0, #65	; 0x41
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 80080e2:	b281      	uxth	r1, r0
 80080e4:	2301      	movs	r3, #1
 80080e6:	aa0c      	add	r2, sp, #48	; 0x30
 80080e8:	2000      	movs	r0, #0
 80080ea:	f7fa f83f 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 80080ee:	a801      	add	r0, sp, #4
 80080f0:	f7fb fae6 	bl	80036c0 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 80080f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1f8      	bne.n	80080ee <AudioPlay_demo+0x222>
    if (CheckForUserInput() > 0)
 80080fc:	f001 f88e 	bl	800921c <CheckForUserInput>
 8008100:	2800      	cmp	r0, #0
 8008102:	d0cd      	beq.n	80080a0 <AudioPlay_demo+0x1d4>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8008104:	2002      	movs	r0, #2
 8008106:	f7f9 fa57 	bl	80015b8 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit();
 800810a:	f7f9 fb6f 	bl	80017ec <BSP_AUDIO_OUT_DeInit>
}
 800810e:	b04d      	add	sp, #308	; 0x134
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008114:	f7f9 ff1a 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008118:	4836      	ldr	r0, [pc, #216]	; (80081f4 <AudioPlay_demo+0x328>)
 800811a:	f7f9 ff0d 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC  FAIL ", CENTER_MODE);
 800811e:	f7f9 fec1 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008122:	385f      	subs	r0, #95	; 0x5f
 8008124:	4633      	mov	r3, r6
 8008126:	4a3c      	ldr	r2, [pc, #240]	; (8008218 <AudioPlay_demo+0x34c>)
 8008128:	b281      	uxth	r1, r0
 800812a:	4628      	mov	r0, r5
 800812c:	f7fa f81e 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008130:	f7f9 feb8 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008134:	3850      	subs	r0, #80	; 0x50
 8008136:	4633      	mov	r3, r6
 8008138:	4a38      	ldr	r2, [pc, #224]	; (800821c <AudioPlay_demo+0x350>)
 800813a:	b281      	uxth	r1, r0
 800813c:	4628      	mov	r0, r5
 800813e:	e749      	b.n	8007fd4 <AudioPlay_demo+0x108>
          uwVolume = 100;
 8008140:	2364      	movs	r3, #100	; 0x64
 8008142:	e7c1      	b.n	80080c8 <AudioPlay_demo+0x1fc>
      else if (TS_State.touchY[0] > (BSP_LCD_GetYSize() - 30))
 8008144:	f7f9 feae 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008148:	381e      	subs	r0, #30
 800814a:	4582      	cmp	sl, r0
 800814c:	d907      	bls.n	800815e <AudioPlay_demo+0x292>
        if (uwVolume > 5)
 800814e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008150:	2b05      	cmp	r3, #5
 8008152:	d902      	bls.n	800815a <AudioPlay_demo+0x28e>
          uwVolume -= 5;
 8008154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008156:	3b05      	subs	r3, #5
 8008158:	e7b6      	b.n	80080c8 <AudioPlay_demo+0x1fc>
          uwVolume = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	e7b4      	b.n	80080c8 <AudioPlay_demo+0x1fc>
      else if (TS_State.touchX[0] < 30)
 800815e:	f8bd a006 	ldrh.w	sl, [sp, #6]
 8008162:	f1ba 0f1d 	cmp.w	sl, #29
 8008166:	d81c      	bhi.n	80081a2 <AudioPlay_demo+0x2d6>
        if (*AudioFreq_ptr != 8000)
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800816e:	d014      	beq.n	800819a <AudioPlay_demo+0x2ce>
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8008170:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8008174:	a80c      	add	r0, sp, #48	; 0x30
 8008176:	4927      	ldr	r1, [pc, #156]	; (8008214 <AudioPlay_demo+0x348>)
          AudioFreq_ptr--;
 8008178:	f1a5 0a04 	sub.w	sl, r5, #4
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 800817c:	f002 fbd6 	bl	800a92c <siprintf>
          BSP_AUDIO_OUT_Pause();
 8008180:	f7f9 f9f2 	bl	8001568 <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 8008184:	f855 0c04 	ldr.w	r0, [r5, #-4]
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 8008188:	f7f9 fbd6 	bl	8001938 <BSP_AUDIO_OUT_SetFrequency>
          AudioFreq_ptr++;
 800818c:	4655      	mov	r5, sl
          BSP_AUDIO_OUT_Resume();
 800818e:	f7f9 f9ff 	bl	8001590 <BSP_AUDIO_OUT_Resume>
          BSP_AUDIO_OUT_SetVolume(uwVolume);
 8008192:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008194:	b2c0      	uxtb	r0, r0
 8008196:	f7f9 fa29 	bl	80015ec <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 800819a:	f7f9 fe83 	bl	8001ea4 <BSP_LCD_GetYSize>
 800819e:	3832      	subs	r0, #50	; 0x32
 80081a0:	e79f      	b.n	80080e2 <AudioPlay_demo+0x216>
      else if (TS_State.touchX[0] > (BSP_LCD_GetXSize() - 30))
 80081a2:	f7f9 fe73 	bl	8001e8c <BSP_LCD_GetXSize>
 80081a6:	381e      	subs	r0, #30
 80081a8:	4582      	cmp	sl, r0
 80081aa:	d9a0      	bls.n	80080ee <AudioPlay_demo+0x222>
        if (*AudioFreq_ptr != 96000)
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	454b      	cmp	r3, r9
 80081b0:	d0f3      	beq.n	800819a <AudioPlay_demo+0x2ce>
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80081b2:	686a      	ldr	r2, [r5, #4]
 80081b4:	a80c      	add	r0, sp, #48	; 0x30
 80081b6:	4917      	ldr	r1, [pc, #92]	; (8008214 <AudioPlay_demo+0x348>)
          AudioFreq_ptr++;
 80081b8:	f105 0a04 	add.w	sl, r5, #4
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80081bc:	f002 fbb6 	bl	800a92c <siprintf>
          BSP_AUDIO_OUT_Pause();
 80081c0:	f7f9 f9d2 	bl	8001568 <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 80081c4:	6868      	ldr	r0, [r5, #4]
 80081c6:	e7df      	b.n	8008188 <AudioPlay_demo+0x2bc>
 80081c8:	200000ac 	.word	0x200000ac
 80081cc:	20000c80 	.word	0x20000c80
 80081d0:	ff0000ff 	.word	0xff0000ff
 80081d4:	20000074 	.word	0x20000074
 80081d8:	08011d85 	.word	0x08011d85
 80081dc:	20000084 	.word	0x20000084
 80081e0:	08011cf5 	.word	0x08011cf5
 80081e4:	08011d93 	.word	0x08011d93
 80081e8:	08011dbf 	.word	0x08011dbf
 80081ec:	08011deb 	.word	0x08011deb
 80081f0:	08011e17 	.word	0x08011e17
 80081f4:	ffff0000 	.word	0xffff0000
 80081f8:	080127ad 	.word	0x080127ad
 80081fc:	08011e41 	.word	0x08011e41
 8008200:	08080000 	.word	0x08080000
 8008204:	200000c4 	.word	0x200000c4
 8008208:	08011e63 	.word	0x08011e63
 800820c:	08011e7a 	.word	0x08011e7a
 8008210:	08011ea9 	.word	0x08011ea9
 8008214:	08011e93 	.word	0x08011e93
 8008218:	08011e2c 	.word	0x08011e2c
 800821c:	08011d47 	.word	0x08011d47
 8008220:	00017700 	.word	0x00017700
    if (TS_State.touchDetected >= 2)
 8008224:	f67f af6a 	bls.w	80080fc <AudioPlay_demo+0x230>
      if (uwPauseEnabledStatus == 1)
 8008228:	f8d7 b830 	ldr.w	fp, [r7, #2096]	; 0x830
 800822c:	f1bb 0f01 	cmp.w	fp, #1
 8008230:	d116      	bne.n	8008260 <AudioPlay_demo+0x394>
        uwPauseEnabledStatus = 0;
 8008232:	f04f 0a00 	mov.w	sl, #0
        BSP_AUDIO_OUT_Resume();
 8008236:	f7f9 f9ab 	bl	8001590 <BSP_AUDIO_OUT_Resume>
        uwPauseEnabledStatus = 0;
 800823a:	f8c7 a830 	str.w	sl, [r7, #2096]	; 0x830
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 800823e:	f7f9 fe31 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008242:	465b      	mov	r3, fp
 8008244:	3850      	subs	r0, #80	; 0x50
 8008246:	4642      	mov	r2, r8
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 8008248:	b281      	uxth	r1, r0
 800824a:	2000      	movs	r0, #0
 800824c:	f7f9 ff8e 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 8008250:	a801      	add	r0, sp, #4
 8008252:	f7fb fa35 	bl	80036c0 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 8008256:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f8      	bne.n	8008250 <AudioPlay_demo+0x384>
 800825e:	e74d      	b.n	80080fc <AudioPlay_demo+0x230>
        uwPauseEnabledStatus = 1;
 8008260:	f04f 0a01 	mov.w	sl, #1
        BSP_AUDIO_OUT_Pause();
 8008264:	f7f9 f980 	bl	8001568 <BSP_AUDIO_OUT_Pause>
        uwPauseEnabledStatus = 1;
 8008268:	f8c7 a830 	str.w	sl, [r7, #2096]	; 0x830
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 800826c:	f7f9 fe1a 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008270:	4653      	mov	r3, sl
 8008272:	3850      	subs	r0, #80	; 0x50
 8008274:	4632      	mov	r2, r6
 8008276:	e7e7      	b.n	8008248 <AudioPlay_demo+0x37c>

08008278 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8008278:	4b03      	ldr	r3, [pc, #12]	; (8008288 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 800827a:	f893 282c 	ldrb.w	r2, [r3, #2092]	; 0x82c
 800827e:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8008280:	bf08      	it	eq
 8008282:	f883 2824 	strbeq.w	r2, [r3, #2084]	; 0x824
  }
}
 8008286:	4770      	bx	lr
 8008288:	20000c80 	.word	0x20000c80

0800828c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 800828c:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 800828e:	f893 282c 	ldrb.w	r2, [r3, #2092]	; 0x82c
 8008292:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8008294:	bf04      	itt	eq
 8008296:	2201      	moveq	r2, #1
 8008298:	f883 2824 	strbeq.w	r2, [r3, #2084]	; 0x824
  }
}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000c80 	.word	0x20000c80

080082a4 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80082a4:	b508      	push	{r3, lr}
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80082a6:	4806      	ldr	r0, [pc, #24]	; (80082c0 <BSP_AUDIO_OUT_Error_CallBack+0x1c>)
 80082a8:	f7f9 fe50 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 80082ac:	200e      	movs	r0, #14
 80082ae:	4905      	ldr	r1, [pc, #20]	; (80082c4 <BSP_AUDIO_OUT_Error_CallBack+0x20>)
 80082b0:	f7f9 ffb4 	bl	800221c <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80082b4:	2002      	movs	r0, #2
    return;
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80082b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80082ba:	f7f9 b809 	b.w	80012d0 <BSP_PB_GetState>
 80082be:	bf00      	nop
 80082c0:	ffff0000 	.word	0xffff0000
 80082c4:	08011ec0 	.word	0x08011ec0

080082c8 <AudioRec_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioRec_demo (void)
{
 80082c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  * @retval None
  */
static void AudioRec_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	f7f9 fe5a 	bl	8001f88 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80082d4:	4874      	ldr	r0, [pc, #464]	; (80084a8 <AudioRec_demo+0x1e0>)
 80082d6:	f7f9 fe2f 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 80082da:	f7f9 fdd7 	bl	8001e8c <BSP_LCD_GetXSize>
 80082de:	2100      	movs	r1, #0
 80082e0:	b282      	uxth	r2, r0
 80082e2:	235a      	movs	r3, #90	; 0x5a
 80082e4:	4608      	mov	r0, r1
 80082e6:	f7fa fa0d 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295
 80082ee:	f7f9 fe23 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80082f2:	486d      	ldr	r0, [pc, #436]	; (80084a8 <AudioRec_demo+0x1e0>)
 80082f4:	f7f9 fe2a 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80082f8:	486c      	ldr	r0, [pc, #432]	; (80084ac <AudioRec_demo+0x1e4>)
 80082fa:	f7f9 fe31 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD EXAMPLE", CENTER_MODE);
 80082fe:	2100      	movs	r1, #0
 8008300:	2301      	movs	r3, #1
 8008302:	4a6b      	ldr	r2, [pc, #428]	; (80084b0 <AudioRec_demo+0x1e8>)
 8008304:	4608      	mov	r0, r1
 8008306:	f7f9 ff31 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800830a:	486a      	ldr	r0, [pc, #424]	; (80084b4 <AudioRec_demo+0x1ec>)
 800830c:	f7f9 fe28 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8008310:	2301      	movs	r3, #1
 8008312:	4a69      	ldr	r2, [pc, #420]	; (80084b8 <AudioRec_demo+0x1f0>)
 8008314:	211e      	movs	r1, #30
 8008316:	2000      	movs	r0, #0
 8008318:	f7f9 ff28 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800831c:	4862      	ldr	r0, [pc, #392]	; (80084a8 <AudioRec_demo+0x1e0>)
 800831e:	f7f9 fe0b 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8008322:	f7f9 fdb3 	bl	8001e8c <BSP_LCD_GetXSize>
 8008326:	4604      	mov	r4, r0
 8008328:	f7f9 fdbc 	bl	8001ea4 <BSP_LCD_GetYSize>
 800832c:	386e      	subs	r0, #110	; 0x6e
 800832e:	f1a4 0214 	sub.w	r2, r4, #20
 8008332:	2164      	movs	r1, #100	; 0x64
 8008334:	b283      	uxth	r3, r0
 8008336:	200a      	movs	r0, #10
 8008338:	b292      	uxth	r2, r2
 800833a:	f7f9 fe87 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 800833e:	f7f9 fda5 	bl	8001e8c <BSP_LCD_GetXSize>
 8008342:	4604      	mov	r4, r0
 8008344:	f7f9 fdae 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008348:	3870      	subs	r0, #112	; 0x70
 800834a:	f1a4 0216 	sub.w	r2, r4, #22
 800834e:	2165      	movs	r1, #101	; 0x65
 8008350:	b283      	uxth	r3, r0
 8008352:	200b      	movs	r0, #11
 8008354:	b292      	uxth	r2, r2
 8008356:	f7f9 fe79 	bl	800204c <BSP_LCD_DrawRect>
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 800835a:	2202      	movs	r2, #2
 800835c:	2110      	movs	r1, #16
 800835e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008362:	f7f9 fc21 	bl	8001ba8 <BSP_AUDIO_IN_Init>
 8008366:	4604      	mov	r4, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 800836c:	2c00      	cmp	r4, #0
 800836e:	d179      	bne.n	8008464 <AudioRec_demo+0x19c>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008370:	f7f9 fdec 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008374:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8008378:	f7f9 fdde 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 800837c:	f7f9 fd92 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008380:	2301      	movs	r3, #1
 8008382:	385f      	subs	r0, #95	; 0x5f
 8008384:	4a4d      	ldr	r2, [pc, #308]	; (80084bc <AudioRec_demo+0x1f4>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008386:	b281      	uxth	r1, r0
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008388:	2400      	movs	r4, #0
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800838a:	2000      	movs	r0, #0
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800838c:	4d4c      	ldr	r5, [pc, #304]	; (80084c0 <AudioRec_demo+0x1f8>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800838e:	f7f9 feed 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008392:	f04f 30ff 	mov.w	r0, #4294967295
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008396:	602c      	str	r4, [r5, #0]
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008398:	f7f9 fdd8 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800839c:	4842      	ldr	r0, [pc, #264]	; (80084a8 <AudioRec_demo+0x1e0>)
 800839e:	f7f9 fdcb 	bl	8001f38 <BSP_LCD_SetTextColor>
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80083a2:	f8df a128 	ldr.w	sl, [pc, #296]	; 80084cc <AudioRec_demo+0x204>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80083a6:	f7f9 fd7d 	bl	8001ea4 <BSP_LCD_GetYSize>
 80083aa:	3850      	subs	r0, #80	; 0x50
 80083ac:	2301      	movs	r3, #1
 80083ae:	4a45      	ldr	r2, [pc, #276]	; (80084c4 <AudioRec_demo+0x1fc>)
 80083b0:	b281      	uxth	r1, r0
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 80083b2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80084e8 <AudioRec_demo+0x220>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80083b6:	4620      	mov	r0, r4
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 80083b8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80084ec <AudioRec_demo+0x224>
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80083bc:	4c42      	ldr	r4, [pc, #264]	; (80084c8 <AudioRec_demo+0x200>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80083be:	f7f9 fed5 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80083c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80083c6:	4841      	ldr	r0, [pc, #260]	; (80084cc <AudioRec_demo+0x204>)
 80083c8:	f7f9 fad0 	bl	800196c <BSP_AUDIO_IN_Record>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d15c      	bne.n	800848c <AudioRec_demo+0x1c4>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80083d2:	2300      	movs	r3, #0
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80083d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083d8:	4651      	mov	r1, sl
 80083da:	4620      	mov	r0, r4
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80083dc:	602b      	str	r3, [r5, #0]
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80083de:	f002 fa43 	bl	800a868 <memcpy>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80083e2:	682f      	ldr	r7, [r5, #0]
 80083e4:	2f02      	cmp	r7, #2
 80083e6:	d15a      	bne.n	800849e <AudioRec_demo+0x1d6>
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 80083e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80083ec:	2600      	movs	r6, #0
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 80083ee:	4649      	mov	r1, r9
 80083f0:	18a0      	adds	r0, r4, r2
 80083f2:	f504 34ff 	add.w	r4, r4, #130560	; 0x1fe00
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80083f6:	602e      	str	r6, [r5, #0]
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 80083f8:	f002 fa36 	bl	800a868 <memcpy>
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 80083fc:	f504 74fe 	add.w	r4, r4, #508	; 0x1fc
 8008400:	4544      	cmp	r4, r8
 8008402:	d1e3      	bne.n	80083cc <AudioRec_demo+0x104>
  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8008404:	4638      	mov	r0, r7
 8008406:	f7f9 fabb 	bl	8001980 <BSP_AUDIO_IN_Stop>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
 800840e:	f7f9 fd9d 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008412:	4825      	ldr	r0, [pc, #148]	; (80084a8 <AudioRec_demo+0x1e0>)
 8008414:	f7f9 fd90 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"RECORDING DONE, START PLAYBACK...", CENTER_MODE);
 8008418:	f7f9 fd44 	bl	8001ea4 <BSP_LCD_GetYSize>
 800841c:	3841      	subs	r0, #65	; 0x41
 800841e:	2301      	movs	r3, #1
 8008420:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <AudioRec_demo+0x208>)
 8008422:	b281      	uxth	r1, r0
 8008424:	4630      	mov	r0, r6
 8008426:	f7f9 fea1 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 800842a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800842e:	2146      	movs	r1, #70	; 0x46
 8008430:	4638      	mov	r0, r7
 8008432:	f7f9 fa17 	bl	8001864 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8008436:	2005      	movs	r0, #5
 8008438:	f7f9 f8e6 	bl	8001608 <BSP_AUDIO_OUT_SetAudioFrameSlot>
  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 800843c:	4925      	ldr	r1, [pc, #148]	; (80084d4 <AudioRec_demo+0x20c>)
 800843e:	4822      	ldr	r0, [pc, #136]	; (80084c8 <AudioRec_demo+0x200>)
 8008440:	f7ff fcd2 	bl	8007de8 <AUDIO_Start>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 40, (uint8_t *)"PLAYBACK DONE", CENTER_MODE);
 8008444:	f7f9 fd2e 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008448:	3828      	subs	r0, #40	; 0x28
 800844a:	2301      	movs	r3, #1
 800844c:	4a22      	ldr	r2, [pc, #136]	; (80084d8 <AudioRec_demo+0x210>)
 800844e:	b281      	uxth	r1, r0
 8008450:	4630      	mov	r0, r6
 8008452:	f7f9 fe8b 	bl	800216c <BSP_LCD_DisplayStringAt>
    AUDIO_Process();
 8008456:	f7ff fced 	bl	8007e34 <AUDIO_Process>
    if (CheckForUserInput() > 0)
 800845a:	f000 fedf 	bl	800921c <CheckForUserInput>
 800845e:	2800      	cmp	r0, #0
 8008460:	d0f9      	beq.n	8008456 <AudioRec_demo+0x18e>
 8008462:	e017      	b.n	8008494 <AudioRec_demo+0x1cc>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008464:	f7f9 fd72 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008468:	481c      	ldr	r0, [pc, #112]	; (80084dc <AudioRec_demo+0x214>)
 800846a:	f7f9 fd65 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 800846e:	f7f9 fd19 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008472:	385f      	subs	r0, #95	; 0x5f
 8008474:	2301      	movs	r3, #1
 8008476:	4a1a      	ldr	r2, [pc, #104]	; (80084e0 <AudioRec_demo+0x218>)
 8008478:	b281      	uxth	r1, r0
 800847a:	2000      	movs	r0, #0
 800847c:	f7f9 fe76 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008480:	f7f9 fd10 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008484:	2301      	movs	r3, #1
 8008486:	3850      	subs	r0, #80	; 0x50
 8008488:	4a16      	ldr	r2, [pc, #88]	; (80084e4 <AudioRec_demo+0x21c>)
 800848a:	e77c      	b.n	8008386 <AudioRec_demo+0xbe>
      if (CheckForUserInput() > 0)
 800848c:	f000 fec6 	bl	800921c <CheckForUserInput>
 8008490:	2800      	cmp	r0, #0
 8008492:	d09b      	beq.n	80083cc <AudioRec_demo+0x104>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8008494:	2002      	movs	r0, #2
}
 8008496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800849a:	f7f9 b88d 	b.w	80015b8 <BSP_AUDIO_OUT_Stop>
      if (CheckForUserInput() > 0)
 800849e:	f000 febd 	bl	800921c <CheckForUserInput>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d09d      	beq.n	80083e2 <AudioRec_demo+0x11a>
 80084a6:	e7f5      	b.n	8008494 <AudioRec_demo+0x1cc>
 80084a8:	ff0000ff 	.word	0xff0000ff
 80084ac:	20000074 	.word	0x20000074
 80084b0:	08011ed7 	.word	0x08011ed7
 80084b4:	20000084 	.word	0x20000084
 80084b8:	08011cf5 	.word	0x08011cf5
 80084bc:	08011d15 	.word	0x08011d15
 80084c0:	20022bd8 	.word	0x20022bd8
 80084c4:	08011eec 	.word	0x08011eec
 80084c8:	c0115800 	.word	0xc0115800
 80084cc:	200014b4 	.word	0x200014b4
 80084d0:	08011f05 	.word	0x08011f05
 80084d4:	0007fff0 	.word	0x0007fff0
 80084d8:	08011f27 	.word	0x08011f27
 80084dc:	ffff0000 	.word	0xffff0000
 80084e0:	08011d2e 	.word	0x08011d2e
 80084e4:	08011d47 	.word	0x08011d47
 80084e8:	200114b2 	.word	0x200114b2
 80084ec:	c01957f0 	.word	0xc01957f0

080084f0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80084f0:	4b01      	ldr	r3, [pc, #4]	; (80084f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 80084f2:	2202      	movs	r2, #2
 80084f4:	601a      	str	r2, [r3, #0]
  return;
}
 80084f6:	4770      	bx	lr
 80084f8:	20022bd8 	.word	0x20022bd8

080084fc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 80084fc:	4b01      	ldr	r3, [pc, #4]	; (8008504 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]
  return;
}
 8008502:	4770      	bx	lr
 8008504:	20022bd8 	.word	0x20022bd8

08008508 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8008508:	b508      	push	{r3, lr}
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800850a:	480a      	ldr	r0, [pc, #40]	; (8008534 <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 800850c:	f7f9 fd1e 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 8008510:	f7f9 fd30 	bl	8001f74 <BSP_LCD_GetFont>
 8008514:	88c1      	ldrh	r1, [r0, #6]
 8008516:	2301      	movs	r3, #1
 8008518:	2000      	movs	r0, #0
 800851a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800851e:	4a06      	ldr	r2, [pc, #24]	; (8008538 <BSP_AUDIO_IN_Error_CallBack+0x30>)
 8008520:	0049      	lsls	r1, r1, #1
 8008522:	b289      	uxth	r1, r1
 8008524:	f7f9 fe22 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8008528:	2002      	movs	r0, #2
  {
    return;
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800852a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800852e:	f7f8 becf 	b.w	80012d0 <BSP_PB_GetState>
 8008532:	bf00      	nop
 8008534:	ffff0000 	.word	0xffff0000
 8008538:	08011ec0 	.word	0x08011ec0

0800853c <BSP_LCD_DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_LCD_DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hdma2d_camera);
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <BSP_LCD_DMA2D_IRQHandler+0x8>)
 800853e:	f7fb bd7a 	b.w	8004036 <HAL_DMA2D_IRQHandler>
 8008542:	bf00      	nop
 8008544:	200214b8 	.word	0x200214b8

08008548 <HAL_DMA2D_MspInit>:
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <HAL_DMA2D_MspInit+0x2c>)
{
 800854a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800854c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*##-2- NVIC configuration  ################################################*/
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800854e:	205a      	movs	r0, #90	; 0x5a
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008550:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8008556:	2200      	movs	r2, #0
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800855a:	4611      	mov	r1, r2
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800855c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8008564:	f7fb f9f2 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008568:	205a      	movs	r0, #90	; 0x5a
}
 800856a:	b003      	add	sp, #12
 800856c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008570:	f7fb ba1e 	b.w	80039b0 <HAL_NVIC_EnableIRQ>
 8008574:	40023800 	.word	0x40023800

08008578 <EEPROM_Show_Feature>:
  * @brief  Show EEPROM Features
  * @param  Feature : feature index
  * @retval None
  */
static void EEPROM_Show_Feature(uint8_t Feature)
{
 8008578:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  __IO TestStatus TransferStatus1 = FAILED;
 800857c:	2500      	movs	r5, #0
{
 800857e:	4604      	mov	r4, r0
  __IO uint16_t NumDataRead = 0;

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008580:	f04f 30ff 	mov.w	r0, #4294967295
  __IO TestStatus TransferStatus1 = FAILED;
 8008584:	f88d 500d 	strb.w	r5, [sp, #13]
  __IO uint16_t NumDataRead = 0;
 8008588:	f8ad 500e 	strh.w	r5, [sp, #14]
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800858c:	f7f9 fcde 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008590:	f04f 30ff 	mov.w	r0, #4294967295
 8008594:	f7f9 fcd0 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 8008598:	f7f9 fc78 	bl	8001e8c <BSP_LCD_GetXSize>
 800859c:	4606      	mov	r6, r0
 800859e:	f7f9 fc81 	bl	8001ea4 <BSP_LCD_GetYSize>
 80085a2:	3868      	subs	r0, #104	; 0x68
 80085a4:	f1a6 0218 	sub.w	r2, r6, #24
 80085a8:	215c      	movs	r1, #92	; 0x5c
 80085aa:	b283      	uxth	r3, r0
 80085ac:	200c      	movs	r0, #12
 80085ae:	b292      	uxth	r2, r2
 80085b0:	f7fa f8a8 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80085b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80085b8:	f7f9 fcbe 	bl	8001f38 <BSP_LCD_SetTextColor>

  /* Initialize the I2C EEPROM driver ----------------------------------------*/
  if (BSP_EEPROM_Init() != EEPROM_OK)
 80085bc:	f7f9 fb4a 	bl	8001c54 <BSP_EEPROM_Init>
 80085c0:	4606      	mov	r6, r0
 80085c2:	b1a8      	cbz	r0, 80085f0 <EEPROM_Show_Feature+0x78>
  {
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80085c4:	489a      	ldr	r0, [pc, #616]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 80085c6:	f7f9 fcb7 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Initialization problem", CENTER_MODE);
 80085ca:	2301      	movs	r3, #1
 80085cc:	4a99      	ldr	r2, [pc, #612]	; (8008834 <EEPROM_Show_Feature+0x2bc>)
 80085ce:	2173      	movs	r1, #115	; 0x73
 80085d0:	4628      	mov	r0, r5
 80085d2:	f7f9 fdcb 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Check if HW connected or", CENTER_MODE);
 80085d6:	2301      	movs	r3, #1
 80085d8:	4a97      	ldr	r2, [pc, #604]	; (8008838 <EEPROM_Show_Feature+0x2c0>)
 80085da:	2182      	movs	r1, #130	; 0x82
 80085dc:	4628      	mov	r0, r5
 80085de:	f7f9 fdc5 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"HW version not supported", CENTER_MODE);
 80085e2:	2301      	movs	r3, #1
 80085e4:	4a95      	ldr	r2, [pc, #596]	; (800883c <EEPROM_Show_Feature+0x2c4>)
      else
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"with EEPROM", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 80085e6:	2191      	movs	r1, #145	; 0x91
        if (TransferStatus1 != FAILED)
        {
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String write", CENTER_MODE);
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
          BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 80085e8:	2000      	movs	r0, #0
      else
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"again with EEPROM", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 80085ea:	f7f9 fdbf 	bl	800216c <BSP_LCD_DisplayStringAt>
 80085ee:	e009      	b.n	8008604 <EEPROM_Show_Feature+0x8c>
  EEPROMConnected = 1;
 80085f0:	4f93      	ldr	r7, [pc, #588]	; (8008840 <EEPROM_Show_Feature+0x2c8>)
 80085f2:	f04f 0801 	mov.w	r8, #1
 80085f6:	f887 8000 	strb.w	r8, [r7]
  BSP_EEPROM_WaitEepromStandbyState();
 80085fa:	f7f9 fb5b 	bl	8001cb4 <BSP_EEPROM_WaitEepromStandbyState>
  switch (Feature)
 80085fe:	b124      	cbz	r4, 800860a <EEPROM_Show_Feature+0x92>
 8008600:	4544      	cmp	r4, r8
 8008602:	d05d      	beq.n	80086c0 <EEPROM_Show_Feature+0x148>
      }
      break;
  }
}
 8008604:	b004      	add	sp, #16
 8008606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (EEPROMConnected == 1)
 800860a:	783d      	ldrb	r5, [r7, #0]
 800860c:	2d01      	cmp	r5, #1
 800860e:	d145      	bne.n	800869c <EEPROM_Show_Feature+0x124>
        NumDataRead = BUFFER_SIZE1;
 8008610:	f240 230f 	movw	r3, #527	; 0x20f
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8008614:	f10d 020e 	add.w	r2, sp, #14
 8008618:	2149      	movs	r1, #73	; 0x49
 800861a:	488a      	ldr	r0, [pc, #552]	; (8008844 <EEPROM_Show_Feature+0x2cc>)
        NumDataRead = BUFFER_SIZE1;
 800861c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8008620:	f7f9 fb34 	bl	8001c8c <BSP_EEPROM_ReadBuffer>
 8008624:	4606      	mov	r6, r0
 8008626:	b1b0      	cbz	r0, 8008656 <EEPROM_Show_Feature+0xde>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008628:	4881      	ldr	r0, [pc, #516]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 800862a:	f7f9 fc85 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read old data", CENTER_MODE);
 800862e:	462b      	mov	r3, r5
 8008630:	4a85      	ldr	r2, [pc, #532]	; (8008848 <EEPROM_Show_Feature+0x2d0>)
 8008632:	2173      	movs	r1, #115	; 0x73
 8008634:	4620      	mov	r0, r4
 8008636:	f7f9 fd99 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800863a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800863e:	f7f9 fc7b 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 8008642:	462b      	mov	r3, r5
 8008644:	4a81      	ldr	r2, [pc, #516]	; (800884c <EEPROM_Show_Feature+0x2d4>)
 8008646:	2191      	movs	r1, #145	; 0x91
 8008648:	4620      	mov	r0, r4
 800864a:	f7f9 fd8f 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"To write new data", CENTER_MODE);
 800864e:	462b      	mov	r3, r5
 8008650:	4a7f      	ldr	r2, [pc, #508]	; (8008850 <EEPROM_Show_Feature+0x2d8>)
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 8008652:	21a0      	movs	r1, #160	; 0xa0
 8008654:	e7c8      	b.n	80085e8 <EEPROM_Show_Feature+0x70>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String read", CENTER_MODE);
 8008656:	462b      	mov	r3, r5
 8008658:	4a7e      	ldr	r2, [pc, #504]	; (8008854 <EEPROM_Show_Feature+0x2dc>)
 800865a:	2173      	movs	r1, #115	; 0x73
 800865c:	f7f9 fd86 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
 8008660:	462b      	mov	r3, r5
 8008662:	4a7d      	ldr	r2, [pc, #500]	; (8008858 <EEPROM_Show_Feature+0x2e0>)
 8008664:	2182      	movs	r1, #130	; 0x82
 8008666:	4630      	mov	r0, r6
 8008668:	f7f9 fd80 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800866c:	487b      	ldr	r0, [pc, #492]	; (800885c <EEPROM_Show_Feature+0x2e4>)
 800866e:	f7f9 fc63 	bl	8001f38 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 160, Rx1Buffer, CENTER_MODE);
 8008672:	462b      	mov	r3, r5
 8008674:	4a73      	ldr	r2, [pc, #460]	; (8008844 <EEPROM_Show_Feature+0x2cc>)
 8008676:	21a0      	movs	r1, #160	; 0xa0
 8008678:	4630      	mov	r0, r6
 800867a:	f7f9 fd77 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800867e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008682:	f7f9 fc59 	bl	8001f38 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"Press USER key", CENTER_MODE);
 8008686:	462b      	mov	r3, r5
 8008688:	4a75      	ldr	r2, [pc, #468]	; (8008860 <EEPROM_Show_Feature+0x2e8>)
 800868a:	21be      	movs	r1, #190	; 0xbe
 800868c:	4630      	mov	r0, r6
 800868e:	f7f9 fd6d 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 205, (uint8_t *)"To write new data", CENTER_MODE);
 8008692:	462b      	mov	r3, r5
 8008694:	4a6e      	ldr	r2, [pc, #440]	; (8008850 <EEPROM_Show_Feature+0x2d8>)
 8008696:	21cd      	movs	r1, #205	; 0xcd
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8008698:	4630      	mov	r0, r6
 800869a:	e7a6      	b.n	80085ea <EEPROM_Show_Feature+0x72>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800869c:	4864      	ldr	r0, [pc, #400]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 800869e:	f7f9 fc4b 	bl	8001f38 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
 80086a2:	4643      	mov	r3, r8
 80086a4:	4a6f      	ldr	r2, [pc, #444]	; (8008864 <EEPROM_Show_Feature+0x2ec>)
 80086a6:	2173      	movs	r1, #115	; 0x73
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7f9 fd5f 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"with EEPROM", CENTER_MODE);
 80086ae:	4643      	mov	r3, r8
 80086b0:	4a6d      	ldr	r2, [pc, #436]	; (8008868 <EEPROM_Show_Feature+0x2f0>)
 80086b2:	2182      	movs	r1, #130	; 0x82
 80086b4:	4620      	mov	r0, r4
 80086b6:	f7f9 fd59 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 80086ba:	4643      	mov	r3, r8
 80086bc:	4a63      	ldr	r2, [pc, #396]	; (800884c <EEPROM_Show_Feature+0x2d4>)
 80086be:	e792      	b.n	80085e6 <EEPROM_Show_Feature+0x6e>
      if (EEPROMConnected == 1)
 80086c0:	783d      	ldrb	r5, [r7, #0]
 80086c2:	2d01      	cmp	r5, #1
 80086c4:	f040 80a1 	bne.w	800880a <EEPROM_Show_Feature+0x292>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80086c8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80086cc:	f7f9 fc34 	bl	8001f38 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Writing...", CENTER_MODE);
 80086d0:	462b      	mov	r3, r5
 80086d2:	4a66      	ldr	r2, [pc, #408]	; (800886c <EEPROM_Show_Feature+0x2f4>)
 80086d4:	2173      	movs	r1, #115	; 0x73
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7f9 fd48 	bl	800216c <BSP_LCD_DisplayStringAt>
        snprintf((char*)Tx2Buffer, BUFFER_SIZE1, "%s Test %d", Tx1Buffer, NbLoop);
 80086dc:	4b64      	ldr	r3, [pc, #400]	; (8008870 <EEPROM_Show_Feature+0x2f8>)
 80086de:	4a65      	ldr	r2, [pc, #404]	; (8008874 <EEPROM_Show_Feature+0x2fc>)
 80086e0:	f240 210f 	movw	r1, #527	; 0x20f
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	4864      	ldr	r0, [pc, #400]	; (8008878 <EEPROM_Show_Feature+0x300>)
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	1c7b      	adds	r3, r7, #1
 80086ec:	f002 f8ea 	bl	800a8c4 <sniprintf>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 80086f0:	f240 220f 	movw	r2, #527	; 0x20f
 80086f4:	2149      	movs	r1, #73	; 0x49
 80086f6:	4860      	ldr	r0, [pc, #384]	; (8008878 <EEPROM_Show_Feature+0x300>)
 80086f8:	f7f9 fb08 	bl	8001d0c <BSP_EEPROM_WriteBuffer>
 80086fc:	b130      	cbz	r0, 800870c <EEPROM_Show_Feature+0x194>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80086fe:	484c      	ldr	r0, [pc, #304]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 8008700:	f7f9 fc1a 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 1", CENTER_MODE);
 8008704:	462b      	mov	r3, r5
 8008706:	4a5d      	ldr	r2, [pc, #372]	; (800887c <EEPROM_Show_Feature+0x304>)
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 4", CENTER_MODE);
 8008708:	2173      	movs	r1, #115	; 0x73
 800870a:	e7c5      	b.n	8008698 <EEPROM_Show_Feature+0x120>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 800870c:	f240 220f 	movw	r2, #527	; 0x20f
 8008710:	2149      	movs	r1, #73	; 0x49
 8008712:	4859      	ldr	r0, [pc, #356]	; (8008878 <EEPROM_Show_Feature+0x300>)
 8008714:	f7f9 fafa 	bl	8001d0c <BSP_EEPROM_WriteBuffer>
 8008718:	b130      	cbz	r0, 8008728 <EEPROM_Show_Feature+0x1b0>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800871a:	4845      	ldr	r0, [pc, #276]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 800871c:	f7f9 fc0c 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 2", CENTER_MODE);
 8008720:	462b      	mov	r3, r5
 8008722:	4a57      	ldr	r2, [pc, #348]	; (8008880 <EEPROM_Show_Feature+0x308>)
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read", CENTER_MODE);
 8008724:	2173      	movs	r1, #115	; 0x73
 8008726:	e75f      	b.n	80085e8 <EEPROM_Show_Feature+0x70>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8008728:	f240 220f 	movw	r2, #527	; 0x20f
 800872c:	2149      	movs	r1, #73	; 0x49
 800872e:	4852      	ldr	r0, [pc, #328]	; (8008878 <EEPROM_Show_Feature+0x300>)
 8008730:	f7f9 faec 	bl	8001d0c <BSP_EEPROM_WriteBuffer>
 8008734:	4606      	mov	r6, r0
 8008736:	b128      	cbz	r0, 8008744 <EEPROM_Show_Feature+0x1cc>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008738:	483d      	ldr	r0, [pc, #244]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 800873a:	f7f9 fbfd 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 3", CENTER_MODE);
 800873e:	462b      	mov	r3, r5
 8008740:	4a50      	ldr	r2, [pc, #320]	; (8008884 <EEPROM_Show_Feature+0x30c>)
 8008742:	e7ef      	b.n	8008724 <EEPROM_Show_Feature+0x1ac>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8008744:	f240 220f 	movw	r2, #527	; 0x20f
 8008748:	2149      	movs	r1, #73	; 0x49
 800874a:	484b      	ldr	r0, [pc, #300]	; (8008878 <EEPROM_Show_Feature+0x300>)
 800874c:	f7f9 fade 	bl	8001d0c <BSP_EEPROM_WriteBuffer>
 8008750:	b128      	cbz	r0, 800875e <EEPROM_Show_Feature+0x1e6>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008752:	4837      	ldr	r0, [pc, #220]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 8008754:	f7f9 fbf0 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 4", CENTER_MODE);
 8008758:	462b      	mov	r3, r5
 800875a:	4a4b      	ldr	r2, [pc, #300]	; (8008888 <EEPROM_Show_Feature+0x310>)
 800875c:	e7d4      	b.n	8008708 <EEPROM_Show_Feature+0x190>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 800875e:	f240 220f 	movw	r2, #527	; 0x20f
 8008762:	2149      	movs	r1, #73	; 0x49
 8008764:	4844      	ldr	r0, [pc, #272]	; (8008878 <EEPROM_Show_Feature+0x300>)
 8008766:	f7f9 fad1 	bl	8001d0c <BSP_EEPROM_WriteBuffer>
 800876a:	b128      	cbz	r0, 8008778 <EEPROM_Show_Feature+0x200>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800876c:	4830      	ldr	r0, [pc, #192]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 800876e:	f7f9 fbe3 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 5", CENTER_MODE);
 8008772:	462b      	mov	r3, r5
 8008774:	4a45      	ldr	r2, [pc, #276]	; (800888c <EEPROM_Show_Feature+0x314>)
 8008776:	e7d5      	b.n	8008724 <EEPROM_Show_Feature+0x1ac>
        BSP_EEPROM_WaitEepromStandbyState();
 8008778:	f7f9 fa9c 	bl	8001cb4 <BSP_EEPROM_WaitEepromStandbyState>
        NumDataRead = BUFFER_SIZE1;
 800877c:	f240 230f 	movw	r3, #527	; 0x20f
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8008780:	f10d 020e 	add.w	r2, sp, #14
 8008784:	2149      	movs	r1, #73	; 0x49
 8008786:	482f      	ldr	r0, [pc, #188]	; (8008844 <EEPROM_Show_Feature+0x2cc>)
        NumDataRead = BUFFER_SIZE1;
 8008788:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 800878c:	f7f9 fa7e 	bl	8001c8c <BSP_EEPROM_ReadBuffer>
 8008790:	bb00      	cbnz	r0, 80087d4 <EEPROM_Show_Feature+0x25c>
 8008792:	4a39      	ldr	r2, [pc, #228]	; (8008878 <EEPROM_Show_Feature+0x300>)
 8008794:	f44f 7304 	mov.w	r3, #528	; 0x210
 8008798:	f2a2 210f 	subw	r1, r2, #527	; 0x20f
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
static TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 800879c:	3b01      	subs	r3, #1
 800879e:	b29b      	uxth	r3, r3
 80087a0:	b9f3      	cbnz	r3, 80087e0 <EEPROM_Show_Feature+0x268>
        TransferStatus1 = Buffercmp(Tx2Buffer, Rx1Buffer, BUFFER_SIZE1);
 80087a2:	f88d 500d 	strb.w	r5, [sp, #13]
        if (TransferStatus1 != FAILED)
 80087a6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80087aa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80087ae:	b1fb      	cbz	r3, 80087f0 <EEPROM_Show_Feature+0x278>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String write", CENTER_MODE);
 80087b0:	2301      	movs	r3, #1
 80087b2:	4a37      	ldr	r2, [pc, #220]	; (8008890 <EEPROM_Show_Feature+0x318>)
 80087b4:	2173      	movs	r1, #115	; 0x73
 80087b6:	2000      	movs	r0, #0
 80087b8:	f7f9 fcd8 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
 80087bc:	2301      	movs	r3, #1
 80087be:	4a26      	ldr	r2, [pc, #152]	; (8008858 <EEPROM_Show_Feature+0x2e0>)
 80087c0:	2182      	movs	r1, #130	; 0x82
 80087c2:	2000      	movs	r0, #0
 80087c4:	f7f9 fcd2 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80087c8:	4824      	ldr	r0, [pc, #144]	; (800885c <EEPROM_Show_Feature+0x2e4>)
 80087ca:	f7f9 fbb5 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 80087ce:	2301      	movs	r3, #1
 80087d0:	4a29      	ldr	r2, [pc, #164]	; (8008878 <EEPROM_Show_Feature+0x300>)
 80087d2:	e73e      	b.n	8008652 <EEPROM_Show_Feature+0xda>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80087d4:	4816      	ldr	r0, [pc, #88]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 80087d6:	f7f9 fbaf 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read", CENTER_MODE);
 80087da:	2301      	movs	r3, #1
 80087dc:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <EEPROM_Show_Feature+0x31c>)
 80087de:	e7a1      	b.n	8008724 <EEPROM_Show_Feature+0x1ac>
  {
    if (*pBuffer1 != *pBuffer2)
 80087e0:	f812 4b01 	ldrb.w	r4, [r2], #1
 80087e4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80087e8:	4284      	cmp	r4, r0
 80087ea:	d0d7      	beq.n	800879c <EEPROM_Show_Feature+0x224>
    {
      return FAILED;
 80087ec:	2500      	movs	r5, #0
 80087ee:	e7d8      	b.n	80087a2 <EEPROM_Show_Feature+0x22a>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80087f0:	480f      	ldr	r0, [pc, #60]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 80087f2:	f7f9 fba1 	bl	8001f38 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"FAILED to write!", CENTER_MODE);
 80087f6:	2301      	movs	r3, #1
 80087f8:	4a27      	ldr	r2, [pc, #156]	; (8008898 <EEPROM_Show_Feature+0x320>)
 80087fa:	2173      	movs	r1, #115	; 0x73
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7f9 fcb5 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8008802:	2301      	movs	r3, #1
 8008804:	4a25      	ldr	r2, [pc, #148]	; (800889c <EEPROM_Show_Feature+0x324>)
 8008806:	2182      	movs	r1, #130	; 0x82
 8008808:	e6ee      	b.n	80085e8 <EEPROM_Show_Feature+0x70>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800880a:	4809      	ldr	r0, [pc, #36]	; (8008830 <EEPROM_Show_Feature+0x2b8>)
 800880c:	f7f9 fb94 	bl	8001f38 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
 8008810:	4623      	mov	r3, r4
 8008812:	4a14      	ldr	r2, [pc, #80]	; (8008864 <EEPROM_Show_Feature+0x2ec>)
 8008814:	2173      	movs	r1, #115	; 0x73
 8008816:	4630      	mov	r0, r6
 8008818:	f7f9 fca8 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"again with EEPROM", CENTER_MODE);
 800881c:	4623      	mov	r3, r4
 800881e:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <EEPROM_Show_Feature+0x328>)
 8008820:	2182      	movs	r1, #130	; 0x82
 8008822:	4630      	mov	r0, r6
 8008824:	f7f9 fca2 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8008828:	4623      	mov	r3, r4
 800882a:	4a1c      	ldr	r2, [pc, #112]	; (800889c <EEPROM_Show_Feature+0x324>)
 800882c:	2182      	movs	r1, #130	; 0x82
 800882e:	e733      	b.n	8008698 <EEPROM_Show_Feature+0x120>
 8008830:	ffff0000 	.word	0xffff0000
 8008834:	08011f35 	.word	0x08011f35
 8008838:	08011f4c 	.word	0x08011f4c
 800883c:	08011f65 	.word	0x08011f65
 8008840:	200000d4 	.word	0x200000d4
 8008844:	20021514 	.word	0x20021514
 8008848:	08011f7e 	.word	0x08011f7e
 800884c:	08011f9a 	.word	0x08011f9a
 8008850:	08011faf 	.word	0x08011faf
 8008854:	08011fc1 	.word	0x08011fc1
 8008858:	08011fd4 	.word	0x08011fd4
 800885c:	ff0000ff 	.word	0xff0000ff
 8008860:	08011fdf 	.word	0x08011fdf
 8008864:	08011fee 	.word	0x08011fee
 8008868:	080120e2 	.word	0x080120e2
 800886c:	08012005 	.word	0x08012005
 8008870:	20000574 	.word	0x20000574
 8008874:	08012010 	.word	0x08012010
 8008878:	20021723 	.word	0x20021723
 800887c:	0801201b 	.word	0x0801201b
 8008880:	08012031 	.word	0x08012031
 8008884:	08012047 	.word	0x08012047
 8008888:	0801205d 	.word	0x0801205d
 800888c:	08012073 	.word	0x08012073
 8008890:	0801209c 	.word	0x0801209c
 8008894:	08012089 	.word	0x08012089
 8008898:	080120b0 	.word	0x080120b0
 800889c:	080120c1 	.word	0x080120c1
 80088a0:	080120dc 	.word	0x080120dc

080088a4 <EEPROM_demo>:
{
 80088a4:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	f7f9 fb6d 	bl	8001f88 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80088ae:	4833      	ldr	r0, [pc, #204]	; (800897c <EEPROM_demo+0xd8>)
 80088b0:	f7f9 fb42 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80088b4:	f7f9 faea 	bl	8001e8c <BSP_LCD_GetXSize>
 80088b8:	2100      	movs	r1, #0
 80088ba:	b282      	uxth	r2, r0
 80088bc:	2350      	movs	r3, #80	; 0x50
 80088be:	4608      	mov	r0, r1
 80088c0:	f7f9 ff20 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80088c4:	f04f 30ff 	mov.w	r0, #4294967295
 80088c8:	f7f9 fb36 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80088cc:	482b      	ldr	r0, [pc, #172]	; (800897c <EEPROM_demo+0xd8>)
 80088ce:	f7f9 fb3d 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80088d2:	482b      	ldr	r0, [pc, #172]	; (8008980 <EEPROM_demo+0xdc>)
 80088d4:	f7f9 fb44 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"EEPROM", CENTER_MODE);
 80088d8:	2100      	movs	r1, #0
 80088da:	2301      	movs	r3, #1
 80088dc:	4a29      	ldr	r2, [pc, #164]	; (8008984 <EEPROM_demo+0xe0>)
 80088de:	4608      	mov	r0, r1
 80088e0:	f7f9 fc44 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80088e4:	4828      	ldr	r0, [pc, #160]	; (8008988 <EEPROM_demo+0xe4>)
 80088e6:	f7f9 fb3b 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 80088ea:	2301      	movs	r3, #1
 80088ec:	4a27      	ldr	r2, [pc, #156]	; (800898c <EEPROM_demo+0xe8>)
 80088ee:	211e      	movs	r1, #30
 80088f0:	2000      	movs	r0, #0
 80088f2:	f7f9 fc3b 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"EEPROM Features, use BUTTON", CENTER_MODE);
 80088f6:	2301      	movs	r3, #1
 80088f8:	4a25      	ldr	r2, [pc, #148]	; (8008990 <EEPROM_demo+0xec>)
 80088fa:	212d      	movs	r1, #45	; 0x2d
 80088fc:	2000      	movs	r0, #0
 80088fe:	f7f9 fc35 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"to start EEPROM data transfer", CENTER_MODE);
 8008902:	2301      	movs	r3, #1
 8008904:	4a23      	ldr	r2, [pc, #140]	; (8008994 <EEPROM_demo+0xf0>)
 8008906:	213c      	movs	r1, #60	; 0x3c
 8008908:	2000      	movs	r0, #0
 800890a:	f7f9 fc2f 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800890e:	481b      	ldr	r0, [pc, #108]	; (800897c <EEPROM_demo+0xd8>)
 8008910:	f7f9 fb12 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8008914:	f7f9 faba 	bl	8001e8c <BSP_LCD_GetXSize>
 8008918:	4604      	mov	r4, r0
 800891a:	f7f9 fac3 	bl	8001ea4 <BSP_LCD_GetYSize>
 800891e:	3864      	subs	r0, #100	; 0x64
 8008920:	f1a4 0214 	sub.w	r2, r4, #20
 8008924:	215a      	movs	r1, #90	; 0x5a
 8008926:	b283      	uxth	r3, r0
 8008928:	200a      	movs	r0, #10
 800892a:	b292      	uxth	r2, r2
 800892c:	f7f9 fb8e 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008930:	f7f9 faac 	bl	8001e8c <BSP_LCD_GetXSize>
 8008934:	4604      	mov	r4, r0
 8008936:	f7f9 fab5 	bl	8001ea4 <BSP_LCD_GetYSize>
 800893a:	3866      	subs	r0, #102	; 0x66
 800893c:	f1a4 0216 	sub.w	r2, r4, #22
 8008940:	215b      	movs	r1, #91	; 0x5b
 8008942:	b283      	uxth	r3, r0
 8008944:	200b      	movs	r0, #11
 8008946:	b292      	uxth	r2, r2
  EEPROMFeature = 0;
 8008948:	4c13      	ldr	r4, [pc, #76]	; (8008998 <EEPROM_demo+0xf4>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800894a:	f7f9 fb7f 	bl	800204c <BSP_LCD_DrawRect>
  EEPROMFeature = 0;
 800894e:	2000      	movs	r0, #0
 8008950:	f884 041e 	strb.w	r0, [r4, #1054]	; 0x41e
  EEPROM_Show_Feature (EEPROMFeature);
 8008954:	f7ff fe10 	bl	8008578 <EEPROM_Show_Feature>
    if (CheckForUserInput() > 0)
 8008958:	f000 fc60 	bl	800921c <CheckForUserInput>
 800895c:	b148      	cbz	r0, 8008972 <EEPROM_demo+0xce>
      if (++EEPROMFeature < EEPROM_FEATURES_NUM)
 800895e:	f894 041e 	ldrb.w	r0, [r4, #1054]	; 0x41e
 8008962:	3001      	adds	r0, #1
 8008964:	b2c0      	uxtb	r0, r0
 8008966:	2801      	cmp	r0, #1
 8008968:	f884 041e 	strb.w	r0, [r4, #1054]	; 0x41e
 800896c:	d805      	bhi.n	800897a <EEPROM_demo+0xd6>
        EEPROM_Show_Feature (EEPROMFeature);
 800896e:	f7ff fe03 	bl	8008578 <EEPROM_Show_Feature>
    HAL_Delay(100);
 8008972:	2064      	movs	r0, #100	; 0x64
 8008974:	f7fa ffc6 	bl	8003904 <HAL_Delay>
    if (CheckForUserInput() > 0)
 8008978:	e7ee      	b.n	8008958 <EEPROM_demo+0xb4>
}
 800897a:	bd10      	pop	{r4, pc}
 800897c:	ff0000ff 	.word	0xff0000ff
 8008980:	20000074 	.word	0x20000074
 8008984:	080120e7 	.word	0x080120e7
 8008988:	20000084 	.word	0x20000084
 800898c:	080120ee 	.word	0x080120ee
 8008990:	0801210f 	.word	0x0801210f
 8008994:	0801212b 	.word	0x0801212b
 8008998:	20021514 	.word	0x20021514

0800899c <BSP_EEPROM_TIMEOUT_UserCallback>:
  EEPROMConnected = 0;
 800899c:	4b01      	ldr	r3, [pc, #4]	; (80089a4 <BSP_EEPROM_TIMEOUT_UserCallback+0x8>)
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
}
 80089a2:	4770      	bx	lr
 80089a4:	200000d4 	.word	0x200000d4

080089a8 <afficher_bandes_couleurs>:
 * @brief Cette fonction permet d'afficher l'ecran de controlle manuel
 * avec les 3 bandes des couleur RGB.
 * @retval rien
 */

void afficher_bandes_couleurs(){
 80089a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}



	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295

	// Titre
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80089b0:	4f32      	ldr	r7, [pc, #200]	; (8008a7c <afficher_bandes_couleurs+0xd4>)
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80089b2:	f7f9 fae9 	bl	8001f88 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	f7f9 fabd 	bl	8001f38 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80089be:	4638      	mov	r0, r7
 80089c0:	f7f9 fac4 	bl	8001f4c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(40,20, (uint8_t *) "Mode Manuel" , LEFT_MODE);
 80089c4:	2303      	movs	r3, #3
 80089c6:	4a2e      	ldr	r2, [pc, #184]	; (8008a80 <afficher_bandes_couleurs+0xd8>)
 80089c8:	2114      	movs	r1, #20
 80089ca:	2028      	movs	r0, #40	; 0x28
	BSP_LCD_DisplayStringAt(250,20, (uint8_t *) "Changer de Mode" , LEFT_MODE);


	// Bande Rouge
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
	BSP_LCD_DrawRect(pXbR, pYbR,largeur_bande, hauteur_bande);
 80089cc:	4e2d      	ldr	r6, [pc, #180]	; (8008a84 <afficher_bandes_couleurs+0xdc>)
 80089ce:	4d2e      	ldr	r5, [pc, #184]	; (8008a88 <afficher_bandes_couleurs+0xe0>)
	BSP_LCD_DisplayStringAt(40,20, (uint8_t *) "Mode Manuel" , LEFT_MODE);
 80089d0:	f7f9 fbcc 	bl	800216c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(pXbR, pYbR,largeur_bande, hauteur_bande);
 80089d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008aa8 <afficher_bandes_couleurs+0x100>
	BSP_LCD_DisplayStringAt(250,20, (uint8_t *) "Changer de Mode" , LEFT_MODE);
 80089d8:	2303      	movs	r3, #3
 80089da:	4a2c      	ldr	r2, [pc, #176]	; (8008a8c <afficher_bandes_couleurs+0xe4>)
 80089dc:	2114      	movs	r1, #20
	BSP_LCD_DrawRect(pXbR, pYbR,largeur_bande, hauteur_bande);
 80089de:	4c2c      	ldr	r4, [pc, #176]	; (8008a90 <afficher_bandes_couleurs+0xe8>)
	BSP_LCD_DisplayStringAt(250,20, (uint8_t *) "Changer de Mode" , LEFT_MODE);
 80089e0:	20fa      	movs	r0, #250	; 0xfa
 80089e2:	f7f9 fbc3 	bl	800216c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80089e6:	482b      	ldr	r0, [pc, #172]	; (8008a94 <afficher_bandes_couleurs+0xec>)
 80089e8:	f7f9 faa6 	bl	8001f38 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(pXbR, pYbR,largeur_bande, hauteur_bande);
 80089ec:	f8b8 1000 	ldrh.w	r1, [r8]
 80089f0:	8820      	ldrh	r0, [r4, #0]
 80089f2:	8833      	ldrh	r3, [r6, #0]
 80089f4:	882a      	ldrh	r2, [r5, #0]
 80089f6:	f7f9 fb29 	bl	800204c <BSP_LCD_DrawRect>
	jauge_rouge.bordH = pYbR;
 80089fa:	f8d8 1000 	ldr.w	r1, [r8]
	jauge_rouge.bordB = pYbR + hauteur_bande;
 80089fe:	6832      	ldr	r2, [r6, #0]
	jauge_rouge.bordG = pXbR;
	jauge_rouge.bordD = pXbR + largeur_bande;

	// Bande Verte
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008a00:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
	jauge_rouge.bordH = pYbR;
 8008a04:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <afficher_bandes_couleurs+0xf0>)
	jauge_rouge.bordB = pYbR + hauteur_bande;
 8008a06:	440a      	add	r2, r1
	BSP_LCD_DrawRect(pXbV, pYbV,largeur_bande, hauteur_bande);
 8008a08:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008aac <afficher_bandes_couleurs+0x104>
	jauge_rouge.bordH = pYbR;
 8008a0c:	6059      	str	r1, [r3, #4]
	jauge_rouge.bordB = pYbR + hauteur_bande;
 8008a0e:	609a      	str	r2, [r3, #8]
	jauge_rouge.bordG = pXbR;
 8008a10:	6821      	ldr	r1, [r4, #0]
	jauge_rouge.bordD = pXbR + largeur_bande;
 8008a12:	682a      	ldr	r2, [r5, #0]
	BSP_LCD_DrawRect(pXbV, pYbV,largeur_bande, hauteur_bande);
 8008a14:	4c21      	ldr	r4, [pc, #132]	; (8008a9c <afficher_bandes_couleurs+0xf4>)
	jauge_rouge.bordD = pXbR + largeur_bande;
 8008a16:	440a      	add	r2, r1
	jauge_rouge.bordG = pXbR;
 8008a18:	60d9      	str	r1, [r3, #12]
	jauge_rouge.bordD = pXbR + largeur_bande;
 8008a1a:	611a      	str	r2, [r3, #16]
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008a1c:	f7f9 fa8c 	bl	8001f38 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(pXbV, pYbV,largeur_bande, hauteur_bande);
 8008a20:	8821      	ldrh	r1, [r4, #0]
 8008a22:	f8b8 0000 	ldrh.w	r0, [r8]
 8008a26:	8833      	ldrh	r3, [r6, #0]
 8008a28:	882a      	ldrh	r2, [r5, #0]
 8008a2a:	f7f9 fb0f 	bl	800204c <BSP_LCD_DrawRect>
	jauge_verte.bordH = pYbV;
 8008a2e:	6822      	ldr	r2, [r4, #0]
	jauge_verte.bordB = pYbV + hauteur_bande;
 8008a30:	6833      	ldr	r3, [r6, #0]
	jauge_verte.bordG = pXbV;
	jauge_verte.bordD = pXbV + largeur_bande;

	// Bande Bleue
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008a32:	4638      	mov	r0, r7
	jauge_verte.bordH = pYbV;
 8008a34:	4c1a      	ldr	r4, [pc, #104]	; (8008aa0 <afficher_bandes_couleurs+0xf8>)
	jauge_verte.bordB = pYbV + hauteur_bande;
 8008a36:	4413      	add	r3, r2
	BSP_LCD_DrawRect(pXbB, pYbB,largeur_bande, hauteur_bande);
 8008a38:	4f1a      	ldr	r7, [pc, #104]	; (8008aa4 <afficher_bandes_couleurs+0xfc>)
	jauge_verte.bordH = pYbV;
 8008a3a:	6062      	str	r2, [r4, #4]
	jauge_verte.bordB = pYbV + hauteur_bande;
 8008a3c:	60a3      	str	r3, [r4, #8]
	jauge_verte.bordG = pXbV;
 8008a3e:	f8d8 2000 	ldr.w	r2, [r8]
	jauge_verte.bordD = pXbV + largeur_bande;
 8008a42:	682b      	ldr	r3, [r5, #0]
	BSP_LCD_DrawRect(pXbB, pYbB,largeur_bande, hauteur_bande);
 8008a44:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008ab0 <afficher_bandes_couleurs+0x108>
	jauge_verte.bordD = pXbV + largeur_bande;
 8008a48:	4413      	add	r3, r2
	jauge_verte.bordG = pXbV;
 8008a4a:	60e2      	str	r2, [r4, #12]
	jauge_verte.bordD = pXbV + largeur_bande;
 8008a4c:	6123      	str	r3, [r4, #16]
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008a4e:	f7f9 fa73 	bl	8001f38 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(pXbB, pYbB,largeur_bande, hauteur_bande);
 8008a52:	8833      	ldrh	r3, [r6, #0]
 8008a54:	882a      	ldrh	r2, [r5, #0]
 8008a56:	f8b8 1000 	ldrh.w	r1, [r8]
 8008a5a:	8838      	ldrh	r0, [r7, #0]
 8008a5c:	f7f9 faf6 	bl	800204c <BSP_LCD_DrawRect>
	jauge_verte.bordH = pYbB;
 8008a60:	f8d8 2000 	ldr.w	r2, [r8]
	jauge_verte.bordB = pYbB + hauteur_bande;
 8008a64:	6833      	ldr	r3, [r6, #0]
	jauge_verte.bordH = pYbB;
 8008a66:	6062      	str	r2, [r4, #4]
	jauge_verte.bordB = pYbB + hauteur_bande;
 8008a68:	4413      	add	r3, r2
	jauge_verte.bordG = pXbB;
 8008a6a:	683a      	ldr	r2, [r7, #0]
	jauge_verte.bordB = pYbB + hauteur_bande;
 8008a6c:	60a3      	str	r3, [r4, #8]
	jauge_verte.bordD = pXbB + largeur_bande;
 8008a6e:	682b      	ldr	r3, [r5, #0]
	jauge_verte.bordG = pXbB;
 8008a70:	60e2      	str	r2, [r4, #12]
	jauge_verte.bordD = pXbB + largeur_bande;
 8008a72:	4413      	add	r3, r2
 8008a74:	6123      	str	r3, [r4, #16]


}
 8008a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7a:	bf00      	nop
 8008a7c:	ff0000ff 	.word	0xff0000ff
 8008a80:	08012149 	.word	0x08012149
 8008a84:	20000580 	.word	0x20000580
 8008a88:	2002443c 	.word	0x2002443c
 8008a8c:	08012155 	.word	0x08012155
 8008a90:	20024458 	.word	0x20024458
 8008a94:	ffff0000 	.word	0xffff0000
 8008a98:	20022be0 	.word	0x20022be0
 8008a9c:	20024450 	.word	0x20024450
 8008aa0:	20022bf8 	.word	0x20022bf8
 8008aa4:	20024438 	.word	0x20024438
 8008aa8:	20024434 	.word	0x20024434
 8008aac:	20024428 	.word	0x20024428
 8008ab0:	20024430 	.word	0x20024430

08008ab4 <TouchIn>:
/*
 * @brief Cette fonction permet de savoir si on a appuyé dans une zone de controlle (carrés de couleurs)
 * elle retourne un entier pour savoir a quee absysse on a touché.
 * @retval int
 */
int TouchIn(FormeTypeDef forme){
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008ab8:	ac08      	add	r4, sp, #32
 8008aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int position_texte_X;
	int position_texte_Y;

	int curseur = -1;
	if (x < forme.bordD && x > forme.bordG && y > forme.bordH && y < forme.bordB){
 8008abe:	4c1b      	ldr	r4, [pc, #108]	; (8008b2c <TouchIn+0x78>)
 8008ac0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	42ab      	cmp	r3, r5
 8008ac6:	da23      	bge.n	8008b10 <TouchIn+0x5c>
 8008ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aca:	4293      	cmp	r3, r2
 8008acc:	dd20      	ble.n	8008b10 <TouchIn+0x5c>
 8008ace:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <TouchIn+0x7c>)
 8008ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	da1b      	bge.n	8008b10 <TouchIn+0x5c>
 8008ad8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ada:	42b3      	cmp	r3, r6
 8008adc:	da18      	bge.n	8008b10 <TouchIn+0x5c>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae2:	f7f9 fa29 	bl	8001f38 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008ae6:	4813      	ldr	r0, [pc, #76]	; (8008b34 <TouchIn+0x80>)
 8008ae8:	f7f9 fa30 	bl	8001f4c <BSP_LCD_SetBackColor>
		BSP_LCD_SetFont(&Font24);
 8008aec:	4812      	ldr	r0, [pc, #72]	; (8008b38 <TouchIn+0x84>)
 8008aee:	f7f9 fa37 	bl	8001f60 <BSP_LCD_SetFont>
		char buffer[10];
		itoa(x,buffer,10);
 8008af2:	220a      	movs	r2, #10
 8008af4:	a901      	add	r1, sp, #4
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	f001 feb4 	bl	800a864 <itoa>
		BSP_LCD_DisplayStringAt(forme.bordD + 10,forme.bordB - 30, (uint8_t *) buffer , LEFT_MODE);
 8008afc:	f1a6 011e 	sub.w	r1, r6, #30
 8008b00:	f105 000a 	add.w	r0, r5, #10
 8008b04:	2303      	movs	r3, #3
 8008b06:	aa01      	add	r2, sp, #4
 8008b08:	b289      	uxth	r1, r1
 8008b0a:	b280      	uxth	r0, r0
 8008b0c:	f7f9 fb2e 	bl	800216c <BSP_LCD_DisplayStringAt>
	}// end if

	switch(forme.Id){
 8008b10:	f89d 3020 	ldrb.w	r3, [sp, #32]



	return curseur;

}
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
	switch(forme.Id){
 8008b18:	2b52      	cmp	r3, #82	; 0x52
			etatlumiere_R = x;
 8008b1a:	bf02      	ittt	eq
 8008b1c:	6822      	ldreq	r2, [r4, #0]
 8008b1e:	4b07      	ldreq	r3, [pc, #28]	; (8008b3c <TouchIn+0x88>)
 8008b20:	601a      	streq	r2, [r3, #0]
}
 8008b22:	b004      	add	sp, #16
 8008b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b28:	b004      	add	sp, #16
 8008b2a:	4770      	bx	lr
 8008b2c:	20024424 	.word	0x20024424
 8008b30:	20024444 	.word	0x20024444
 8008b34:	ff0000ff 	.word	0xff0000ff
 8008b38:	20000074 	.word	0x20000074
 8008b3c:	2002444c 	.word	0x2002444c

08008b40 <TouchScreenCallBack>:
void TouchScreenCallBack(){
 8008b40:	b513      	push	{r0, r1, r4, lr}
	status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8008b42:	f7f9 f9a3 	bl	8001e8c <BSP_LCD_GetXSize>
 8008b46:	4604      	mov	r4, r0
 8008b48:	f7f9 f9ac 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008b4c:	b281      	uxth	r1, r0
 8008b4e:	b2a0      	uxth	r0, r4
 8008b50:	f7fa fd6c 	bl	800362c <BSP_TS_Init>
	if (status == TS_OK)
 8008b54:	b9e8      	cbnz	r0, 8008b92 <TouchScreenCallBack+0x52>
	      BSP_TS_GetState(&TS_State);
 8008b56:	4c10      	ldr	r4, [pc, #64]	; (8008b98 <TouchScreenCallBack+0x58>)
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f7fa fdb1 	bl	80036c0 <BSP_TS_GetState>
	      if(TS_State.touchDetected){
 8008b5e:	7823      	ldrb	r3, [r4, #0]
 8008b60:	b1bb      	cbz	r3, 8008b92 <TouchScreenCallBack+0x52>
	        x = TS_State.touchX[0];
 8008b62:	8862      	ldrh	r2, [r4, #2]
 8008b64:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <TouchScreenCallBack+0x5c>)
 8008b66:	601a      	str	r2, [r3, #0]
	        y = TS_State.touchY[0];
 8008b68:	89a2      	ldrh	r2, [r4, #12]
 8008b6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ba0 <TouchScreenCallBack+0x60>)
 8008b6c:	601a      	str	r2, [r3, #0]
	        TouchIn(jauge_rouge);
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <TouchScreenCallBack+0x64>)
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	9200      	str	r2, [sp, #0]
 8008b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b76:	f7ff ff9d 	bl	8008ab4 <TouchIn>
	        TouchIn(jauge_verte);
 8008b7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <TouchScreenCallBack+0x68>)
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	9200      	str	r2, [sp, #0]
 8008b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b82:	f7ff ff97 	bl	8008ab4 <TouchIn>
	        TouchIn(jauge_bleu);
 8008b86:	4b09      	ldr	r3, [pc, #36]	; (8008bac <TouchScreenCallBack+0x6c>)
 8008b88:	691a      	ldr	r2, [r3, #16]
 8008b8a:	9200      	str	r2, [sp, #0]
 8008b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b8e:	f7ff ff91 	bl	8008ab4 <TouchIn>
} // end void
 8008b92:	b002      	add	sp, #8
 8008b94:	bd10      	pop	{r4, pc}
 8008b96:	bf00      	nop
 8008b98:	20021934 	.word	0x20021934
 8008b9c:	20024424 	.word	0x20024424
 8008ba0:	20024444 	.word	0x20024444
 8008ba4:	20022be0 	.word	0x20022be0
 8008ba8:	20022bf8 	.word	0x20022bf8
 8008bac:	20022c0c 	.word	0x20022c0c

08008bb0 <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature : feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 8008bb0:	b570      	push	{r4, r5, r6, lr}
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 8008bb2:	4b99      	ldr	r3, [pc, #612]	; (8008e18 <LCD_Show_Feature+0x268>)
{
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	4604      	mov	r4, r0
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 8008bb8:	6859      	ldr	r1, [r3, #4]
 8008bba:	466a      	mov	r2, sp
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	c203      	stmia	r2!, {r0, r1}
 8008bc0:	6898      	ldr	r0, [r3, #8]
 8008bc2:	6010      	str	r0, [r2, #0]
  Point Points2[] = {{100, 150}, {160, 150}, {160, 200}};
 8008bc4:	aa03      	add	r2, sp, #12
 8008bc6:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8008bca:	6859      	ldr	r1, [r3, #4]
 8008bcc:	c203      	stmia	r2!, {r0, r1}
 8008bce:	6898      	ldr	r0, [r3, #8]
 8008bd0:	6010      	str	r0, [r2, #0]

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd6:	f7f9 f9b9 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	f7f9 f9ab 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 8008be2:	f7f9 f953 	bl	8001e8c <BSP_LCD_GetXSize>
 8008be6:	4605      	mov	r5, r0
 8008be8:	f7f9 f95c 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008bec:	3868      	subs	r0, #104	; 0x68
 8008bee:	f1a5 0218 	sub.w	r2, r5, #24
 8008bf2:	215c      	movs	r1, #92	; 0x5c
 8008bf4:	b283      	uxth	r3, r0
 8008bf6:	200c      	movs	r0, #12
 8008bf8:	b292      	uxth	r2, r2
 8008bfa:	f7f9 fd83 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008bfe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008c02:	f7f9 f999 	bl	8001f38 <BSP_LCD_SetTextColor>

  switch (feature)
 8008c06:	2c01      	cmp	r4, #1
 8008c08:	d039      	beq.n	8008c7e <LCD_Show_Feature+0xce>
 8008c0a:	2c02      	cmp	r4, #2
 8008c0c:	f000 80bb 	beq.w	8008d86 <LCD_Show_Feature+0x1d6>
 8008c10:	bb9c      	cbnz	r4, 8008c7a <LCD_Show_Feature+0xca>
  {
    case 0:
      /* Text Feature */

      BSP_LCD_DisplayStringAt(14, 100, (uint8_t *)"Left aligned Text", LEFT_MODE);
 8008c12:	2303      	movs	r3, #3
 8008c14:	4a81      	ldr	r2, [pc, #516]	; (8008e1c <LCD_Show_Feature+0x26c>)
 8008c16:	2164      	movs	r1, #100	; 0x64
 8008c18:	200e      	movs	r0, #14
 8008c1a:	f7f9 faa7 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Center aligned Text", CENTER_MODE);
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4a7f      	ldr	r2, [pc, #508]	; (8008e20 <LCD_Show_Feature+0x270>)
 8008c22:	2173      	movs	r1, #115	; 0x73
 8008c24:	4620      	mov	r0, r4
 8008c26:	f7f9 faa1 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(14, 130, (uint8_t *)"Right aligned Text", RIGHT_MODE);
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	4a7d      	ldr	r2, [pc, #500]	; (8008e24 <LCD_Show_Feature+0x274>)
 8008c2e:	2182      	movs	r1, #130	; 0x82
 8008c30:	200e      	movs	r0, #14
 8008c32:	f7f9 fa9b 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font24);
 8008c36:	487c      	ldr	r0, [pc, #496]	; (8008e28 <LCD_Show_Feature+0x278>)
 8008c38:	f7f9 f992 	bl	8001f60 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(14, 180, (uint8_t *)"Font24", LEFT_MODE);
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	4a7b      	ldr	r2, [pc, #492]	; (8008e2c <LCD_Show_Feature+0x27c>)
 8008c40:	21b4      	movs	r1, #180	; 0xb4
 8008c42:	200e      	movs	r0, #14
 8008c44:	f7f9 fa92 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font20);
 8008c48:	4879      	ldr	r0, [pc, #484]	; (8008e30 <LCD_Show_Feature+0x280>)
 8008c4a:	f7f9 f989 	bl	8001f60 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() / 2 - 20, 180, (uint8_t *)"Font20", LEFT_MODE);
 8008c4e:	f7f9 f91d 	bl	8001e8c <BSP_LCD_GetXSize>
 8008c52:	2303      	movs	r3, #3
 8008c54:	0840      	lsrs	r0, r0, #1
 8008c56:	4a77      	ldr	r2, [pc, #476]	; (8008e34 <LCD_Show_Feature+0x284>)
 8008c58:	21b4      	movs	r1, #180	; 0xb4
 8008c5a:	3814      	subs	r0, #20
 8008c5c:	b280      	uxth	r0, r0
 8008c5e:	f7f9 fa85 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font16);
 8008c62:	4875      	ldr	r0, [pc, #468]	; (8008e38 <LCD_Show_Feature+0x288>)
 8008c64:	f7f9 f97c 	bl	8001f60 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 184, (uint8_t *)"Font16", LEFT_MODE);
 8008c68:	f7f9 f910 	bl	8001e8c <BSP_LCD_GetXSize>
 8008c6c:	3850      	subs	r0, #80	; 0x50
 8008c6e:	2303      	movs	r3, #3
 8008c70:	4a72      	ldr	r2, [pc, #456]	; (8008e3c <LCD_Show_Feature+0x28c>)
 8008c72:	21b8      	movs	r1, #184	; 0xb8
 8008c74:	b280      	uxth	r0, r0
 8008c76:	f7f9 fa79 	bl	800216c <BSP_LCD_DisplayStringAt>
      break;

    default :
      break;
  }
}
 8008c7a:	b006      	add	sp, #24
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008c7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008c82:	f7f9 f959 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawRect(20, 100, 60 , 40);
 8008c86:	2328      	movs	r3, #40	; 0x28
 8008c88:	223c      	movs	r2, #60	; 0x3c
 8008c8a:	2164      	movs	r1, #100	; 0x64
 8008c8c:	2014      	movs	r0, #20
 8008c8e:	f7f9 f9dd 	bl	800204c <BSP_LCD_DrawRect>
      BSP_LCD_FillRect(100, 100, 60 , 40);
 8008c92:	2164      	movs	r1, #100	; 0x64
 8008c94:	2328      	movs	r3, #40	; 0x28
 8008c96:	223c      	movs	r2, #60	; 0x3c
 8008c98:	4608      	mov	r0, r1
 8008c9a:	f7f9 fd33 	bl	8002704 <BSP_LCD_FillRect>
      BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 8008c9e:	4868      	ldr	r0, [pc, #416]	; (8008e40 <LCD_Show_Feature+0x290>)
 8008ca0:	f7f9 f94a 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 120, 20);
 8008ca4:	f7f9 f8f2 	bl	8001e8c <BSP_LCD_GetXSize>
 8008ca8:	3878      	subs	r0, #120	; 0x78
 8008caa:	2214      	movs	r2, #20
 8008cac:	2178      	movs	r1, #120	; 0x78
 8008cae:	b280      	uxth	r0, r0
 8008cb0:	f7f9 fbb8 	bl	8002424 <BSP_LCD_DrawCircle>
      BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 40, 120, 20);
 8008cb4:	f7f9 f8ea 	bl	8001e8c <BSP_LCD_GetXSize>
 8008cb8:	3828      	subs	r0, #40	; 0x28
 8008cba:	2214      	movs	r2, #20
 8008cbc:	2178      	movs	r1, #120	; 0x78
 8008cbe:	b280      	uxth	r0, r0
 8008cc0:	f7f9 fd64 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008cc4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8008cc8:	f7f9 f936 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawPolygon(Points, 3);
 8008ccc:	4668      	mov	r0, sp
 8008cce:	2103      	movs	r1, #3
 8008cd0:	f7f9 fb1e 	bl	8002310 <BSP_LCD_DrawPolygon>
      BSP_LCD_FillPolygon(Points2, 3);
 8008cd4:	2103      	movs	r1, #3
 8008cd6:	a803      	add	r0, sp, #12
 8008cd8:	f7f9 fda8 	bl	800282c <BSP_LCD_FillPolygon>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008cdc:	4859      	ldr	r0, [pc, #356]	; (8008e44 <LCD_Show_Feature+0x294>)
 8008cde:	f7f9 f92b 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 120, 170, 30, 20);
 8008ce2:	f7f9 f8d3 	bl	8001e8c <BSP_LCD_GetXSize>
 8008ce6:	2314      	movs	r3, #20
 8008ce8:	221e      	movs	r2, #30
 8008cea:	21aa      	movs	r1, #170	; 0xaa
 8008cec:	3878      	subs	r0, #120	; 0x78
 8008cee:	f7f9 fc11 	bl	8002514 <BSP_LCD_DrawEllipse>
      BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 50, 170, 30, 20);
 8008cf2:	f7f9 f8cb 	bl	8001e8c <BSP_LCD_GetXSize>
 8008cf6:	2314      	movs	r3, #20
 8008cf8:	221e      	movs	r2, #30
 8008cfa:	21aa      	movs	r1, #170	; 0xaa
 8008cfc:	3832      	subs	r0, #50	; 0x32
 8008cfe:	f7f9 fe14 	bl	800292a <BSP_LCD_FillEllipse>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008d02:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008d06:	f7f9 f917 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 8008d0a:	f7f9 f8cb 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	f7f9 f8bc 	bl	8001e8c <BSP_LCD_GetXSize>
 8008d14:	2205      	movs	r2, #5
 8008d16:	f1a4 011e 	sub.w	r1, r4, #30
 8008d1a:	fbb0 f2f2 	udiv	r2, r0, r2
 8008d1e:	b289      	uxth	r1, r1
 8008d20:	2014      	movs	r0, #20
 8008d22:	b292      	uxth	r2, r2
 8008d24:	f7f9 f946 	bl	8001fb4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 20, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 50);
 8008d28:	f7f9 f8b0 	bl	8001e8c <BSP_LCD_GetXSize>
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	f7f9 f8b9 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008d32:	4605      	mov	r5, r0
 8008d34:	f7f9 f8aa 	bl	8001e8c <BSP_LCD_GetXSize>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	3c96      	subs	r4, #150	; 0x96
 8008d3c:	f7f9 f8b2 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008d40:	f1a6 0214 	sub.w	r2, r6, #20
 8008d44:	3832      	subs	r0, #50	; 0x32
 8008d46:	f1a5 0114 	sub.w	r1, r5, #20
 8008d4a:	b283      	uxth	r3, r0
 8008d4c:	b292      	uxth	r2, r2
 8008d4e:	b289      	uxth	r1, r1
 8008d50:	b2a0      	uxth	r0, r4
 8008d52:	f7f9 fa77 	bl	8002244 <BSP_LCD_DrawLine>
      BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 50, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 20);
 8008d56:	f7f9 f899 	bl	8001e8c <BSP_LCD_GetXSize>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	f7f9 f8a2 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008d60:	4605      	mov	r5, r0
 8008d62:	f7f9 f893 	bl	8001e8c <BSP_LCD_GetXSize>
 8008d66:	4606      	mov	r6, r0
 8008d68:	3c96      	subs	r4, #150	; 0x96
 8008d6a:	f7f9 f89b 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008d6e:	f1a6 0214 	sub.w	r2, r6, #20
 8008d72:	3814      	subs	r0, #20
 8008d74:	f1a5 0132 	sub.w	r1, r5, #50	; 0x32
 8008d78:	b283      	uxth	r3, r0
 8008d7a:	b292      	uxth	r2, r2
 8008d7c:	b289      	uxth	r1, r1
 8008d7e:	b2a0      	uxth	r0, r4
 8008d80:	f7f9 fa60 	bl	8002244 <BSP_LCD_DrawLine>
      break;
 8008d84:	e779      	b.n	8008c7a <LCD_Show_Feature+0xca>
      BSP_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8008d86:	4a30      	ldr	r2, [pc, #192]	; (8008e48 <LCD_Show_Feature+0x298>)
 8008d88:	2164      	movs	r1, #100	; 0x64
 8008d8a:	2014      	movs	r0, #20
 8008d8c:	f7f9 fc2c 	bl	80025e8 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008d90:	2064      	movs	r0, #100	; 0x64
 8008d92:	f7fa fdb7 	bl	8003904 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() / 2 - 40, 100, (uint8_t *)stlogo);
 8008d96:	f7f9 f879 	bl	8001e8c <BSP_LCD_GetXSize>
 8008d9a:	4a2b      	ldr	r2, [pc, #172]	; (8008e48 <LCD_Show_Feature+0x298>)
 8008d9c:	0840      	lsrs	r0, r0, #1
 8008d9e:	2164      	movs	r1, #100	; 0x64
 8008da0:	3828      	subs	r0, #40	; 0x28
 8008da2:	f7f9 fc21 	bl	80025e8 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008da6:	2064      	movs	r0, #100	; 0x64
 8008da8:	f7fa fdac 	bl	8003904 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - 100, 100, (uint8_t *)stlogo);
 8008dac:	f7f9 f86e 	bl	8001e8c <BSP_LCD_GetXSize>
 8008db0:	4a25      	ldr	r2, [pc, #148]	; (8008e48 <LCD_Show_Feature+0x298>)
 8008db2:	2164      	movs	r1, #100	; 0x64
 8008db4:	3864      	subs	r0, #100	; 0x64
 8008db6:	f7f9 fc17 	bl	80025e8 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008dba:	2064      	movs	r0, #100	; 0x64
 8008dbc:	f7fa fda2 	bl	8003904 <HAL_Delay>
      BSP_LCD_DrawBitmap(20, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);
 8008dc0:	f7f9 f870 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008dc4:	4a20      	ldr	r2, [pc, #128]	; (8008e48 <LCD_Show_Feature+0x298>)
 8008dc6:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8008dca:	2014      	movs	r0, #20
 8008dcc:	f7f9 fc0c 	bl	80025e8 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008dd0:	2064      	movs	r0, #100	; 0x64
 8008dd2:	f7fa fd97 	bl	8003904 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() / 2 - 40, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);
 8008dd6:	f7f9 f859 	bl	8001e8c <BSP_LCD_GetXSize>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	f7f9 f862 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008de0:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <LCD_Show_Feature+0x298>)
 8008de2:	0864      	lsrs	r4, r4, #1
 8008de4:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8008de8:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
 8008dec:	f7f9 fbfc 	bl	80025e8 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008df0:	2064      	movs	r0, #100	; 0x64
 8008df2:	f7fa fd87 	bl	8003904 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - 100, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);
 8008df6:	f7f9 f849 	bl	8001e8c <BSP_LCD_GetXSize>
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	f7f9 f852 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008e00:	4a11      	ldr	r2, [pc, #68]	; (8008e48 <LCD_Show_Feature+0x298>)
 8008e02:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8008e06:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8008e0a:	f7f9 fbed 	bl	80025e8 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008e0e:	2064      	movs	r0, #100	; 0x64
 8008e10:	f7fa fd78 	bl	8003904 <HAL_Delay>
}
 8008e14:	e731      	b.n	8008c7a <LCD_Show_Feature+0xca>
 8008e16:	bf00      	nop
 8008e18:	0800f8f0 	.word	0x0800f8f0
 8008e1c:	08012165 	.word	0x08012165
 8008e20:	08012177 	.word	0x08012177
 8008e24:	0801218b 	.word	0x0801218b
 8008e28:	20000074 	.word	0x20000074
 8008e2c:	0801219e 	.word	0x0801219e
 8008e30:	20000094 	.word	0x20000094
 8008e34:	080121a5 	.word	0x080121a5
 8008e38:	2000008c 	.word	0x2000008c
 8008e3c:	080121ac 	.word	0x080121ac
 8008e40:	ff808080 	.word	0xff808080
 8008e44:	ffff0000 	.word	0xffff0000
 8008e48:	0800f908 	.word	0x0800f908

08008e4c <LCD_demo>:
{
 8008e4c:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e52:	f7f9 f899 	bl	8001f88 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008e56:	4832      	ldr	r0, [pc, #200]	; (8008f20 <LCD_demo+0xd4>)
 8008e58:	f7f9 f86e 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8008e5c:	f7f9 f816 	bl	8001e8c <BSP_LCD_GetXSize>
 8008e60:	2100      	movs	r1, #0
 8008e62:	b282      	uxth	r2, r0
 8008e64:	2350      	movs	r3, #80	; 0x50
 8008e66:	4608      	mov	r0, r1
 8008e68:	f7f9 fc4c 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	f7f9 f862 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008e74:	482a      	ldr	r0, [pc, #168]	; (8008f20 <LCD_demo+0xd4>)
 8008e76:	f7f9 f869 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8008e7a:	482a      	ldr	r0, [pc, #168]	; (8008f24 <LCD_demo+0xd8>)
 8008e7c:	f7f9 f870 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 8008e80:	2100      	movs	r1, #0
 8008e82:	2301      	movs	r3, #1
 8008e84:	4a28      	ldr	r2, [pc, #160]	; (8008f28 <LCD_demo+0xdc>)
 8008e86:	4608      	mov	r0, r1
 8008e88:	f7f9 f970 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8008e8c:	4827      	ldr	r0, [pc, #156]	; (8008f2c <LCD_demo+0xe0>)
 8008e8e:	f7f9 f867 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 8008e92:	2301      	movs	r3, #1
 8008e94:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <LCD_demo+0xe4>)
 8008e96:	211e      	movs	r1, #30
 8008e98:	2000      	movs	r0, #0
 8008e9a:	f7f9 f967 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"LCD Features, use BUTTON to display", CENTER_MODE);
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4a24      	ldr	r2, [pc, #144]	; (8008f34 <LCD_demo+0xe8>)
 8008ea2:	212d      	movs	r1, #45	; 0x2d
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f7f9 f961 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"next page", CENTER_MODE);
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4a22      	ldr	r2, [pc, #136]	; (8008f38 <LCD_demo+0xec>)
 8008eae:	213c      	movs	r1, #60	; 0x3c
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f7f9 f95b 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008eb6:	481a      	ldr	r0, [pc, #104]	; (8008f20 <LCD_demo+0xd4>)
 8008eb8:	f7f9 f83e 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8008ebc:	f7f8 ffe6 	bl	8001e8c <BSP_LCD_GetXSize>
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	f7f8 ffef 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008ec6:	3864      	subs	r0, #100	; 0x64
 8008ec8:	f1a4 0214 	sub.w	r2, r4, #20
 8008ecc:	215a      	movs	r1, #90	; 0x5a
 8008ece:	b283      	uxth	r3, r0
 8008ed0:	200a      	movs	r0, #10
 8008ed2:	b292      	uxth	r2, r2
 8008ed4:	f7f9 f8ba 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008ed8:	f7f8 ffd8 	bl	8001e8c <BSP_LCD_GetXSize>
 8008edc:	4604      	mov	r4, r0
 8008ede:	f7f8 ffe1 	bl	8001ea4 <BSP_LCD_GetYSize>
 8008ee2:	3866      	subs	r0, #102	; 0x66
 8008ee4:	f1a4 0216 	sub.w	r2, r4, #22
 8008ee8:	215b      	movs	r1, #91	; 0x5b
 8008eea:	b283      	uxth	r3, r0
 8008eec:	200b      	movs	r0, #11
 8008eee:	b292      	uxth	r2, r2
  LCD_Feature = 0;
 8008ef0:	4c12      	ldr	r4, [pc, #72]	; (8008f3c <LCD_demo+0xf0>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008ef2:	f7f9 f8ab 	bl	800204c <BSP_LCD_DrawRect>
  LCD_Feature = 0;
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	7020      	strb	r0, [r4, #0]
  LCD_Show_Feature (LCD_Feature);
 8008efa:	f7ff fe59 	bl	8008bb0 <LCD_Show_Feature>
    if (CheckForUserInput() > 0)
 8008efe:	f000 f98d 	bl	800921c <CheckForUserInput>
 8008f02:	b138      	cbz	r0, 8008f14 <LCD_demo+0xc8>
      if (++LCD_Feature < LCD_FEATURES_NUM)
 8008f04:	7820      	ldrb	r0, [r4, #0]
 8008f06:	3001      	adds	r0, #1
 8008f08:	b2c0      	uxtb	r0, r0
 8008f0a:	2802      	cmp	r0, #2
 8008f0c:	7020      	strb	r0, [r4, #0]
 8008f0e:	d805      	bhi.n	8008f1c <LCD_demo+0xd0>
        LCD_Show_Feature (LCD_Feature);
 8008f10:	f7ff fe4e 	bl	8008bb0 <LCD_Show_Feature>
    HAL_Delay(100);
 8008f14:	2064      	movs	r0, #100	; 0x64
 8008f16:	f7fa fcf5 	bl	8003904 <HAL_Delay>
    if (CheckForUserInput() > 0)
 8008f1a:	e7f0      	b.n	8008efe <LCD_demo+0xb2>
}
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	bf00      	nop
 8008f20:	ff0000ff 	.word	0xff0000ff
 8008f24:	20000074 	.word	0x20000074
 8008f28:	080121b3 	.word	0x080121b3
 8008f2c:	20000084 	.word	0x20000084
 8008f30:	080120ee 	.word	0x080120ee
 8008f34:	080121b7 	.word	0x080121b7
 8008f38:	080121db 	.word	0x080121db
 8008f3c:	20021960 	.word	0x20021960

08008f40 <Log_demo>:
  * @brief  LCD Log demo
  * @param  None
  * @retval None
  */
void Log_demo(void)
{
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Initialize LCD Log module */
  LCD_LOG_Init();

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 8008f42:	2400      	movs	r4, #0

  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8008f44:	4d1e      	ldr	r5, [pc, #120]	; (8008fc0 <Log_demo+0x80>)
 8008f46:	4f1f      	ldr	r7, [pc, #124]	; (8008fc4 <Log_demo+0x84>)
  LCD_LOG_Init();
 8008f48:	f001 fa80 	bl	800a44c <LCD_LOG_Init>
    LCD_UsrLog ("This is Line %d \n", i);
 8008f4c:	4e1e      	ldr	r6, [pc, #120]	; (8008fc8 <Log_demo+0x88>)
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 8008f4e:	481f      	ldr	r0, [pc, #124]	; (8008fcc <Log_demo+0x8c>)
 8008f50:	f001 fa86 	bl	800a460 <LCD_LOG_SetHeader>
    LCD_UsrLog ("This is Line %d \n", i);
 8008f54:	4621      	mov	r1, r4
 8008f56:	3401      	adds	r4, #1
 8008f58:	4630      	mov	r0, r6
 8008f5a:	602f      	str	r7, [r5, #0]
 8008f5c:	f001 fc9a 	bl	800a894 <iprintf>
  for (i = 0; i < 10; i++)
 8008f60:	2c0a      	cmp	r4, #10
 8008f62:	d1f7      	bne.n	8008f54 <Log_demo+0x14>
  }

  HAL_Delay(500);

  /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 8008f64:	2400      	movs	r4, #0

  /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8008f66:	4f17      	ldr	r7, [pc, #92]	; (8008fc4 <Log_demo+0x84>)
 8008f68:	4e17      	ldr	r6, [pc, #92]	; (8008fc8 <Log_demo+0x88>)
  HAL_Delay(500);
 8008f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f6e:	f7fa fcc9 	bl	8003904 <HAL_Delay>
  LCD_LOG_ClearTextZone();
 8008f72:	f001 faab 	bl	800a4cc <LCD_LOG_ClearTextZone>
    LCD_UsrLog ("This is Line %d \n", i);
 8008f76:	4621      	mov	r1, r4
 8008f78:	3401      	adds	r4, #1
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	602f      	str	r7, [r5, #0]
 8008f7e:	f001 fc89 	bl	800a894 <iprintf>
  for (i = 0; i < 30; i++)
 8008f82:	2c1e      	cmp	r4, #30
 8008f84:	d1f7      	bne.n	8008f76 <Log_demo+0x36>
  uint8_t   scroll_index = 0;
 8008f86:	2400      	movs	r4, #0
  uint8_t   scroll_direction = 0;
 8008f88:	4625      	mov	r5, r4
  }

  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if (scroll_direction == 0)
 8008f8a:	b975      	cbnz	r5, 8008faa <Log_demo+0x6a>
    {
      LCD_LOG_ScrollBack();
      scroll_index++;
 8008f8c:	3401      	adds	r4, #1
      LCD_LOG_ScrollBack();
 8008f8e:	f001 fb83 	bl	800a698 <LCD_LOG_ScrollBack>
      scroll_index++;
 8008f92:	b2e4      	uxtb	r4, r4
      if (scroll_index > 30)
      {
        scroll_direction = 1;
 8008f94:	2c1e      	cmp	r4, #30
 8008f96:	bf94      	ite	ls
 8008f98:	2500      	movls	r5, #0
 8008f9a:	2501      	movhi	r5, #1
      {
        scroll_direction = 0;
      }
    }

    if (CheckForUserInput() > 0)
 8008f9c:	f000 f93e 	bl	800921c <CheckForUserInput>
 8008fa0:	b960      	cbnz	r0, 8008fbc <Log_demo+0x7c>
    {
      return;
    }
    HAL_Delay (10);
 8008fa2:	200a      	movs	r0, #10
 8008fa4:	f7fa fcae 	bl	8003904 <HAL_Delay>
    if (scroll_direction == 0)
 8008fa8:	e7ef      	b.n	8008f8a <Log_demo+0x4a>
      scroll_index--;
 8008faa:	3c01      	subs	r4, #1
      LCD_LOG_ScrollForward();
 8008fac:	f001 fbce 	bl	800a74c <LCD_LOG_ScrollForward>
      if (scroll_index == 0)
 8008fb0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        scroll_direction = 1;
 8008fb4:	bf14      	ite	ne
 8008fb6:	2501      	movne	r5, #1
 8008fb8:	2500      	moveq	r5, #0
 8008fba:	e7ef      	b.n	8008f9c <Log_demo+0x5c>
  }
}
 8008fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200280c0 	.word	0x200280c0
 8008fc4:	ff000080 	.word	0xff000080
 8008fc8:	080121f1 	.word	0x080121f1
 8008fcc:	080121e5 	.word	0x080121e5

08008fd0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	b094      	sub	sp, #80	; 0x50
  __ASM volatile ("dsb 0xF":::"memory");
 8008fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008fd8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008fdc:	4b7f      	ldr	r3, [pc, #508]	; (80091dc <main+0x20c>)
 8008fde:	2100      	movs	r1, #0
 8008fe0:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008fe8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008fec:	695a      	ldr	r2, [r3, #20]
 8008fee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ff2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008ff8:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008ffc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009000:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8009004:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009008:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800900c:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009010:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8009014:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009016:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800901a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800901c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8009020:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009022:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8009026:	d2f9      	bcs.n	800901c <main+0x4c>
    } while(sets-- != 0U);
 8009028:	3a20      	subs	r2, #32
 800902a:	f112 0f20 	cmn.w	r2, #32
 800902e:	d1f2      	bne.n	8009016 <main+0x46>
 8009030:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009034:	695a      	ldr	r2, [r3, #20]
 8009036:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800903a:	615a      	str	r2, [r3, #20]
 800903c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009040:	f3bf 8f6f 	isb	sy
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8009044:	f7fa fc36 	bl	80038b4 <HAL_Init>
  HAL_StatusTypeDef ret = HAL_OK;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009048:	4b65      	ldr	r3, [pc, #404]	; (80091e0 <main+0x210>)
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800904a:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
 800904c:	2419      	movs	r4, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 800904e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009050:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009054:	641a      	str	r2, [r3, #64]	; 0x40
 8009056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009060:	4b60      	ldr	r3, [pc, #384]	; (80091e4 <main+0x214>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009068:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800906a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800907c:	e9cd 0307 	strd	r0, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009080:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009082:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009084:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009088:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 400;
 800908a:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800908e:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 8009090:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8009094:	9312      	str	r3, [sp, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009096:	f7fc fa3d 	bl	8005514 <HAL_RCC_OscConfig>
  ASSERT(ret != HAL_OK);
 800909a:	b118      	cbz	r0, 80090a4 <main+0xd4>
 800909c:	4a52      	ldr	r2, [pc, #328]	; (80091e8 <main+0x218>)
 800909e:	6813      	ldr	r3, [r2, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	6013      	str	r3, [r2, #0]

  /* activate the OverDrive */
  ret = HAL_PWREx_ActivateOverDrive();
 80090a4:	f7fb ff1e 	bl	8004ee4 <HAL_PWREx_EnableOverDrive>
  ASSERT(ret != HAL_OK);
 80090a8:	b118      	cbz	r0, 80090b2 <main+0xe2>
 80090aa:	4a4f      	ldr	r2, [pc, #316]	; (80091e8 <main+0x218>)
 80090ac:	6813      	ldr	r3, [r2, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	6013      	str	r3, [r2, #0]

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80090b2:	2302      	movs	r3, #2
 80090b4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80090b6:	2100      	movs	r1, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80090b8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80090ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80090be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80090c2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80090c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80090ca:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80090cc:	9306      	str	r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80090ce:	f7fc fc0d 	bl	80058ec <HAL_RCC_ClockConfig>
  ASSERT(ret != HAL_OK);
 80090d2:	b118      	cbz	r0, 80090dc <main+0x10c>
 80090d4:	4a44      	ldr	r2, [pc, #272]	; (80091e8 <main+0x218>)
 80090d6:	6813      	ldr	r3, [r2, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	6013      	str	r3, [r2, #0]
  BSP_LED_Init(LED1);
 80090dc:	2000      	movs	r0, #0
 80090de:	f7f8 f87f 	bl	80011e0 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80090e2:	2100      	movs	r1, #0
 80090e4:	2002      	movs	r0, #2
 80090e6:	f7f8 f89f 	bl	8001228 <BSP_PB_Init>
  lcd_status = BSP_LCD_Init();
 80090ea:	f7f9 fd27 	bl	8002b3c <BSP_LCD_Init>
  ASSERT(lcd_status != LCD_OK);
 80090ee:	b118      	cbz	r0, 80090f8 <main+0x128>
 80090f0:	4a3d      	ldr	r2, [pc, #244]	; (80091e8 <main+0x218>)
 80090f2:	6813      	ldr	r3, [r2, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	6013      	str	r3, [r2, #0]
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 80090f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80090fc:	2001      	movs	r0, #1
 80090fe:	f7f8 fedd 	bl	8001ebc <BSP_LCD_LayerDefaultInit>
static void Display_DemoDescription(void)
{
  uint8_t desc[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8009102:	2001      	movs	r0, #1
 8009104:	f7f8 ff12 	bl	8001f2c <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009108:	4838      	ldr	r0, [pc, #224]	; (80091ec <main+0x21c>)
 800910a:	f7f8 ff29 	bl	8001f60 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	f7f8 ff1b 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	f7f8 ff35 	bl	8001f88 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800911e:	4834      	ldr	r0, [pc, #208]	; (80091f0 <main+0x220>)
 8009120:	f7f8 ff0a 	bl	8001f38 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 8009124:	2301      	movs	r3, #1
 8009126:	4a33      	ldr	r2, [pc, #204]	; (80091f4 <main+0x224>)
 8009128:	210a      	movs	r1, #10
 800912a:	2000      	movs	r0, #0
 800912c:	f7f9 f81e 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8009130:	2301      	movs	r3, #1
 8009132:	4a31      	ldr	r2, [pc, #196]	; (80091f8 <main+0x228>)
 8009134:	2123      	movs	r1, #35	; 0x23
 8009136:	2000      	movs	r0, #0
 8009138:	f7f9 f818 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Draw Bitmap */
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 800913c:	f7f8 fea6 	bl	8001e8c <BSP_LCD_GetXSize>
 8009140:	3850      	subs	r0, #80	; 0x50
 8009142:	4a2e      	ldr	r2, [pc, #184]	; (80091fc <main+0x22c>)
 8009144:	2141      	movs	r1, #65	; 0x41
 8009146:	0840      	lsrs	r0, r0, #1
 8009148:	f7f9 fa4e 	bl	80025e8 <BSP_LCD_DrawBitmap>

  BSP_LCD_SetFont(&Font12);
 800914c:	482c      	ldr	r0, [pc, #176]	; (8009200 <main+0x230>)
 800914e:	f7f8 ff07 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2015", CENTER_MODE);
 8009152:	f7f8 fea7 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009156:	3814      	subs	r0, #20
 8009158:	2301      	movs	r3, #1
 800915a:	4a2a      	ldr	r2, [pc, #168]	; (8009204 <main+0x234>)
 800915c:	b281      	uxth	r1, r0
 800915e:	2000      	movs	r0, #0
 8009160:	f7f9 f804 	bl	800216c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetFont(&Font16);
 8009164:	4828      	ldr	r0, [pc, #160]	; (8009208 <main+0x238>)
 8009166:	f7f8 fefb 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800916a:	4828      	ldr	r0, [pc, #160]	; (800920c <main+0x23c>)
 800916c:	f7f8 fee4 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 8009170:	f7f8 fe98 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009174:	4604      	mov	r4, r0
 8009176:	f7f8 fe89 	bl	8001e8c <BSP_LCD_GetXSize>
 800917a:	233c      	movs	r3, #60	; 0x3c
 800917c:	0861      	lsrs	r1, r4, #1
 800917e:	b282      	uxth	r2, r0
 8009180:	2000      	movs	r0, #0
 8009182:	310f      	adds	r1, #15
 8009184:	b289      	uxth	r1, r1
 8009186:	f7f9 fabd 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	f7f8 fed3 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009192:	481e      	ldr	r0, [pc, #120]	; (800920c <main+0x23c>)
 8009194:	f7f8 feda 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
 8009198:	f7f8 fe84 	bl	8001ea4 <BSP_LCD_GetYSize>
 800919c:	2301      	movs	r3, #1
 800919e:	0840      	lsrs	r0, r0, #1
 80091a0:	4a1b      	ldr	r2, [pc, #108]	; (8009210 <main+0x240>)
 80091a2:	f100 011e 	add.w	r1, r0, #30
 80091a6:	2000      	movs	r0, #0
 80091a8:	b289      	uxth	r1, r1
 80091aa:	f7f8 ffdf 	bl	800216c <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc, "%s example", BSP_examples[DemoIndex].DemoName);
 80091ae:	4a19      	ldr	r2, [pc, #100]	; (8009214 <main+0x244>)
 80091b0:	4919      	ldr	r1, [pc, #100]	; (8009218 <main+0x248>)
 80091b2:	a807      	add	r0, sp, #28
 80091b4:	f001 fbba 	bl	800a92c <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 80091b8:	f7f8 fe74 	bl	8001ea4 <BSP_LCD_GetYSize>
 80091bc:	2301      	movs	r3, #1
 80091be:	0840      	lsrs	r0, r0, #1
 80091c0:	aa07      	add	r2, sp, #28
 80091c2:	f100 012d 	add.w	r1, r0, #45	; 0x2d
 80091c6:	2000      	movs	r0, #0
 80091c8:	b289      	uxth	r1, r1
 80091ca:	f7f8 ffcf 	bl	800216c <BSP_LCD_DisplayStringAt>
  set_variables();
 80091ce:	f001 f8c5 	bl	800a35c <set_variables>
  afficher_bandes_couleurs();
 80091d2:	f7ff fbe9 	bl	80089a8 <afficher_bandes_couleurs>
	  TouchScreenCallBack();
 80091d6:	f7ff fcb3 	bl	8008b40 <TouchScreenCallBack>
  while (1)
 80091da:	e7fc      	b.n	80091d6 <main+0x206>
 80091dc:	e000ed00 	.word	0xe000ed00
 80091e0:	40023800 	.word	0x40023800
 80091e4:	40007000 	.word	0x40007000
 80091e8:	20021964 	.word	0x20021964
 80091ec:	20000074 	.word	0x20000074
 80091f0:	ff000080 	.word	0xff000080
 80091f4:	08012203 	.word	0x08012203
 80091f8:	08012212 	.word	0x08012212
 80091fc:	0800f908 	.word	0x0800f908
 8009200:	20000084 	.word	0x20000084
 8009204:	08012223 	.word	0x08012223
 8009208:	2000008c 	.word	0x2000008c
 800920c:	ff0000ff 	.word	0xff0000ff
 8009210:	08012249 	.word	0x08012249
 8009214:	200002e4 	.word	0x200002e4
 8009218:	08012266 	.word	0x08012266

0800921c <CheckForUserInput>:
  * @brief  Check for user input.
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 800921c:	b508      	push	{r3, lr}
  if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800921e:	2002      	movs	r0, #2
 8009220:	f7f8 f856 	bl	80012d0 <BSP_PB_GetState>
 8009224:	b140      	cbz	r0, 8009238 <CheckForUserInput+0x1c>
  {
    HAL_Delay(10);
 8009226:	200a      	movs	r0, #10
 8009228:	f7fa fb6c 	bl	8003904 <HAL_Delay>
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 800922c:	2002      	movs	r0, #2
 800922e:	f7f8 f84f 	bl	80012d0 <BSP_PB_GetState>
 8009232:	2800      	cmp	r0, #0
 8009234:	d1fa      	bne.n	800922c <CheckForUserInput+0x10>
    return 1 ;
 8009236:	2001      	movs	r0, #1
  }
  return 0;
}
 8009238:	bd08      	pop	{r3, pc}
	...

0800923c <HAL_GPIO_EXTI_Callback>:
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  static uint32_t debounce_time = 0;

  if (GPIO_Pin == KEY_BUTTON_PIN)
 800923c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
 8009240:	b510      	push	{r4, lr}
  if (GPIO_Pin == KEY_BUTTON_PIN)
 8009242:	d109      	bne.n	8009258 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    /* Prevent debounce effect for user key */
    if ((HAL_GetTick() - debounce_time) > 50)
 8009244:	4c05      	ldr	r4, [pc, #20]	; (800925c <HAL_GPIO_EXTI_Callback+0x20>)
 8009246:	f7fa fb57 	bl	80038f8 <HAL_GetTick>
 800924a:	6863      	ldr	r3, [r4, #4]
 800924c:	1ac0      	subs	r0, r0, r3
 800924e:	2832      	cmp	r0, #50	; 0x32
 8009250:	d902      	bls.n	8009258 <HAL_GPIO_EXTI_Callback+0x1c>
    {
      debounce_time = HAL_GetTick();
 8009252:	f7fa fb51 	bl	80038f8 <HAL_GetTick>
 8009256:	6060      	str	r0, [r4, #4]
  }
  else if (GPIO_Pin == AUDIO_IN_INT_GPIO_PIN)
  {
    /* Audio IN interrupt */
  }
}
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	20021964 	.word	0x20021964

08009260 <QSPI_demo>:
* @brief  QSPI Demo
* @param  None
* @retval None
*/
void QSPI_demo (void)
{ 
 8009260:	b538      	push	{r3, r4, r5, lr}
* @retval None
*/
static void QSPI_SetHint(void)
{
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009262:	f04f 30ff 	mov.w	r0, #4294967295
 8009266:	f7f8 fe8f 	bl	8001f88 <BSP_LCD_Clear>
  
  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800926a:	4890      	ldr	r0, [pc, #576]	; (80094ac <QSPI_demo+0x24c>)
 800926c:	f7f8 fe64 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8009270:	f7f8 fe0c 	bl	8001e8c <BSP_LCD_GetXSize>
 8009274:	2100      	movs	r1, #0
 8009276:	b282      	uxth	r2, r0
 8009278:	2350      	movs	r3, #80	; 0x50
 800927a:	4608      	mov	r0, r1
 800927c:	f7f9 fa42 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	f7f8 fe58 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8009288:	4888      	ldr	r0, [pc, #544]	; (80094ac <QSPI_demo+0x24c>)
 800928a:	f7f8 fe5f 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800928e:	4888      	ldr	r0, [pc, #544]	; (80094b0 <QSPI_demo+0x250>)
 8009290:	f7f8 fe66 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"QSPI", CENTER_MODE);
 8009294:	2100      	movs	r1, #0
 8009296:	2301      	movs	r3, #1
 8009298:	4a86      	ldr	r2, [pc, #536]	; (80094b4 <QSPI_demo+0x254>)
 800929a:	4608      	mov	r0, r1
 800929c:	f7f8 ff66 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80092a0:	4885      	ldr	r0, [pc, #532]	; (80094b8 <QSPI_demo+0x258>)
 80092a2:	f7f8 fe5d 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows how to write", CENTER_MODE);
 80092a6:	2301      	movs	r3, #1
 80092a8:	4a84      	ldr	r2, [pc, #528]	; (80094bc <QSPI_demo+0x25c>)
 80092aa:	211e      	movs	r1, #30
 80092ac:	2000      	movs	r0, #0
 80092ae:	f7f8 ff5d 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"and read data on QSPI memory", CENTER_MODE); 
 80092b2:	2301      	movs	r3, #1
 80092b4:	4a82      	ldr	r2, [pc, #520]	; (80094c0 <QSPI_demo+0x260>)
 80092b6:	212d      	movs	r1, #45	; 0x2d
 80092b8:	2000      	movs	r0, #0
 80092ba:	f7f8 ff57 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"(Hardware modifications needed)", CENTER_MODE); 
 80092be:	2301      	movs	r3, #1
 80092c0:	4a80      	ldr	r2, [pc, #512]	; (80094c4 <QSPI_demo+0x264>)
 80092c2:	213c      	movs	r1, #60	; 0x3c
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7f8 ff51 	bl	800216c <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 80092ca:	4878      	ldr	r0, [pc, #480]	; (80094ac <QSPI_demo+0x24c>)
 80092cc:	f7f8 fe34 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 80092d0:	f7f8 fddc 	bl	8001e8c <BSP_LCD_GetXSize>
 80092d4:	4604      	mov	r4, r0
 80092d6:	f7f8 fde5 	bl	8001ea4 <BSP_LCD_GetYSize>
 80092da:	3864      	subs	r0, #100	; 0x64
 80092dc:	f1a4 0214 	sub.w	r2, r4, #20
 80092e0:	215a      	movs	r1, #90	; 0x5a
 80092e2:	b283      	uxth	r3, r0
 80092e4:	200a      	movs	r0, #10
 80092e6:	b292      	uxth	r2, r2
 80092e8:	f7f8 feb0 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 80092ec:	f7f8 fdce 	bl	8001e8c <BSP_LCD_GetXSize>
 80092f0:	4604      	mov	r4, r0
 80092f2:	f7f8 fdd7 	bl	8001ea4 <BSP_LCD_GetYSize>
 80092f6:	3866      	subs	r0, #102	; 0x66
 80092f8:	f1a4 0216 	sub.w	r2, r4, #22
 80092fc:	215b      	movs	r1, #91	; 0x5b
 80092fe:	b283      	uxth	r3, r0
 8009300:	200b      	movs	r0, #11
 8009302:	b292      	uxth	r2, r2
 8009304:	f7f8 fea2 	bl	800204c <BSP_LCD_DrawRect>
  
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009308:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800930c:	f7f8 fe14 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	f7f8 fe1a 	bl	8001f4c <BSP_LCD_SetBackColor>
  status = BSP_QSPI_Init();
 8009318:	f7f9 fe26 	bl	8002f68 <BSP_QSPI_Init>
  if (status == QSPI_NOT_SUPPORTED)
 800931c:	2804      	cmp	r0, #4
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 800931e:	f04f 0303 	mov.w	r3, #3
  if (status == QSPI_NOT_SUPPORTED)
 8009322:	d120      	bne.n	8009366 <QSPI_demo+0x106>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 8009324:	4a68      	ldr	r2, [pc, #416]	; (80094c8 <QSPI_demo+0x268>)
 8009326:	2164      	movs	r1, #100	; 0x64
 8009328:	2014      	movs	r0, #20
 800932a:	f7f8 ff1f 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800932e:	2303      	movs	r3, #3
 8009330:	4a66      	ldr	r2, [pc, #408]	; (80094cc <QSPI_demo+0x26c>)
 8009332:	2173      	movs	r1, #115	; 0x73
 8009334:	2014      	movs	r0, #20
 8009336:	f7f8 ff19 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"Check the hardware configuration :", LEFT_MODE);
 800933a:	2303      	movs	r3, #3
 800933c:	4a64      	ldr	r2, [pc, #400]	; (80094d0 <QSPI_demo+0x270>)
 800933e:	2191      	movs	r1, #145	; 0x91
 8009340:	2014      	movs	r0, #20
 8009342:	f7f8 ff13 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"  refer to the UM of the board", LEFT_MODE);
 8009346:	2303      	movs	r3, #3
 8009348:	4a62      	ldr	r2, [pc, #392]	; (80094d4 <QSPI_demo+0x274>)
 800934a:	21a0      	movs	r1, #160	; 0xa0
 800934c:	2014      	movs	r0, #20
 800934e:	f7f8 ff0d 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"  for the hardware modifications", LEFT_MODE);
 8009352:	2303      	movs	r3, #3
 8009354:	4a60      	ldr	r2, [pc, #384]	; (80094d8 <QSPI_demo+0x278>)
 8009356:	21af      	movs	r1, #175	; 0xaf
 8009358:	2014      	movs	r0, #20
 800935a:	f7f8 ff07 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"  to connect the QSPI memory", LEFT_MODE);
 800935e:	2303      	movs	r3, #3
 8009360:	4a5e      	ldr	r2, [pc, #376]	; (80094dc <QSPI_demo+0x27c>)
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009362:	21be      	movs	r1, #190	; 0xbe
 8009364:	e009      	b.n	800937a <QSPI_demo+0x11a>
  else if (status == QSPI_ERROR)
 8009366:	2801      	cmp	r0, #1
 8009368:	d10f      	bne.n	800938a <QSPI_demo+0x12a>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 800936a:	4a57      	ldr	r2, [pc, #348]	; (80094c8 <QSPI_demo+0x268>)
 800936c:	2164      	movs	r1, #100	; 0x64
 800936e:	2014      	movs	r0, #20
 8009370:	f7f8 fefc 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009374:	2303      	movs	r3, #3
 8009376:	4a55      	ldr	r2, [pc, #340]	; (80094cc <QSPI_demo+0x26c>)
 8009378:	2173      	movs	r1, #115	; 0x73
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 800937a:	2014      	movs	r0, #20
 800937c:	f7f8 fef6 	bl	800216c <BSP_LCD_DisplayStringAt>
    if(CheckForUserInput() > 0)
 8009380:	f7ff ff4c 	bl	800921c <CheckForUserInput>
 8009384:	2800      	cmp	r0, #0
 8009386:	d0fb      	beq.n	8009380 <QSPI_demo+0x120>
}
 8009388:	bd38      	pop	{r3, r4, r5, pc}
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 800938a:	4c55      	ldr	r4, [pc, #340]	; (80094e0 <QSPI_demo+0x280>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : OK.", LEFT_MODE);
 800938c:	2164      	movs	r1, #100	; 0x64
 800938e:	4a55      	ldr	r2, [pc, #340]	; (80094e4 <QSPI_demo+0x284>)
 8009390:	2014      	movs	r0, #20
 8009392:	f7f8 feeb 	bl	800216c <BSP_LCD_DisplayStringAt>
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 8009396:	2300      	movs	r3, #0
    BSP_QSPI_GetInfo(&pQSPI_Info);
 8009398:	4620      	mov	r0, r4
    pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 800939a:	6123      	str	r3, [r4, #16]
    pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 800939c:	e9c4 3300 	strd	r3, r3, [r4]
    pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 80093a0:	e9c4 3302 	strd	r3, r3, [r4, #8]
    BSP_QSPI_GetInfo(&pQSPI_Info);
 80093a4:	f7f9 fd3c 	bl	8002e20 <BSP_QSPI_GetInfo>
    if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093ae:	d10f      	bne.n	80093d0 <QSPI_demo+0x170>
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b6:	d10b      	bne.n	80093d0 <QSPI_demo+0x170>
 80093b8:	68e3      	ldr	r3, [r4, #12]
 80093ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093be:	d107      	bne.n	80093d0 <QSPI_demo+0x170>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 80093c0:	68a3      	ldr	r3, [r4, #8]
 80093c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c6:	d103      	bne.n	80093d0 <QSPI_demo+0x170>
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ce:	d009      	beq.n	80093e4 <QSPI_demo+0x184>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : FAILED.", LEFT_MODE);
 80093d0:	2303      	movs	r3, #3
 80093d2:	4a45      	ldr	r2, [pc, #276]	; (80094e8 <QSPI_demo+0x288>)
 80093d4:	2173      	movs	r1, #115	; 0x73
 80093d6:	2014      	movs	r0, #20
 80093d8:	f7f8 fec8 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80093dc:	2303      	movs	r3, #3
 80093de:	4a3b      	ldr	r2, [pc, #236]	; (80094cc <QSPI_demo+0x26c>)
 80093e0:	2182      	movs	r1, #130	; 0x82
 80093e2:	e7ca      	b.n	800937a <QSPI_demo+0x11a>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : OK.   ", LEFT_MODE);
 80093e4:	2303      	movs	r3, #3
 80093e6:	4a41      	ldr	r2, [pc, #260]	; (80094ec <QSPI_demo+0x28c>)
 80093e8:	2173      	movs	r1, #115	; 0x73
 80093ea:	2014      	movs	r0, #20
 80093ec:	f7f8 febe 	bl	800216c <BSP_LCD_DisplayStringAt>
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 80093f0:	2050      	movs	r0, #80	; 0x50
 80093f2:	f7f9 fce7 	bl	8002dc4 <BSP_QSPI_Erase_Block>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 80093f6:	2303      	movs	r3, #3
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 80093f8:	4604      	mov	r4, r0
 80093fa:	b140      	cbz	r0, 800940e <QSPI_demo+0x1ae>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 80093fc:	4a3c      	ldr	r2, [pc, #240]	; (80094f0 <QSPI_demo+0x290>)
 80093fe:	2182      	movs	r1, #130	; 0x82
 8009400:	2014      	movs	r0, #20
 8009402:	f7f8 feb3 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009406:	2303      	movs	r3, #3
 8009408:	4a30      	ldr	r2, [pc, #192]	; (80094cc <QSPI_demo+0x26c>)
 800940a:	2191      	movs	r1, #145	; 0x91
 800940c:	e7b5      	b.n	800937a <QSPI_demo+0x11a>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : OK.   ", LEFT_MODE);
 800940e:	4d39      	ldr	r5, [pc, #228]	; (80094f4 <QSPI_demo+0x294>)
 8009410:	2182      	movs	r1, #130	; 0x82
 8009412:	4a39      	ldr	r2, [pc, #228]	; (80094f8 <QSPI_demo+0x298>)
 8009414:	2014      	movs	r0, #20
 8009416:	f7f8 fea9 	bl	800216c <BSP_LCD_DisplayStringAt>
 800941a:	462b      	mov	r3, r5
  uint32_t tmpIndex = 0;
  
  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800941c:	f104 020f 	add.w	r2, r4, #15
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009420:	3401      	adds	r4, #1
 8009422:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009426:	f803 2b01 	strb.w	r2, [r3], #1
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800942a:	d1f7      	bne.n	800941c <QSPI_demo+0x1bc>
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 800942c:	4622      	mov	r2, r4
 800942e:	2150      	movs	r1, #80	; 0x50
 8009430:	4830      	ldr	r0, [pc, #192]	; (80094f4 <QSPI_demo+0x294>)
 8009432:	f7f9 fc7b 	bl	8002d2c <BSP_QSPI_Write>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 8009436:	2303      	movs	r3, #3
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 8009438:	b140      	cbz	r0, 800944c <QSPI_demo+0x1ec>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 800943a:	4a30      	ldr	r2, [pc, #192]	; (80094fc <QSPI_demo+0x29c>)
 800943c:	2191      	movs	r1, #145	; 0x91
 800943e:	2014      	movs	r0, #20
 8009440:	f7f8 fe94 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009444:	2303      	movs	r3, #3
 8009446:	4a21      	ldr	r2, [pc, #132]	; (80094cc <QSPI_demo+0x26c>)
 8009448:	21a0      	movs	r1, #160	; 0xa0
 800944a:	e796      	b.n	800937a <QSPI_demo+0x11a>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : OK.     ", LEFT_MODE);
 800944c:	4a2c      	ldr	r2, [pc, #176]	; (8009500 <QSPI_demo+0x2a0>)
 800944e:	2191      	movs	r1, #145	; 0x91
 8009450:	2014      	movs	r0, #20
 8009452:	f7f8 fe8b 	bl	800216c <BSP_LCD_DisplayStringAt>
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 8009456:	4622      	mov	r2, r4
 8009458:	2150      	movs	r1, #80	; 0x50
 800945a:	482a      	ldr	r0, [pc, #168]	; (8009504 <QSPI_demo+0x2a4>)
 800945c:	f7f9 fc28 	bl	8002cb0 <BSP_QSPI_Read>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 8009460:	2303      	movs	r3, #3
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 8009462:	b140      	cbz	r0, 8009476 <QSPI_demo+0x216>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 8009464:	4a28      	ldr	r2, [pc, #160]	; (8009508 <QSPI_demo+0x2a8>)
 8009466:	21a0      	movs	r1, #160	; 0xa0
 8009468:	2014      	movs	r0, #20
 800946a:	f7f8 fe7f 	bl	800216c <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800946e:	2303      	movs	r3, #3
 8009470:	4a16      	ldr	r2, [pc, #88]	; (80094cc <QSPI_demo+0x26c>)
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 8009472:	21af      	movs	r1, #175	; 0xaf
 8009474:	e781      	b.n	800937a <QSPI_demo+0x11a>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ :  OK.    ", LEFT_MODE);
 8009476:	4a25      	ldr	r2, [pc, #148]	; (800950c <QSPI_demo+0x2ac>)
 8009478:	21a0      	movs	r1, #160	; 0xa0
 800947a:	2014      	movs	r0, #20
 800947c:	f7f8 fe76 	bl	800216c <BSP_LCD_DisplayStringAt>
* @param  pBuffer1, pBuffer2: buffers to be compared.
* @param  BufferLength: buffer's length
* @retval 1: pBuffer identical to pBuffer1
*         0: pBuffer differs from pBuffer1
*/
static uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
 8009480:	4b20      	ldr	r3, [pc, #128]	; (8009504 <QSPI_demo+0x2a4>)
{
  while (BufferLength--)
 8009482:	3c01      	subs	r4, #1
 8009484:	d202      	bcs.n	800948c <QSPI_demo+0x22c>
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 8009486:	2303      	movs	r3, #3
 8009488:	4a21      	ldr	r2, [pc, #132]	; (8009510 <QSPI_demo+0x2b0>)
 800948a:	e7f2      	b.n	8009472 <QSPI_demo+0x212>
  {
    if (*pBuffer1 != *pBuffer2)
 800948c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009490:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009494:	4291      	cmp	r1, r2
 8009496:	d0f4      	beq.n	8009482 <QSPI_demo+0x222>
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : FAILED.", LEFT_MODE);
 8009498:	2303      	movs	r3, #3
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <QSPI_demo+0x2b4>)
 800949c:	21af      	movs	r1, #175	; 0xaf
 800949e:	2014      	movs	r0, #20
 80094a0:	f7f8 fe64 	bl	800216c <BSP_LCD_DisplayStringAt>
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80094a4:	2303      	movs	r3, #3
 80094a6:	4a09      	ldr	r2, [pc, #36]	; (80094cc <QSPI_demo+0x26c>)
 80094a8:	e75b      	b.n	8009362 <QSPI_demo+0x102>
 80094aa:	bf00      	nop
 80094ac:	ff0000ff 	.word	0xff0000ff
 80094b0:	20000074 	.word	0x20000074
 80094b4:	08012271 	.word	0x08012271
 80094b8:	20000084 	.word	0x20000084
 80094bc:	08012276 	.word	0x08012276
 80094c0:	08012296 	.word	0x08012296
 80094c4:	080122b3 	.word	0x080122b3
 80094c8:	080122d3 	.word	0x080122d3
 80094cc:	080122f1 	.word	0x080122f1
 80094d0:	08012304 	.word	0x08012304
 80094d4:	08012327 	.word	0x08012327
 80094d8:	08012346 	.word	0x08012346
 80094dc:	08012367 	.word	0x08012367
 80094e0:	2002196c 	.word	0x2002196c
 80094e4:	08012384 	.word	0x08012384
 80094e8:	0801239e 	.word	0x0801239e
 80094ec:	080123b6 	.word	0x080123b6
 80094f0:	080123cd 	.word	0x080123cd
 80094f4:	20022e24 	.word	0x20022e24
 80094f8:	080123e2 	.word	0x080123e2
 80094fc:	080123f6 	.word	0x080123f6
 8009500:	0801240b 	.word	0x0801240b
 8009504:	20022c24 	.word	0x20022c24
 8009508:	08012421 	.word	0x08012421
 800950c:	08012435 	.word	0x08012435
 8009510:	08012461 	.word	0x08012461
 8009514:	0801244a 	.word	0x0801244a

08009518 <SD_demo>:
  * @brief  SD Demo
  * @param  None
  * @retval None
  */
void SD_demo (void)
{
 8009518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
static void SD_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	f7f8 fd32 	bl	8001f88 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009524:	488e      	ldr	r0, [pc, #568]	; (8009760 <SD_demo+0x248>)
 8009526:	f7f8 fd07 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800952a:	f7f8 fcaf 	bl	8001e8c <BSP_LCD_GetXSize>
 800952e:	2100      	movs	r1, #0
 8009530:	b282      	uxth	r2, r0
 8009532:	2350      	movs	r3, #80	; 0x50
 8009534:	4608      	mov	r0, r1
 8009536:	f7f9 f8e5 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	f7f8 fcfb 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009542:	4887      	ldr	r0, [pc, #540]	; (8009760 <SD_demo+0x248>)
 8009544:	f7f8 fd02 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009548:	4886      	ldr	r0, [pc, #536]	; (8009764 <SD_demo+0x24c>)
 800954a:	f7f8 fd09 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SD", CENTER_MODE);
 800954e:	2100      	movs	r1, #0
 8009550:	2301      	movs	r3, #1
 8009552:	4a85      	ldr	r2, [pc, #532]	; (8009768 <SD_demo+0x250>)
 8009554:	4608      	mov	r0, r1
 8009556:	f7f8 fe09 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800955a:	4884      	ldr	r0, [pc, #528]	; (800976c <SD_demo+0x254>)
 800955c:	f7f8 fd00 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 8009560:	2301      	movs	r3, #1
 8009562:	4a83      	ldr	r2, [pc, #524]	; (8009770 <SD_demo+0x258>)
 8009564:	211e      	movs	r1, #30
 8009566:	2000      	movs	r0, #0
 8009568:	f7f8 fe00 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on the microSD and also", CENTER_MODE);
 800956c:	2301      	movs	r3, #1
 800956e:	4a81      	ldr	r2, [pc, #516]	; (8009774 <SD_demo+0x25c>)
 8009570:	212d      	movs	r1, #45	; 0x2d
 8009572:	2000      	movs	r0, #0
 8009574:	f7f8 fdfa 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"how to detect the presence of the card", CENTER_MODE);
 8009578:	2301      	movs	r3, #1
 800957a:	4a7f      	ldr	r2, [pc, #508]	; (8009778 <SD_demo+0x260>)
 800957c:	213c      	movs	r1, #60	; 0x3c
 800957e:	2000      	movs	r0, #0
 8009580:	f7f8 fdf4 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009584:	4876      	ldr	r0, [pc, #472]	; (8009760 <SD_demo+0x248>)
 8009586:	f7f8 fcd7 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800958a:	f7f8 fc7f 	bl	8001e8c <BSP_LCD_GetXSize>
 800958e:	4604      	mov	r4, r0
 8009590:	f7f8 fc88 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009594:	3864      	subs	r0, #100	; 0x64
 8009596:	f1a4 0214 	sub.w	r2, r4, #20
 800959a:	215a      	movs	r1, #90	; 0x5a
 800959c:	b283      	uxth	r3, r0
 800959e:	200a      	movs	r0, #10
 80095a0:	b292      	uxth	r2, r2
 80095a2:	f7f8 fd53 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 80095a6:	f7f8 fc71 	bl	8001e8c <BSP_LCD_GetXSize>
 80095aa:	4604      	mov	r4, r0
 80095ac:	f7f8 fc7a 	bl	8001ea4 <BSP_LCD_GetYSize>
 80095b0:	3866      	subs	r0, #102	; 0x66
 80095b2:	f1a4 0216 	sub.w	r2, r4, #22
 80095b6:	215b      	movs	r1, #91	; 0x5b
 80095b8:	b283      	uxth	r3, r0
 80095ba:	200b      	movs	r0, #11
 80095bc:	b292      	uxth	r2, r2
 80095be:	f7f8 fd45 	bl	800204c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80095c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80095c6:	f7f8 fcb7 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	f7f8 fcbd 	bl	8001f4c <BSP_LCD_SetBackColor>
  SD_state = BSP_SD_Init();
 80095d2:	f7f9 fe77 	bl	80032c4 <BSP_SD_Init>
      BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 80095d6:	2303      	movs	r3, #3
  if (SD_state != MSD_OK)
 80095d8:	4604      	mov	r4, r0
 80095da:	b380      	cbz	r0, 800963e <SD_demo+0x126>
    if(SD_state == MSD_ERROR_SD_NOT_PRESENT)
 80095dc:	2802      	cmp	r0, #2
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 80095de:	f04f 0164 	mov.w	r1, #100	; 0x64
 80095e2:	f04f 0014 	mov.w	r0, #20
      BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 80095e6:	bf0c      	ite	eq
 80095e8:	4a64      	ldreq	r2, [pc, #400]	; (800977c <SD_demo+0x264>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 80095ea:	4a65      	ldrne	r2, [pc, #404]	; (8009780 <SD_demo+0x268>)
 80095ec:	f7f8 fdbe 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 80095f0:	2303      	movs	r3, #3
 80095f2:	4a64      	ldr	r2, [pc, #400]	; (8009784 <SD_demo+0x26c>)
 80095f4:	2173      	movs	r1, #115	; 0x73
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 80095f6:	2402      	movs	r4, #2
      BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30,   (uint8_t *)"SD Connected    ", LEFT_MODE);
 80095f8:	4e63      	ldr	r6, [pc, #396]	; (8009788 <SD_demo+0x270>)
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80095fa:	4f64      	ldr	r7, [pc, #400]	; (800978c <SD_demo+0x274>)
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 80095fc:	2014      	movs	r0, #20
        BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30, (uint8_t *)"SD Not Connected", LEFT_MODE);
 80095fe:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097c0 <SD_demo+0x2a8>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 8009602:	f7f8 fdb3 	bl	800216c <BSP_LCD_DisplayStringAt>
    if (BSP_SD_IsDetected() != SD_PRESENT)
 8009606:	f7f9 fd47 	bl	8003098 <BSP_SD_IsDetected>
 800960a:	2801      	cmp	r0, #1
 800960c:	4605      	mov	r5, r0
 800960e:	f000 8095 	beq.w	800973c <SD_demo+0x224>
      if(prev_status != SD_NOT_PRESENT)
 8009612:	b174      	cbz	r4, 8009632 <SD_demo+0x11a>
        BSP_SD_Init();
 8009614:	f7f9 fe56 	bl	80032c4 <BSP_SD_Init>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009618:	4638      	mov	r0, r7
 800961a:	f7f8 fc8d 	bl	8001f38 <BSP_LCD_SetTextColor>
        prev_status = SD_NOT_PRESENT; 
 800961e:	2400      	movs	r4, #0
        BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30, (uint8_t *)"SD Not Connected", LEFT_MODE);
 8009620:	f7f8 fc40 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009624:	381e      	subs	r0, #30
 8009626:	2303      	movs	r3, #3
 8009628:	4642      	mov	r2, r8
 800962a:	b281      	uxth	r1, r0
 800962c:	2014      	movs	r0, #20
 800962e:	f7f8 fd9d 	bl	800216c <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 8009632:	f7ff fdf3 	bl	800921c <CheckForUserInput>
 8009636:	2800      	cmp	r0, #0
 8009638:	d0e5      	beq.n	8009606 <SD_demo+0xee>
}
 800963a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : OK.", LEFT_MODE);
 800963e:	4a54      	ldr	r2, [pc, #336]	; (8009790 <SD_demo+0x278>)
 8009640:	2164      	movs	r1, #100	; 0x64
 8009642:	2014      	movs	r0, #20
 8009644:	f7f8 fd92 	bl	800216c <BSP_LCD_DisplayStringAt>
    SD_state = BSP_SD_Erase(BLOCK_START_ADDR, BLOCK_START_ADDR + NUM_OF_BLOCKS - 1);
 8009648:	4620      	mov	r0, r4
 800964a:	2104      	movs	r1, #4
 800964c:	f7f9 fd5a 	bl	8003104 <BSP_SD_Erase>
 8009650:	4604      	mov	r4, r0
    while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8009652:	f7f9 fe63 	bl	800331c <BSP_SD_GetCardState>
 8009656:	2800      	cmp	r0, #0
 8009658:	d1fb      	bne.n	8009652 <SD_demo+0x13a>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : FAILED.", LEFT_MODE);
 800965a:	2303      	movs	r3, #3
    if (SD_state != MSD_OK)
 800965c:	b144      	cbz	r4, 8009670 <SD_demo+0x158>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : FAILED.", LEFT_MODE);
 800965e:	4a4d      	ldr	r2, [pc, #308]	; (8009794 <SD_demo+0x27c>)
 8009660:	2173      	movs	r1, #115	; 0x73
 8009662:	2014      	movs	r0, #20
 8009664:	f7f8 fd82 	bl	800216c <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 8009668:	2303      	movs	r3, #3
 800966a:	4a46      	ldr	r2, [pc, #280]	; (8009784 <SD_demo+0x26c>)
 800966c:	2182      	movs	r1, #130	; 0x82
 800966e:	e7c2      	b.n	80095f6 <SD_demo+0xde>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : OK.", LEFT_MODE);
 8009670:	4d49      	ldr	r5, [pc, #292]	; (8009798 <SD_demo+0x280>)
 8009672:	2173      	movs	r1, #115	; 0x73
 8009674:	4a49      	ldr	r2, [pc, #292]	; (800979c <SD_demo+0x284>)
 8009676:	2014      	movs	r0, #20
 8009678:	f7f8 fd78 	bl	800216c <BSP_LCD_DisplayStringAt>
 800967c:	462a      	mov	r2, r5
 800967e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009682:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009686:	3301      	adds	r3, #1
 8009688:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800968c:	d1f9      	bne.n	8009682 <SD_demo+0x16a>
      SD_state = BSP_SD_WriteBlocks(aTxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10000);
 800968e:	f242 7310 	movw	r3, #10000	; 0x2710
 8009692:	2205      	movs	r2, #5
 8009694:	2100      	movs	r1, #0
 8009696:	4840      	ldr	r0, [pc, #256]	; (8009798 <SD_demo+0x280>)
 8009698:	f7f9 fd24 	bl	80030e4 <BSP_SD_WriteBlocks>
 800969c:	4604      	mov	r4, r0
      while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800969e:	f7f9 fe3d 	bl	800331c <BSP_SD_GetCardState>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1fb      	bne.n	800969e <SD_demo+0x186>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : FAILED.", LEFT_MODE);
 80096a6:	2303      	movs	r3, #3
      if (SD_state != MSD_OK)
 80096a8:	b144      	cbz	r4, 80096bc <SD_demo+0x1a4>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : FAILED.", LEFT_MODE);
 80096aa:	4a3d      	ldr	r2, [pc, #244]	; (80097a0 <SD_demo+0x288>)
 80096ac:	2182      	movs	r1, #130	; 0x82
 80096ae:	2014      	movs	r0, #20
 80096b0:	f7f8 fd5c 	bl	800216c <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 80096b4:	2303      	movs	r3, #3
 80096b6:	4a33      	ldr	r2, [pc, #204]	; (8009784 <SD_demo+0x26c>)
 80096b8:	2191      	movs	r1, #145	; 0x91
 80096ba:	e79c      	b.n	80095f6 <SD_demo+0xde>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : OK.", LEFT_MODE);
 80096bc:	4a39      	ldr	r2, [pc, #228]	; (80097a4 <SD_demo+0x28c>)
 80096be:	2182      	movs	r1, #130	; 0x82
 80096c0:	2014      	movs	r0, #20
 80096c2:	f7f8 fd53 	bl	800216c <BSP_LCD_DisplayStringAt>
        SD_state = BSP_SD_ReadBlocks(aRxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10000);
 80096c6:	4621      	mov	r1, r4
 80096c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80096cc:	2205      	movs	r2, #5
 80096ce:	4836      	ldr	r0, [pc, #216]	; (80097a8 <SD_demo+0x290>)
 80096d0:	f7f9 fcf8 	bl	80030c4 <BSP_SD_ReadBlocks>
 80096d4:	4604      	mov	r4, r0
        while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 80096d6:	f7f9 fe21 	bl	800331c <BSP_SD_GetCardState>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d1fb      	bne.n	80096d6 <SD_demo+0x1be>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : FAILED.", LEFT_MODE);
 80096de:	2303      	movs	r3, #3
        if (SD_state != MSD_OK)
 80096e0:	b144      	cbz	r4, 80096f4 <SD_demo+0x1dc>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : FAILED.", LEFT_MODE);
 80096e2:	4a32      	ldr	r2, [pc, #200]	; (80097ac <SD_demo+0x294>)
 80096e4:	2191      	movs	r1, #145	; 0x91
 80096e6:	2014      	movs	r0, #20
 80096e8:	f7f8 fd40 	bl	800216c <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 80096ec:	2303      	movs	r3, #3
 80096ee:	4a25      	ldr	r2, [pc, #148]	; (8009784 <SD_demo+0x26c>)
 80096f0:	21a0      	movs	r1, #160	; 0xa0
 80096f2:	e780      	b.n	80095f6 <SD_demo+0xde>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 80096f4:	4a2e      	ldr	r2, [pc, #184]	; (80097b0 <SD_demo+0x298>)
 80096f6:	2191      	movs	r1, #145	; 0x91
 80096f8:	2014      	movs	r0, #20
 80096fa:	f7f8 fd37 	bl	800216c <BSP_LCD_DisplayStringAt>
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
 80096fe:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <SD_demo+0x290>)
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 8009700:	f240 2381 	movw	r3, #641	; 0x281
{
  while (BufferLength--)
 8009704:	3b01      	subs	r3, #1
 8009706:	b29b      	uxth	r3, r3
 8009708:	b94b      	cbnz	r3, 800971e <SD_demo+0x206>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD Test : OK.", LEFT_MODE);
 800970a:	2303      	movs	r3, #3
 800970c:	4a29      	ldr	r2, [pc, #164]	; (80097b4 <SD_demo+0x29c>)
 800970e:	21a0      	movs	r1, #160	; 0xa0
 8009710:	2014      	movs	r0, #20
 8009712:	f7f8 fd2b 	bl	800216c <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD can be removed.", LEFT_MODE);
 8009716:	2303      	movs	r3, #3
 8009718:	4a27      	ldr	r2, [pc, #156]	; (80097b8 <SD_demo+0x2a0>)
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800971a:	21af      	movs	r1, #175	; 0xaf
 800971c:	e76b      	b.n	80095f6 <SD_demo+0xde>
  {
    if (*pBuffer1 != *pBuffer2)
 800971e:	f855 0b04 	ldr.w	r0, [r5], #4
 8009722:	f852 1b04 	ldr.w	r1, [r2], #4
 8009726:	4288      	cmp	r0, r1
 8009728:	d0ec      	beq.n	8009704 <SD_demo+0x1ec>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD COMPARE : FAILED.", LEFT_MODE);
 800972a:	2303      	movs	r3, #3
 800972c:	4a23      	ldr	r2, [pc, #140]	; (80097bc <SD_demo+0x2a4>)
 800972e:	21a0      	movs	r1, #160	; 0xa0
 8009730:	2014      	movs	r0, #20
 8009732:	f7f8 fd1b 	bl	800216c <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 8009736:	2303      	movs	r3, #3
 8009738:	4a12      	ldr	r2, [pc, #72]	; (8009784 <SD_demo+0x26c>)
 800973a:	e7ee      	b.n	800971a <SD_demo+0x202>
    else if (prev_status != SD_PRESENT)
 800973c:	2c01      	cmp	r4, #1
 800973e:	f43f af78 	beq.w	8009632 <SD_demo+0x11a>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009742:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
      prev_status = SD_PRESENT;
 8009746:	462c      	mov	r4, r5
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009748:	f7f8 fbf6 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30,   (uint8_t *)"SD Connected    ", LEFT_MODE);
 800974c:	f7f8 fbaa 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009750:	381e      	subs	r0, #30
 8009752:	2303      	movs	r3, #3
 8009754:	4632      	mov	r2, r6
 8009756:	b281      	uxth	r1, r0
 8009758:	2014      	movs	r0, #20
 800975a:	f7f8 fd07 	bl	800216c <BSP_LCD_DisplayStringAt>
      prev_status = SD_PRESENT;
 800975e:	e768      	b.n	8009632 <SD_demo+0x11a>
 8009760:	ff0000ff 	.word	0xff0000ff
 8009764:	20000074 	.word	0x20000074
 8009768:	08012476 	.word	0x08012476
 800976c:	20000084 	.word	0x20000084
 8009770:	08012276 	.word	0x08012276
 8009774:	08012479 	.word	0x08012479
 8009778:	0801249f 	.word	0x0801249f
 800977c:	080124c6 	.word	0x080124c6
 8009780:	080124ef 	.word	0x080124ef
 8009784:	08012509 	.word	0x08012509
 8009788:	080125a7 	.word	0x080125a7
 800978c:	ffff0000 	.word	0xffff0000
 8009790:	0801251a 	.word	0x0801251a
 8009794:	08012532 	.word	0x08012532
 8009798:	20023a24 	.word	0x20023a24
 800979c:	08012545 	.word	0x08012545
 80097a0:	08012554 	.word	0x08012554
 80097a4:	08012567 	.word	0x08012567
 80097a8:	20023024 	.word	0x20023024
 80097ac:	08012576 	.word	0x08012576
 80097b0:	08012588 	.word	0x08012588
 80097b4:	080125b8 	.word	0x080125b8
 80097b8:	080125c6 	.word	0x080125c6
 80097bc:	080125d9 	.word	0x080125d9
 80097c0:	08012596 	.word	0x08012596

080097c4 <SDRAM_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_demo (void)
{
 80097c4:	b510      	push	{r4, lr}
  * @retval None
  */
static void SDRAM_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	f7f8 fbdd 	bl	8001f88 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80097ce:	485d      	ldr	r0, [pc, #372]	; (8009944 <SDRAM_demo+0x180>)
 80097d0:	f7f8 fbb2 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80097d4:	f7f8 fb5a 	bl	8001e8c <BSP_LCD_GetXSize>
 80097d8:	2100      	movs	r1, #0
 80097da:	b282      	uxth	r2, r0
 80097dc:	2350      	movs	r3, #80	; 0x50
 80097de:	4608      	mov	r0, r1
 80097e0:	f7f8 ff90 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	f7f8 fba6 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80097ec:	4855      	ldr	r0, [pc, #340]	; (8009944 <SDRAM_demo+0x180>)
 80097ee:	f7f8 fbad 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80097f2:	4855      	ldr	r0, [pc, #340]	; (8009948 <SDRAM_demo+0x184>)
 80097f4:	f7f8 fbb4 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM", CENTER_MODE);
 80097f8:	2100      	movs	r1, #0
 80097fa:	2301      	movs	r3, #1
 80097fc:	4a53      	ldr	r2, [pc, #332]	; (800994c <SDRAM_demo+0x188>)
 80097fe:	4608      	mov	r0, r1
 8009800:	f7f8 fcb4 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8009804:	4852      	ldr	r0, [pc, #328]	; (8009950 <SDRAM_demo+0x18c>)
 8009806:	f7f8 fbab 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800980a:	2301      	movs	r3, #1
 800980c:	4a51      	ldr	r2, [pc, #324]	; (8009954 <SDRAM_demo+0x190>)
 800980e:	211e      	movs	r1, #30
 8009810:	2000      	movs	r0, #0
 8009812:	f7f8 fcab 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 8009816:	2301      	movs	r3, #1
 8009818:	4a4f      	ldr	r2, [pc, #316]	; (8009958 <SDRAM_demo+0x194>)
 800981a:	212d      	movs	r1, #45	; 0x2d
 800981c:	2000      	movs	r0, #0
 800981e:	f7f8 fca5 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009822:	4848      	ldr	r0, [pc, #288]	; (8009944 <SDRAM_demo+0x180>)
 8009824:	f7f8 fb88 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8009828:	f7f8 fb30 	bl	8001e8c <BSP_LCD_GetXSize>
 800982c:	4604      	mov	r4, r0
 800982e:	f7f8 fb39 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009832:	3864      	subs	r0, #100	; 0x64
 8009834:	f1a4 0214 	sub.w	r2, r4, #20
 8009838:	215a      	movs	r1, #90	; 0x5a
 800983a:	b283      	uxth	r3, r0
 800983c:	200a      	movs	r0, #10
 800983e:	b292      	uxth	r2, r2
 8009840:	f7f8 fc04 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8009844:	f7f8 fb22 	bl	8001e8c <BSP_LCD_GetXSize>
 8009848:	4604      	mov	r4, r0
 800984a:	f7f8 fb2b 	bl	8001ea4 <BSP_LCD_GetYSize>
 800984e:	3866      	subs	r0, #102	; 0x66
 8009850:	f1a4 0216 	sub.w	r2, r4, #22
 8009854:	215b      	movs	r1, #91	; 0x5b
 8009856:	b283      	uxth	r3, r0
 8009858:	200b      	movs	r0, #11
 800985a:	b292      	uxth	r2, r2
 800985c:	f7f8 fbf6 	bl	800204c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009860:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009864:	f7f8 fb68 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	f7f8 fb6e 	bl	8001f4c <BSP_LCD_SetBackColor>
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009870:	f7f9 fe9e 	bl	80035b0 <BSP_SDRAM_Init>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 8009874:	2303      	movs	r3, #3
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009876:	2800      	cmp	r0, #0
 8009878:	d043      	beq.n	8009902 <SDRAM_demo+0x13e>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800987a:	4a38      	ldr	r2, [pc, #224]	; (800995c <SDRAM_demo+0x198>)
 800987c:	2173      	movs	r1, #115	; 0x73
 800987e:	2014      	movs	r0, #20
 8009880:	f7f8 fc74 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009884:	2303      	movs	r3, #3
 8009886:	4a36      	ldr	r2, [pc, #216]	; (8009960 <SDRAM_demo+0x19c>)
 8009888:	2182      	movs	r1, #130	; 0x82
 800988a:	4c36      	ldr	r4, [pc, #216]	; (8009964 <SDRAM_demo+0x1a0>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800988c:	2014      	movs	r0, #20
 800988e:	f7f8 fc6d 	bl	800216c <BSP_LCD_DisplayStringAt>
{
 8009892:	4b35      	ldr	r3, [pc, #212]	; (8009968 <SDRAM_demo+0x1a4>)
 8009894:	4622      	mov	r2, r4
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009896:	4935      	ldr	r1, [pc, #212]	; (800996c <SDRAM_demo+0x1a8>)
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009898:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800989c:	3301      	adds	r3, #1
 800989e:	428b      	cmp	r3, r1
 80098a0:	d1fa      	bne.n	8009898 <SDRAM_demo+0xd4>
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 80098a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098a6:	492f      	ldr	r1, [pc, #188]	; (8009964 <SDRAM_demo+0x1a0>)
 80098a8:	4831      	ldr	r0, [pc, #196]	; (8009970 <SDRAM_demo+0x1ac>)
 80098aa:	f7f9 fda7 	bl	80033fc <BSP_SDRAM_WriteData>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 80098ae:	2303      	movs	r3, #3
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 80098b0:	b350      	cbz	r0, 8009908 <SDRAM_demo+0x144>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 80098b2:	4a30      	ldr	r2, [pc, #192]	; (8009974 <SDRAM_demo+0x1b0>)
 80098b4:	2173      	movs	r1, #115	; 0x73
 80098b6:	2014      	movs	r0, #20
 80098b8:	f7f8 fc58 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 80098bc:	2303      	movs	r3, #3
 80098be:	4a28      	ldr	r2, [pc, #160]	; (8009960 <SDRAM_demo+0x19c>)
 80098c0:	2182      	movs	r1, #130	; 0x82
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 80098c2:	2014      	movs	r0, #20
 80098c4:	f7f8 fc52 	bl	800216c <BSP_LCD_DisplayStringAt>
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 80098c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098cc:	492a      	ldr	r1, [pc, #168]	; (8009978 <SDRAM_demo+0x1b4>)
 80098ce:	4828      	ldr	r0, [pc, #160]	; (8009970 <SDRAM_demo+0x1ac>)
 80098d0:	f7f9 fd78 	bl	80033c4 <BSP_SDRAM_ReadData>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 80098d4:	2303      	movs	r3, #3
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 80098d6:	b1d0      	cbz	r0, 800990e <SDRAM_demo+0x14a>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 80098d8:	4a28      	ldr	r2, [pc, #160]	; (800997c <SDRAM_demo+0x1b8>)
 80098da:	2182      	movs	r1, #130	; 0x82
 80098dc:	2014      	movs	r0, #20
 80098de:	f7f8 fc45 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 80098e2:	2303      	movs	r3, #3
 80098e4:	4a1e      	ldr	r2, [pc, #120]	; (8009960 <SDRAM_demo+0x19c>)
 80098e6:	2191      	movs	r1, #145	; 0x91
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 80098e8:	2014      	movs	r0, #20
 80098ea:	f7f8 fc3f 	bl	800216c <BSP_LCD_DisplayStringAt>
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
 80098ee:	4a22      	ldr	r2, [pc, #136]	; (8009978 <SDRAM_demo+0x1b4>)
{
 80098f0:	f240 1301 	movw	r3, #257	; 0x101
{
  while (BufferLength--)
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	b963      	cbnz	r3, 8009914 <SDRAM_demo+0x150>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 80098fa:	2303      	movs	r3, #3
 80098fc:	4a20      	ldr	r2, [pc, #128]	; (8009980 <SDRAM_demo+0x1bc>)
 80098fe:	2191      	movs	r1, #145	; 0x91
 8009900:	e017      	b.n	8009932 <SDRAM_demo+0x16e>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8009902:	4a20      	ldr	r2, [pc, #128]	; (8009984 <SDRAM_demo+0x1c0>)
 8009904:	2164      	movs	r1, #100	; 0x64
 8009906:	e7c0      	b.n	800988a <SDRAM_demo+0xc6>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 8009908:	4a1f      	ldr	r2, [pc, #124]	; (8009988 <SDRAM_demo+0x1c4>)
 800990a:	2173      	movs	r1, #115	; 0x73
 800990c:	e7d9      	b.n	80098c2 <SDRAM_demo+0xfe>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 800990e:	4a1f      	ldr	r2, [pc, #124]	; (800998c <SDRAM_demo+0x1c8>)
 8009910:	2182      	movs	r1, #130	; 0x82
 8009912:	e7e9      	b.n	80098e8 <SDRAM_demo+0x124>
  {
    if (*pBuffer1 != *pBuffer2)
 8009914:	f854 0b04 	ldr.w	r0, [r4], #4
 8009918:	f852 1b04 	ldr.w	r1, [r2], #4
 800991c:	4288      	cmp	r0, r1
 800991e:	d0e9      	beq.n	80098f4 <SDRAM_demo+0x130>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 8009920:	2303      	movs	r3, #3
 8009922:	4a1b      	ldr	r2, [pc, #108]	; (8009990 <SDRAM_demo+0x1cc>)
 8009924:	2191      	movs	r1, #145	; 0x91
 8009926:	2014      	movs	r0, #20
 8009928:	f7f8 fc20 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800992c:	2303      	movs	r3, #3
 800992e:	4a0c      	ldr	r2, [pc, #48]	; (8009960 <SDRAM_demo+0x19c>)
 8009930:	21a0      	movs	r1, #160	; 0xa0
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 8009932:	2014      	movs	r0, #20
 8009934:	f7f8 fc1a 	bl	800216c <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 8009938:	f7ff fc70 	bl	800921c <CheckForUserInput>
 800993c:	2800      	cmp	r0, #0
 800993e:	d0fb      	beq.n	8009938 <SDRAM_demo+0x174>
}
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	ff0000ff 	.word	0xff0000ff
 8009948:	20000074 	.word	0x20000074
 800994c:	080125ff 	.word	0x080125ff
 8009950:	20000084 	.word	0x20000084
 8009954:	08012276 	.word	0x08012276
 8009958:	080125ee 	.word	0x080125ee
 800995c:	08012605 	.word	0x08012605
 8009960:	08012624 	.word	0x08012624
 8009964:	20021980 	.word	0x20021980
 8009968:	a244250f 	.word	0xa244250f
 800996c:	a244260f 	.word	0xa244260f
 8009970:	c0116000 	.word	0xc0116000
 8009974:	08012653 	.word	0x08012653
 8009978:	20021d80 	.word	0x20021d80
 800997c:	0801267b 	.word	0x0801267b
 8009980:	080126b9 	.word	0x080126b9
 8009984:	08012638 	.word	0x08012638
 8009988:	08012669 	.word	0x08012669
 800998c:	08012690 	.word	0x08012690
 8009990:	080126a1 	.word	0x080126a1

08009994 <SDRAM_DMA_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_DMA_demo (void)
{
 8009994:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
static void SDRAM_DMA_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009996:	f04f 30ff 	mov.w	r0, #4294967295
 800999a:	f7f8 faf5 	bl	8001f88 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800999e:	487a      	ldr	r0, [pc, #488]	; (8009b88 <SDRAM_DMA_demo+0x1f4>)
 80099a0:	f7f8 faca 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80099a4:	f7f8 fa72 	bl	8001e8c <BSP_LCD_GetXSize>
 80099a8:	2100      	movs	r1, #0
 80099aa:	b282      	uxth	r2, r0
 80099ac:	2350      	movs	r3, #80	; 0x50
 80099ae:	4608      	mov	r0, r1
 80099b0:	f7f8 fea8 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	f7f8 fabe 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80099bc:	4872      	ldr	r0, [pc, #456]	; (8009b88 <SDRAM_DMA_demo+0x1f4>)
 80099be:	f7f8 fac5 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80099c2:	4872      	ldr	r0, [pc, #456]	; (8009b8c <SDRAM_DMA_demo+0x1f8>)
 80099c4:	f7f8 facc 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM DMA", CENTER_MODE);
 80099c8:	2100      	movs	r1, #0
 80099ca:	2301      	movs	r3, #1
 80099cc:	4a70      	ldr	r2, [pc, #448]	; (8009b90 <SDRAM_DMA_demo+0x1fc>)
 80099ce:	4608      	mov	r0, r1
 80099d0:	f7f8 fbcc 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80099d4:	486f      	ldr	r0, [pc, #444]	; (8009b94 <SDRAM_DMA_demo+0x200>)
 80099d6:	f7f8 fac3 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 80099da:	2301      	movs	r3, #1
 80099dc:	4a6e      	ldr	r2, [pc, #440]	; (8009b98 <SDRAM_DMA_demo+0x204>)
 80099de:	211e      	movs	r1, #30
 80099e0:	2000      	movs	r0, #0
 80099e2:	f7f8 fbc3 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 80099e6:	2301      	movs	r3, #1
 80099e8:	4a6c      	ldr	r2, [pc, #432]	; (8009b9c <SDRAM_DMA_demo+0x208>)
 80099ea:	212d      	movs	r1, #45	; 0x2d
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7f8 fbbd 	bl	800216c <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80099f2:	4865      	ldr	r0, [pc, #404]	; (8009b88 <SDRAM_DMA_demo+0x1f4>)
 80099f4:	f7f8 faa0 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 80099f8:	f7f8 fa48 	bl	8001e8c <BSP_LCD_GetXSize>
 80099fc:	4604      	mov	r4, r0
 80099fe:	f7f8 fa51 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009a02:	3864      	subs	r0, #100	; 0x64
 8009a04:	f1a4 0214 	sub.w	r2, r4, #20
 8009a08:	215a      	movs	r1, #90	; 0x5a
 8009a0a:	b283      	uxth	r3, r0
 8009a0c:	200a      	movs	r0, #10
 8009a0e:	b292      	uxth	r2, r2
 8009a10:	f7f8 fb1c 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8009a14:	f7f8 fa3a 	bl	8001e8c <BSP_LCD_GetXSize>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	f7f8 fa43 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009a1e:	3866      	subs	r0, #102	; 0x66
 8009a20:	f1a4 0216 	sub.w	r2, r4, #22
 8009a24:	215b      	movs	r1, #91	; 0x5b
 8009a26:	b283      	uxth	r3, r0
 8009a28:	200b      	movs	r0, #11
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	f7f8 fb0e 	bl	800204c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009a30:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009a34:	f7f8 fa80 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	f7f8 fa86 	bl	8001f4c <BSP_LCD_SetBackColor>
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009a40:	f7f9 fdb6 	bl	80035b0 <BSP_SDRAM_Init>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 8009a44:	2303      	movs	r3, #3
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d07e      	beq.n	8009b48 <SDRAM_DMA_demo+0x1b4>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 8009a4a:	4a55      	ldr	r2, [pc, #340]	; (8009ba0 <SDRAM_DMA_demo+0x20c>)
 8009a4c:	2173      	movs	r1, #115	; 0x73
 8009a4e:	2014      	movs	r0, #20
 8009a50:	f7f8 fb8c 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009a54:	2303      	movs	r3, #3
 8009a56:	4a53      	ldr	r2, [pc, #332]	; (8009ba4 <SDRAM_DMA_demo+0x210>)
 8009a58:	2182      	movs	r1, #130	; 0x82
 8009a5a:	4c53      	ldr	r4, [pc, #332]	; (8009ba8 <SDRAM_DMA_demo+0x214>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8009a5c:	2014      	movs	r0, #20
 8009a5e:	f7f8 fb85 	bl	800216c <BSP_LCD_DisplayStringAt>
{
 8009a62:	4b52      	ldr	r3, [pc, #328]	; (8009bac <SDRAM_DMA_demo+0x218>)
 8009a64:	4622      	mov	r2, r4
 8009a66:	4625      	mov	r5, r4
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint32_t uwOffset)
{
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 8009a68:	4951      	ldr	r1, [pc, #324]	; (8009bb0 <SDRAM_DMA_demo+0x21c>)
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009a6a:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 8009a6e:	3301      	adds	r3, #1
 8009a70:	428b      	cmp	r3, r1
 8009a72:	d1fa      	bne.n	8009a6a <SDRAM_DMA_demo+0xd6>
  __ASM volatile ("dsb 0xF":::"memory");
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	2300      	movs	r3, #0
      SCB->DCCMVAC = op_addr;
 8009a7a:	4a4e      	ldr	r2, [pc, #312]	; (8009bb4 <SDRAM_DMA_demo+0x220>)
 8009a7c:	1919      	adds	r1, r3, r4
 8009a7e:	3320      	adds	r3, #32
    while (op_size > 0) {
 8009a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SCB->DCCMVAC = op_addr;
 8009a84:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    while (op_size > 0) {
 8009a88:	d1f8      	bne.n	8009a7c <SDRAM_DMA_demo+0xe8>
 8009a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009a8e:	f3bf 8f6f 	isb	sy
  uwDMA_Transfer_Complete = 0;
 8009a92:	2300      	movs	r3, #0
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a98:	4943      	ldr	r1, [pc, #268]	; (8009ba8 <SDRAM_DMA_demo+0x214>)
 8009a9a:	4847      	ldr	r0, [pc, #284]	; (8009bb8 <SDRAM_DMA_demo+0x224>)
  uwDMA_Transfer_Complete = 0;
 8009a9c:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009aa0:	f7f9 fcba 	bl	8003418 <BSP_SDRAM_WriteData_DMA>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 8009aa4:	2303      	movs	r3, #3
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d051      	beq.n	8009b4e <SDRAM_DMA_demo+0x1ba>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 8009aaa:	4a44      	ldr	r2, [pc, #272]	; (8009bbc <SDRAM_DMA_demo+0x228>)
 8009aac:	2173      	movs	r1, #115	; 0x73
 8009aae:	2014      	movs	r0, #20
 8009ab0:	f7f8 fb5c 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	4a3b      	ldr	r2, [pc, #236]	; (8009ba4 <SDRAM_DMA_demo+0x210>)
 8009ab8:	2182      	movs	r1, #130	; 0x82
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 8009aba:	2014      	movs	r0, #20
 8009abc:	f7f8 fb56 	bl	800216c <BSP_LCD_DisplayStringAt>
  while (!uwDMA_Transfer_Complete)
 8009ac0:	f8d5 3400 	ldr.w	r3, [r5, #1024]	; 0x400
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0fb      	beq.n	8009ac0 <SDRAM_DMA_demo+0x12c>
  BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM WRITE DMA : COMPLETED", LEFT_MODE);
 8009ac8:	2303      	movs	r3, #3
 8009aca:	4a3d      	ldr	r2, [pc, #244]	; (8009bc0 <SDRAM_DMA_demo+0x22c>)
 8009acc:	2182      	movs	r1, #130	; 0x82
 8009ace:	2014      	movs	r0, #20
 8009ad0:	f7f8 fb4c 	bl	800216c <BSP_LCD_DisplayStringAt>
  uwDMA_Transfer_Complete = 0;
 8009ad4:	2300      	movs	r3, #0
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ada:	493a      	ldr	r1, [pc, #232]	; (8009bc4 <SDRAM_DMA_demo+0x230>)
 8009adc:	4836      	ldr	r0, [pc, #216]	; (8009bb8 <SDRAM_DMA_demo+0x224>)
  uwDMA_Transfer_Complete = 0;
 8009ade:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009ae2:	f7f9 fc7d 	bl	80033e0 <BSP_SDRAM_ReadData_DMA>
 8009ae6:	4e37      	ldr	r6, [pc, #220]	; (8009bc4 <SDRAM_DMA_demo+0x230>)
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 8009ae8:	2303      	movs	r3, #3
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009aea:	b398      	cbz	r0, 8009b54 <SDRAM_DMA_demo+0x1c0>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 8009aec:	4a36      	ldr	r2, [pc, #216]	; (8009bc8 <SDRAM_DMA_demo+0x234>)
 8009aee:	2191      	movs	r1, #145	; 0x91
 8009af0:	2014      	movs	r0, #20
 8009af2:	f7f8 fb3b 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM  Test Aborted", LEFT_MODE);
 8009af6:	2303      	movs	r3, #3
 8009af8:	4a34      	ldr	r2, [pc, #208]	; (8009bcc <SDRAM_DMA_demo+0x238>)
 8009afa:	21a0      	movs	r1, #160	; 0xa0
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 8009afc:	2014      	movs	r0, #20
 8009afe:	f7f8 fb35 	bl	800216c <BSP_LCD_DisplayStringAt>
  while (!uwDMA_Transfer_Complete)
 8009b02:	f8d5 3400 	ldr.w	r3, [r5, #1024]	; 0x400
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0fb      	beq.n	8009b02 <SDRAM_DMA_demo+0x16e>
  BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM READ  DMA : COMPLETED", LEFT_MODE);
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	4a30      	ldr	r2, [pc, #192]	; (8009bd0 <SDRAM_DMA_demo+0x23c>)
 8009b0e:	21a0      	movs	r1, #160	; 0xa0
 8009b10:	2014      	movs	r0, #20
 8009b12:	f7f8 fb2b 	bl	800216c <BSP_LCD_DisplayStringAt>
    uint32_t op_addr = (uint32_t)addr;
 8009b16:	4a2b      	ldr	r2, [pc, #172]	; (8009bc4 <SDRAM_DMA_demo+0x230>)
  __ASM volatile ("dsb 0xF":::"memory");
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	2300      	movs	r3, #0
      SCB->DCIMVAC = op_addr;
 8009b1e:	4925      	ldr	r1, [pc, #148]	; (8009bb4 <SDRAM_DMA_demo+0x220>)
 8009b20:	18f0      	adds	r0, r6, r3
 8009b22:	3320      	adds	r3, #32
    while (op_size > 0) {
 8009b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SCB->DCIMVAC = op_addr;
 8009b28:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
    while (op_size > 0) {
 8009b2c:	d1f8      	bne.n	8009b20 <SDRAM_DMA_demo+0x18c>
 8009b2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009b32:	f3bf 8f6f 	isb	sy
}
 8009b36:	f240 1301 	movw	r3, #257	; 0x101
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
  /* Invalidate Data Cache to get the updated content of the SRAM */
  SCB_InvalidateDCache_by_Addr((uint32_t *)pBuffer2, BufferLength*4);

  while (BufferLength--)
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	b963      	cbnz	r3, 8009b5a <SDRAM_DMA_demo+0x1c6>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFULL", LEFT_MODE);
 8009b40:	2303      	movs	r3, #3
 8009b42:	4a24      	ldr	r2, [pc, #144]	; (8009bd4 <SDRAM_DMA_demo+0x240>)
 8009b44:	21af      	movs	r1, #175	; 0xaf
 8009b46:	e017      	b.n	8009b78 <SDRAM_DMA_demo+0x1e4>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8009b48:	4a23      	ldr	r2, [pc, #140]	; (8009bd8 <SDRAM_DMA_demo+0x244>)
 8009b4a:	2164      	movs	r1, #100	; 0x64
 8009b4c:	e785      	b.n	8009a5a <SDRAM_DMA_demo+0xc6>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 8009b4e:	4a23      	ldr	r2, [pc, #140]	; (8009bdc <SDRAM_DMA_demo+0x248>)
 8009b50:	2173      	movs	r1, #115	; 0x73
 8009b52:	e7b2      	b.n	8009aba <SDRAM_DMA_demo+0x126>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 8009b54:	4a22      	ldr	r2, [pc, #136]	; (8009be0 <SDRAM_DMA_demo+0x24c>)
 8009b56:	2191      	movs	r1, #145	; 0x91
 8009b58:	e7d0      	b.n	8009afc <SDRAM_DMA_demo+0x168>
  {
    if (*pBuffer1 != *pBuffer2)
 8009b5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8009b5e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009b62:	4288      	cmp	r0, r1
 8009b64:	d0e9      	beq.n	8009b3a <SDRAM_DMA_demo+0x1a6>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 8009b66:	2303      	movs	r3, #3
 8009b68:	4a1e      	ldr	r2, [pc, #120]	; (8009be4 <SDRAM_DMA_demo+0x250>)
 8009b6a:	21af      	movs	r1, #175	; 0xaf
 8009b6c:	2014      	movs	r0, #20
 8009b6e:	f7f8 fafd 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009b72:	2303      	movs	r3, #3
 8009b74:	4a0b      	ldr	r2, [pc, #44]	; (8009ba4 <SDRAM_DMA_demo+0x210>)
 8009b76:	21be      	movs	r1, #190	; 0xbe
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFULL", LEFT_MODE);
 8009b78:	2014      	movs	r0, #20
 8009b7a:	f7f8 faf7 	bl	800216c <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 8009b7e:	f7ff fb4d 	bl	800921c <CheckForUserInput>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0fb      	beq.n	8009b7e <SDRAM_DMA_demo+0x1ea>
}
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	ff0000ff 	.word	0xff0000ff
 8009b8c:	20000074 	.word	0x20000074
 8009b90:	080126ca 	.word	0x080126ca
 8009b94:	20000084 	.word	0x20000084
 8009b98:	08012276 	.word	0x08012276
 8009b9c:	080125ee 	.word	0x080125ee
 8009ba0:	08012605 	.word	0x08012605
 8009ba4:	08012624 	.word	0x08012624
 8009ba8:	20022180 	.word	0x20022180
 8009bac:	a244250f 	.word	0xa244250f
 8009bb0:	a244260f 	.word	0xa244260f
 8009bb4:	e000ed00 	.word	0xe000ed00
 8009bb8:	c0116000 	.word	0xc0116000
 8009bbc:	080126d4 	.word	0x080126d4
 8009bc0:	0801270a 	.word	0x0801270a
 8009bc4:	200225a0 	.word	0x200225a0
 8009bc8:	08012726 	.word	0x08012726
 8009bcc:	0801273f 	.word	0x0801273f
 8009bd0:	0801276f 	.word	0x0801276f
 8009bd4:	0801278b 	.word	0x0801278b
 8009bd8:	08012638 	.word	0x08012638
 8009bdc:	080126ee 	.word	0x080126ee
 8009be0:	08012753 	.word	0x08012753
 8009be4:	080126a1 	.word	0x080126a1

08009be8 <HAL_SDRAM_DMA_XferCpltCallback>:
  uwDMA_Transfer_Complete = 1;
 8009be8:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <HAL_SDRAM_DMA_XferCpltCallback+0xc>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20022180 	.word	0x20022180

08009bf8 <HAL_SDRAM_DMA_XferErrorCallback>:
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009bf8:	4805      	ldr	r0, [pc, #20]	; (8009c10 <HAL_SDRAM_DMA_XferErrorCallback+0x18>)
{
 8009bfa:	b510      	push	{r4, lr}
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009bfc:	f7f8 f99c 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 8009c00:	2303      	movs	r3, #3
 8009c02:	4a04      	ldr	r2, [pc, #16]	; (8009c14 <HAL_SDRAM_DMA_XferErrorCallback+0x1c>)
 8009c04:	21d7      	movs	r1, #215	; 0xd7
 8009c06:	2014      	movs	r0, #20
}
 8009c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 8009c0c:	f7f8 baae 	b.w	800216c <BSP_LCD_DisplayStringAt>
 8009c10:	ffff0000 	.word	0xffff0000
 8009c14:	080127a9 	.word	0x080127a9

08009c18 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8009c18:	4770      	bx	lr

08009c1a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009c1a:	e7fe      	b.n	8009c1a <HardFault_Handler>

08009c1c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009c1c:	e7fe      	b.n	8009c1c <MemManage_Handler>

08009c1e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009c1e:	e7fe      	b.n	8009c1e <BusFault_Handler>

08009c20 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8009c20:	e7fe      	b.n	8009c20 <UsageFault_Handler>

08009c22 <SVC_Handler>:
 8009c22:	4770      	bx	lr

08009c24 <DebugMon_Handler>:
 8009c24:	4770      	bx	lr

08009c26 <PendSV_Handler>:
 8009c26:	4770      	bx	lr

08009c28 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8009c28:	f7f9 be5a 	b.w	80038e0 <HAL_IncTick>

08009c2c <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 8009c2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009c30:	f7fa bc68 	b.w	8004504 <HAL_GPIO_EXTI_IRQHandler>

08009c34 <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009c34:	2004      	movs	r0, #4
 8009c36:	f7fa bc65 	b.w	8004504 <HAL_GPIO_EXTI_IRQHandler>
	...

08009c3c <EXTI15_10_IRQHandler>:
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <EXTI15_10_IRQHandler+0x14>)
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	049b      	lsls	r3, r3, #18
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8009c42:	bf4c      	ite	mi
 8009c44:	f44f 4020 	movmi.w	r0, #40960	; 0xa000
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8009c48:	f44f 6000 	movpl.w	r0, #2048	; 0x800
 8009c4c:	f7fa bc5a 	b.w	8004504 <HAL_GPIO_EXTI_IRQHandler>
 8009c50:	40013c00 	.word	0x40013c00

08009c54 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8009c54:	4b01      	ldr	r3, [pc, #4]	; (8009c5c <DMA2_Stream7_IRQHandler+0x8>)
 8009c56:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009c58:	f7fa b824 	b.w	8003ca4 <HAL_DMA_IRQHandler>
 8009c5c:	20000748 	.word	0x20000748

08009c60 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
 8009c60:	4b01      	ldr	r3, [pc, #4]	; (8009c68 <DMA2_Stream0_IRQHandler+0x8>)
 8009c62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c64:	f7fa b81e 	b.w	8003ca4 <HAL_DMA_IRQHandler>
 8009c68:	20022ba0 	.word	0x20022ba0

08009c6c <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
 8009c6c:	e7fe      	b.n	8009c6c <DMA2_Stream1_IRQHandler>
	...

08009c70 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8009c70:	4b01      	ldr	r3, [pc, #4]	; (8009c78 <DMA2_Stream4_IRQHandler+0x8>)
 8009c72:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009c74:	f7fa b816 	b.w	8003ca4 <HAL_DMA_IRQHandler>
 8009c78:	200006c4 	.word	0x200006c4

08009c7c <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
  BSP_CAMERA_IRQHandler();
 8009c7c:	e7fe      	b.n	8009c7c <DCMI_IRQHandler>

08009c7e <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  BSP_LCD_DMA2D_IRQHandler();
 8009c7e:	f7fe bc5d 	b.w	800853c <BSP_LCD_DMA2D_IRQHandler>
	...

08009c84 <Touchscreen_DrawBackground>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
static void Touchscreen_DrawBackground (uint8_t state)
{
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	2808      	cmp	r0, #8
 8009c88:	f200 810e 	bhi.w	8009ea8 <Touchscreen_DrawBackground+0x224>
 8009c8c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009c90:	008e0009 	.word	0x008e0009
 8009c94:	010c00ac 	.word	0x010c00ac
 8009c98:	010c00cc 	.word	0x010c00cc
 8009c9c:	010c010c 	.word	0x010c010c
 8009ca0:	00ed      	.short	0x00ed

  switch (state)
  {

    case 0:
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009ca2:	4882      	ldr	r0, [pc, #520]	; (8009eac <Touchscreen_DrawBackground+0x228>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009ca4:	2405      	movs	r4, #5
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009ca6:	f7f8 f947 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009caa:	f7f8 f8ef 	bl	8001e8c <BSP_LCD_GetXSize>
 8009cae:	4605      	mov	r5, r0
 8009cb0:	f7f8 f8f8 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009cb4:	385a      	subs	r0, #90	; 0x5a
 8009cb6:	221e      	movs	r2, #30
 8009cb8:	b281      	uxth	r1, r0
 8009cba:	fbb5 f5f4 	udiv	r5, r5, r4
 8009cbe:	b2a8      	uxth	r0, r5
 8009cc0:	f7f8 fd64 	bl	800278c <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009cc4:	487a      	ldr	r0, [pc, #488]	; (8009eb0 <Touchscreen_DrawBackground+0x22c>)
 8009cc6:	f7f8 f937 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009cca:	f7f8 f8df 	bl	8001e8c <BSP_LCD_GetXSize>
 8009cce:	4605      	mov	r5, r0
 8009cd0:	f7f8 f8e8 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009cd4:	385a      	subs	r0, #90	; 0x5a
 8009cd6:	006d      	lsls	r5, r5, #1
 8009cd8:	221e      	movs	r2, #30
 8009cda:	b281      	uxth	r1, r0
 8009cdc:	fbb5 f5f4 	udiv	r5, r5, r4
 8009ce0:	b2a8      	uxth	r0, r5
 8009ce2:	f7f8 fd53 	bl	800278c <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009ce6:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8009cea:	f7f8 f925 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009cee:	f7f8 f8cd 	bl	8001e8c <BSP_LCD_GetXSize>
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	f7f8 f8d6 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009cf8:	385a      	subs	r0, #90	; 0x5a
 8009cfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cfe:	221e      	movs	r2, #30
 8009d00:	b281      	uxth	r1, r0
 8009d02:	fbb5 f5f4 	udiv	r5, r5, r4
 8009d06:	b2a8      	uxth	r0, r5
 8009d08:	f7f8 fd40 	bl	800278c <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009d0c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8009d10:	f7f8 f912 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009d14:	f7f8 f8ba 	bl	8001e8c <BSP_LCD_GetXSize>
 8009d18:	4605      	mov	r5, r0
 8009d1a:	f7f8 f8c3 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009d1e:	385a      	subs	r0, #90	; 0x5a
 8009d20:	00ad      	lsls	r5, r5, #2
 8009d22:	221e      	movs	r2, #30
 8009d24:	b281      	uxth	r1, r0
 8009d26:	fbb5 f5f4 	udiv	r5, r5, r4
 8009d2a:	b2a8      	uxth	r0, r5
 8009d2c:	f7f8 fd2e 	bl	800278c <BSP_LCD_FillCircle>

      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	f7f8 f900 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 8009d38:	f7f8 f8a8 	bl	8001e8c <BSP_LCD_GetXSize>
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	f7f8 f8b1 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009d42:	385a      	subs	r0, #90	; 0x5a
 8009d44:	221c      	movs	r2, #28
 8009d46:	b281      	uxth	r1, r0
 8009d48:	fbb5 f5f4 	udiv	r5, r5, r4
 8009d4c:	b2a8      	uxth	r0, r5
 8009d4e:	f7f8 fd1d 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8009d52:	f7f8 f89b 	bl	8001e8c <BSP_LCD_GetXSize>
 8009d56:	4605      	mov	r5, r0
 8009d58:	f7f8 f8a4 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009d5c:	385a      	subs	r0, #90	; 0x5a
 8009d5e:	006d      	lsls	r5, r5, #1
 8009d60:	221c      	movs	r2, #28
 8009d62:	b281      	uxth	r1, r0
 8009d64:	fbb5 f5f4 	udiv	r5, r5, r4
 8009d68:	b2a8      	uxth	r0, r5
 8009d6a:	f7f8 fd0f 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8009d6e:	f7f8 f88d 	bl	8001e8c <BSP_LCD_GetXSize>
 8009d72:	4605      	mov	r5, r0
 8009d74:	f7f8 f896 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009d78:	385a      	subs	r0, #90	; 0x5a
 8009d7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d7e:	221c      	movs	r2, #28
 8009d80:	b281      	uxth	r1, r0
 8009d82:	fbb5 f5f4 	udiv	r5, r5, r4
 8009d86:	b2a8      	uxth	r0, r5
 8009d88:	f7f8 fd00 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8009d8c:	f7f8 f87e 	bl	8001e8c <BSP_LCD_GetXSize>
 8009d90:	4605      	mov	r5, r0
 8009d92:	f7f8 f887 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009d96:	385a      	subs	r0, #90	; 0x5a
 8009d98:	00ad      	lsls	r5, r5, #2
 8009d9a:	fbb5 f4f4 	udiv	r4, r5, r4

    case 8:
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009d9e:	b281      	uxth	r1, r0
 8009da0:	221c      	movs	r2, #28
 8009da2:	b2a0      	uxth	r0, r4
      break;

  }
}
 8009da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009da8:	f7f8 bcf0 	b.w	800278c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009dac:	483f      	ldr	r0, [pc, #252]	; (8009eac <Touchscreen_DrawBackground+0x228>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009dae:	2605      	movs	r6, #5
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009db0:	f7f8 f8c2 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009db4:	f7f8 f86a 	bl	8001e8c <BSP_LCD_GetXSize>
 8009db8:	4605      	mov	r5, r0
 8009dba:	f7f8 f873 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009dbe:	385a      	subs	r0, #90	; 0x5a
 8009dc0:	221e      	movs	r2, #30
 8009dc2:	b281      	uxth	r1, r0
 8009dc4:	fbb5 f5f6 	udiv	r5, r5, r6
 8009dc8:	b2a8      	uxth	r0, r5
 8009dca:	f7f8 fcdf 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009dce:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd2:	f7f8 f8b1 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 8009dd6:	f7f8 f859 	bl	8001e8c <BSP_LCD_GetXSize>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	f7f8 f862 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009de0:	385a      	subs	r0, #90	; 0x5a
 8009de2:	fbb4 f4f6 	udiv	r4, r4, r6
 8009de6:	e7da      	b.n	8009d9e <Touchscreen_DrawBackground+0x11a>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009de8:	4831      	ldr	r0, [pc, #196]	; (8009eb0 <Touchscreen_DrawBackground+0x22c>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009dea:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009dec:	f7f8 f8a4 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009df0:	f7f8 f84c 	bl	8001e8c <BSP_LCD_GetXSize>
 8009df4:	4604      	mov	r4, r0
 8009df6:	f7f8 f855 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009dfa:	385a      	subs	r0, #90	; 0x5a
 8009dfc:	0063      	lsls	r3, r4, #1
 8009dfe:	221e      	movs	r2, #30
 8009e00:	b281      	uxth	r1, r0
 8009e02:	fbb3 f3f5 	udiv	r3, r3, r5
 8009e06:	b298      	uxth	r0, r3
 8009e08:	f7f8 fcc0 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	f7f8 f892 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8009e14:	f7f8 f83a 	bl	8001e8c <BSP_LCD_GetXSize>
 8009e18:	4604      	mov	r4, r0
 8009e1a:	f7f8 f843 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009e1e:	385a      	subs	r0, #90	; 0x5a
 8009e20:	0064      	lsls	r4, r4, #1
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009e22:	fbb4 f4f5 	udiv	r4, r4, r5
 8009e26:	e7ba      	b.n	8009d9e <Touchscreen_DrawBackground+0x11a>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009e28:	f06f 00ff 	mvn.w	r0, #255	; 0xff
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009e2c:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009e2e:	f7f8 f883 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009e32:	f7f8 f82b 	bl	8001e8c <BSP_LCD_GetXSize>
 8009e36:	4604      	mov	r4, r0
 8009e38:	f7f8 f834 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009e3c:	385a      	subs	r0, #90	; 0x5a
 8009e3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009e42:	221e      	movs	r2, #30
 8009e44:	b281      	uxth	r1, r0
 8009e46:	fbb4 f4f5 	udiv	r4, r4, r5
 8009e4a:	b2a0      	uxth	r0, r4
 8009e4c:	f7f8 fc9e 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	f7f8 f870 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8009e58:	f7f8 f818 	bl	8001e8c <BSP_LCD_GetXSize>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	f7f8 f821 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009e62:	385a      	subs	r0, #90	; 0x5a
 8009e64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009e68:	e7db      	b.n	8009e22 <Touchscreen_DrawBackground+0x19e>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009e6a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8009e6e:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009e70:	f7f8 f862 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8009e74:	f7f8 f80a 	bl	8001e8c <BSP_LCD_GetXSize>
 8009e78:	4604      	mov	r4, r0
 8009e7a:	f7f8 f813 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009e7e:	385a      	subs	r0, #90	; 0x5a
 8009e80:	00a3      	lsls	r3, r4, #2
 8009e82:	221e      	movs	r2, #30
 8009e84:	b281      	uxth	r1, r0
 8009e86:	fbb3 f3f5 	udiv	r3, r3, r5
 8009e8a:	b298      	uxth	r0, r3
 8009e8c:	f7f8 fc7e 	bl	800278c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	f7f8 f850 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009e98:	f7f7 fff8 	bl	8001e8c <BSP_LCD_GetXSize>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	f7f8 f801 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009ea2:	385a      	subs	r0, #90	; 0x5a
 8009ea4:	00a4      	lsls	r4, r4, #2
 8009ea6:	e7bc      	b.n	8009e22 <Touchscreen_DrawBackground+0x19e>
}
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
 8009eaa:	bf00      	nop
 8009eac:	ff0000ff 	.word	0xff0000ff
 8009eb0:	ffff0000 	.word	0xffff0000

08009eb4 <Touchscreen_demo>:
{
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
{
 8009ebc:	b089      	sub	sp, #36	; 0x24
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009ebe:	f7f8 f863 	bl	8001f88 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009ec2:	48d6      	ldr	r0, [pc, #856]	; (800a21c <Touchscreen_demo+0x368>)
 8009ec4:	f7f8 f838 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8009ec8:	f7f7 ffe0 	bl	8001e8c <BSP_LCD_GetXSize>
 8009ecc:	2100      	movs	r1, #0
 8009ece:	b282      	uxth	r2, r0
 8009ed0:	2350      	movs	r3, #80	; 0x50
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	f7f8 fc16 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8009edc:	f7f8 f82c 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009ee0:	48ce      	ldr	r0, [pc, #824]	; (800a21c <Touchscreen_demo+0x368>)
 8009ee2:	f7f8 f833 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009ee6:	48ce      	ldr	r0, [pc, #824]	; (800a220 <Touchscreen_demo+0x36c>)
 8009ee8:	f7f8 f83a 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen", CENTER_MODE);
 8009eec:	2100      	movs	r1, #0
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4acc      	ldr	r2, [pc, #816]	; (800a224 <Touchscreen_demo+0x370>)
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	f7f8 f93a 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8009ef8:	48cb      	ldr	r0, [pc, #812]	; (800a228 <Touchscreen_demo+0x374>)
 8009efa:	f7f8 f831 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the Touchscreen to", CENTER_MODE);
 8009efe:	2301      	movs	r3, #1
 8009f00:	4aca      	ldr	r2, [pc, #808]	; (800a22c <Touchscreen_demo+0x378>)
 8009f02:	211e      	movs	r1, #30
 8009f04:	2000      	movs	r0, #0
 8009f06:	f7f8 f931 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"fill the colored circles according to pressure applied", CENTER_MODE);
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4ac8      	ldr	r2, [pc, #800]	; (800a230 <Touchscreen_demo+0x37c>)
 8009f0e:	212d      	movs	r1, #45	; 0x2d
 8009f10:	2000      	movs	r0, #0
 8009f12:	f7f8 f92b 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Up to 5 finger touch coordinates are displayed", CENTER_MODE);
 8009f16:	2301      	movs	r3, #1
 8009f18:	4ac6      	ldr	r2, [pc, #792]	; (800a234 <Touchscreen_demo+0x380>)
 8009f1a:	213c      	movs	r1, #60	; 0x3c
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	f7f8 f925 	bl	800216c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009f22:	48be      	ldr	r0, [pc, #760]	; (800a21c <Touchscreen_demo+0x368>)
 8009f24:	f7f8 f808 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8009f28:	f7f7 ffb0 	bl	8001e8c <BSP_LCD_GetXSize>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	f7f7 ffb9 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009f32:	3864      	subs	r0, #100	; 0x64
 8009f34:	f1a4 0214 	sub.w	r2, r4, #20
 8009f38:	215a      	movs	r1, #90	; 0x5a
 8009f3a:	b283      	uxth	r3, r0
 8009f3c:	200a      	movs	r0, #10
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	f7f8 f884 	bl	800204c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8009f44:	f7f7 ffa2 	bl	8001e8c <BSP_LCD_GetXSize>
 8009f48:	4604      	mov	r4, r0
 8009f4a:	f7f7 ffab 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009f4e:	3866      	subs	r0, #102	; 0x66
 8009f50:	f1a4 0216 	sub.w	r2, r4, #22
 8009f54:	215b      	movs	r1, #91	; 0x5b
 8009f56:	b283      	uxth	r3, r0
 8009f58:	200b      	movs	r0, #11
 8009f5a:	b292      	uxth	r2, r2
 8009f5c:	f7f8 f876 	bl	800204c <BSP_LCD_DrawRect>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8009f60:	f7f7 ff94 	bl	8001e8c <BSP_LCD_GetXSize>
 8009f64:	4604      	mov	r4, r0
 8009f66:	f7f7 ff9d 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009f6a:	b281      	uxth	r1, r0
 8009f6c:	b2a0      	uxth	r0, r4
 8009f6e:	f7f9 fb5d 	bl	800362c <BSP_TS_Init>
  if (status != TS_OK)
 8009f72:	4681      	mov	r9, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f000 813f 	beq.w	800a1f8 <Touchscreen_demo+0x344>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7e:	f7f7 ffe5 	bl	8001f4c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009f82:	48ad      	ldr	r0, [pc, #692]	; (800a238 <Touchscreen_demo+0x384>)
 8009f84:	f7f7 ffd8 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 8009f88:	f7f7 ff8c 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009f8c:	385f      	subs	r0, #95	; 0x5f
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4aaa      	ldr	r2, [pc, #680]	; (800a23c <Touchscreen_demo+0x388>)
 8009f92:	b281      	uxth	r1, r0
 8009f94:	2000      	movs	r0, #0
 8009f96:	f7f8 f8e9 	bl	800216c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8009f9a:	f7f7 ff83 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009f9e:	3850      	subs	r0, #80	; 0x50
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4aa7      	ldr	r2, [pc, #668]	; (800a240 <Touchscreen_demo+0x38c>)
 8009fa4:	b281      	uxth	r1, r0
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f7f8 f8e0 	bl	800216c <BSP_LCD_DisplayStringAt>
{
 8009fac:	2700      	movs	r7, #0
      BSP_TS_GetState(&TS_State);
 8009fae:	4da5      	ldr	r5, [pc, #660]	; (800a244 <Touchscreen_demo+0x390>)
        sprintf((char*)text, "1[%d,%d]    ", x, y);
 8009fb0:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a260 <Touchscreen_demo+0x3ac>
{
 8009fb4:	463e      	mov	r6, r7
    if (status == TS_OK)
 8009fb6:	f1b9 0f00 	cmp.w	r9, #0
 8009fba:	f040 8114 	bne.w	800a1e6 <Touchscreen_demo+0x332>
      BSP_TS_GetState(&TS_State);
 8009fbe:	48a1      	ldr	r0, [pc, #644]	; (800a244 <Touchscreen_demo+0x390>)
 8009fc0:	f7f9 fb7e 	bl	80036c0 <BSP_TS_GetState>
      if(TS_State.touchDetected)
 8009fc4:	782b      	ldrb	r3, [r5, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 810d 	beq.w	800a1e6 <Touchscreen_demo+0x332>
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
        x = TS_State.touchX[0];
 8009fd0:	f8b5 8002 	ldrh.w	r8, [r5, #2]
        y = TS_State.touchY[0];
 8009fd4:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009fd8:	f7f7 ffb8 	bl	8001f4c <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009fdc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009fe0:	f7f7 ffaa 	bl	8001f38 <BSP_LCD_SetTextColor>
        sprintf((char*)text, "Nb touch detected = %d", TS_State.touchDetected);
 8009fe4:	782a      	ldrb	r2, [r5, #0]
 8009fe6:	4998      	ldr	r1, [pc, #608]	; (800a248 <Touchscreen_demo+0x394>)
 8009fe8:	4668      	mov	r0, sp
 8009fea:	f000 fc9f 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt(15, BSP_LCD_GetYSize() - 40, (uint8_t *)&text, LEFT_MODE);
 8009fee:	f7f7 ff59 	bl	8001ea4 <BSP_LCD_GetYSize>
 8009ff2:	3828      	subs	r0, #40	; 0x28
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	b281      	uxth	r1, r0
 8009ffa:	200f      	movs	r0, #15
 8009ffc:	f7f8 f8b6 	bl	800216c <BSP_LCD_DisplayStringAt>
        sprintf((char*)text, "1[%d,%d]    ", x, y);
 800a000:	4653      	mov	r3, sl
 800a002:	4642      	mov	r2, r8
 800a004:	4659      	mov	r1, fp
 800a006:	4668      	mov	r0, sp
 800a008:	f000 fc90 	bl	800a92c <siprintf>
                                BSP_LCD_GetYSize() - 25,
 800a00c:	f7f7 ff4a 	bl	8001ea4 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt(15,
 800a010:	3819      	subs	r0, #25
 800a012:	2303      	movs	r3, #3
 800a014:	466a      	mov	r2, sp
 800a016:	b281      	uxth	r1, r0
 800a018:	200f      	movs	r0, #15
 800a01a:	f7f8 f8a7 	bl	800216c <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 2)  /* Display 2nd touch detected coordinates if applicable */
 800a01e:	782b      	ldrb	r3, [r5, #0]
 800a020:	2b01      	cmp	r3, #1
 800a022:	f240 80ec 	bls.w	800a1fe <Touchscreen_demo+0x34a>
          sprintf((char*)text, "2[%d,%d]    ", TS_State.touchX[1], TS_State.touchY[1]);
 800a026:	89eb      	ldrh	r3, [r5, #14]
 800a028:	4668      	mov	r0, sp
 800a02a:	88aa      	ldrh	r2, [r5, #4]
 800a02c:	4987      	ldr	r1, [pc, #540]	; (800a24c <Touchscreen_demo+0x398>)
 800a02e:	f000 fc7d 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 800a032:	f7f7 ff2b 	bl	8001e8c <BSP_LCD_GetXSize>
 800a036:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a038:	f7f7 ff34 	bl	8001ea4 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 800a03c:	2305      	movs	r3, #5
 800a03e:	3c1e      	subs	r4, #30
 800a040:	3819      	subs	r0, #25
 800a042:	466a      	mov	r2, sp
 800a044:	b281      	uxth	r1, r0
 800a046:	fbb4 f4f3 	udiv	r4, r4, r3
 800a04a:	340f      	adds	r4, #15
 800a04c:	2303      	movs	r3, #3
 800a04e:	b2a0      	uxth	r0, r4
 800a050:	f7f8 f88c 	bl	800216c <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 3)  /* Display 3rd touch detected coordinates if applicable */
 800a054:	782b      	ldrb	r3, [r5, #0]
 800a056:	2b02      	cmp	r3, #2
 800a058:	f240 80d6 	bls.w	800a208 <Touchscreen_demo+0x354>
          sprintf((char*)text, "3[%d,%d]    ", TS_State.touchX[2], TS_State.touchY[2]);
 800a05c:	8a2b      	ldrh	r3, [r5, #16]
 800a05e:	4668      	mov	r0, sp
 800a060:	88ea      	ldrh	r2, [r5, #6]
 800a062:	497b      	ldr	r1, [pc, #492]	; (800a250 <Touchscreen_demo+0x39c>)
 800a064:	f000 fc62 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 800a068:	f7f7 ff10 	bl	8001e8c <BSP_LCD_GetXSize>
 800a06c:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a06e:	f7f7 ff19 	bl	8001ea4 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 800a072:	2305      	movs	r3, #5
 800a074:	3c1e      	subs	r4, #30
 800a076:	3819      	subs	r0, #25
 800a078:	466a      	mov	r2, sp
 800a07a:	0064      	lsls	r4, r4, #1
 800a07c:	b281      	uxth	r1, r0
 800a07e:	fbb4 f4f3 	udiv	r4, r4, r3
 800a082:	340f      	adds	r4, #15
 800a084:	2303      	movs	r3, #3
 800a086:	b2a0      	uxth	r0, r4
 800a088:	f7f8 f870 	bl	800216c <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 4)  /* Display 4th touch detected coordinates if applicable */
 800a08c:	782b      	ldrb	r3, [r5, #0]
 800a08e:	2b03      	cmp	r3, #3
 800a090:	f240 80bf 	bls.w	800a212 <Touchscreen_demo+0x35e>
          sprintf((char*)text, "4[%d,%d]    ", TS_State.touchX[3], TS_State.touchY[3]);
 800a094:	8a6b      	ldrh	r3, [r5, #18]
 800a096:	4668      	mov	r0, sp
 800a098:	892a      	ldrh	r2, [r5, #8]
 800a09a:	496e      	ldr	r1, [pc, #440]	; (800a254 <Touchscreen_demo+0x3a0>)
 800a09c:	f000 fc46 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 800a0a0:	f7f7 fef4 	bl	8001e8c <BSP_LCD_GetXSize>
 800a0a4:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a0a6:	f7f7 fefd 	bl	8001ea4 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 800a0aa:	2305      	movs	r3, #5
 800a0ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a0b0:	3819      	subs	r0, #25
 800a0b2:	466a      	mov	r2, sp
 800a0b4:	3c5a      	subs	r4, #90	; 0x5a
 800a0b6:	b281      	uxth	r1, r0
 800a0b8:	fbb4 f4f3 	udiv	r4, r4, r3
 800a0bc:	340f      	adds	r4, #15
 800a0be:	2303      	movs	r3, #3
 800a0c0:	b2a0      	uxth	r0, r4
 800a0c2:	f7f8 f853 	bl	800216c <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 5)  /* Display 5th touch detected coordinates if applicable */
 800a0c6:	782b      	ldrb	r3, [r5, #0]
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	f240 80cb 	bls.w	800a264 <Touchscreen_demo+0x3b0>
          sprintf((char*)text, "5[%d,%d]    ", TS_State.touchX[4], TS_State.touchY[4]);
 800a0ce:	8aab      	ldrh	r3, [r5, #20]
 800a0d0:	4668      	mov	r0, sp
 800a0d2:	896a      	ldrh	r2, [r5, #10]
 800a0d4:	4960      	ldr	r1, [pc, #384]	; (800a258 <Touchscreen_demo+0x3a4>)
 800a0d6:	f000 fc29 	bl	800a92c <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 800a0da:	f7f7 fed7 	bl	8001e8c <BSP_LCD_GetXSize>
 800a0de:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a0e0:	f7f7 fee0 	bl	8001ea4 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 800a0e4:	2305      	movs	r3, #5
 800a0e6:	3c1e      	subs	r4, #30
 800a0e8:	3819      	subs	r0, #25
 800a0ea:	466a      	mov	r2, sp
 800a0ec:	00a4      	lsls	r4, r4, #2
 800a0ee:	b281      	uxth	r1, r0
 800a0f0:	fbb4 f4f3 	udiv	r4, r4, r3
 800a0f4:	340f      	adds	r4, #15
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	b2a0      	uxth	r0, r4
 800a0fa:	f7f8 f837 	bl	800216c <BSP_LCD_DisplayStringAt>
        radius = TS_State.touchWeight[0]/3;
 800a0fe:	7dac      	ldrb	r4, [r5, #22]
        if (radius > CIRCLE_RADIUS)
 800a100:	2c5c      	cmp	r4, #92	; 0x5c
 800a102:	f200 80b4 	bhi.w	800a26e <Touchscreen_demo+0x3ba>
        else if (radius < 1)
 800a106:	2c02      	cmp	r4, #2
 800a108:	f240 80b3 	bls.w	800a272 <Touchscreen_demo+0x3be>
        radius = TS_State.touchWeight[0]/3;
 800a10c:	2303      	movs	r3, #3
 800a10e:	fbb4 f4f3 	udiv	r4, r4, r3
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800a112:	f7f7 fec7 	bl	8001ea4 <BSP_LCD_GetYSize>
 800a116:	3878      	subs	r0, #120	; 0x78
 800a118:	4582      	cmp	sl, r0
 800a11a:	d964      	bls.n	800a1e6 <Touchscreen_demo+0x332>
            (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 800a11c:	f7f7 fec2 	bl	8001ea4 <BSP_LCD_GetYSize>
 800a120:	383c      	subs	r0, #60	; 0x3c
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800a122:	4582      	cmp	sl, r0
 800a124:	d25f      	bcs.n	800a1e6 <Touchscreen_demo+0x332>
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800a126:	f04f 0a05 	mov.w	sl, #5
 800a12a:	f7f7 feaf 	bl	8001e8c <BSP_LCD_GetXSize>
 800a12e:	fbb0 f0fa 	udiv	r0, r0, sl
 800a132:	381e      	subs	r0, #30
 800a134:	4580      	cmp	r8, r0
 800a136:	d90c      	bls.n	800a152 <Touchscreen_demo+0x29e>
              (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 800a138:	f7f7 fea8 	bl	8001e8c <BSP_LCD_GetXSize>
 800a13c:	fbb0 f0fa 	udiv	r0, r0, sl
 800a140:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800a142:	4580      	cmp	r8, r0
 800a144:	d205      	bcs.n	800a152 <Touchscreen_demo+0x29e>
            if ((radius != radius_previous) || (state != 1))
 800a146:	42bc      	cmp	r4, r7
 800a148:	f040 8095 	bne.w	800a276 <Touchscreen_demo+0x3c2>
 800a14c:	2e01      	cmp	r6, #1
 800a14e:	f040 8094 	bne.w	800a27a <Touchscreen_demo+0x3c6>
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800a152:	f7f7 fe9b 	bl	8001e8c <BSP_LCD_GetXSize>
 800a156:	f04f 0a05 	mov.w	sl, #5
 800a15a:	0040      	lsls	r0, r0, #1
 800a15c:	fbb0 f0fa 	udiv	r0, r0, sl
 800a160:	381e      	subs	r0, #30
 800a162:	4580      	cmp	r8, r0
 800a164:	d90d      	bls.n	800a182 <Touchscreen_demo+0x2ce>
              (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 800a166:	f7f7 fe91 	bl	8001e8c <BSP_LCD_GetXSize>
 800a16a:	0040      	lsls	r0, r0, #1
 800a16c:	fbb0 f0fa 	udiv	r0, r0, sl
 800a170:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800a172:	4580      	cmp	r8, r0
 800a174:	d205      	bcs.n	800a182 <Touchscreen_demo+0x2ce>
            if ((radius != radius_previous) || (state != 2))
 800a176:	42bc      	cmp	r4, r7
 800a178:	f040 8096 	bne.w	800a2a8 <Touchscreen_demo+0x3f4>
 800a17c:	2e02      	cmp	r6, #2
 800a17e:	f040 8095 	bne.w	800a2ac <Touchscreen_demo+0x3f8>
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800a182:	f7f7 fe83 	bl	8001e8c <BSP_LCD_GetXSize>
 800a186:	f04f 0a05 	mov.w	sl, #5
 800a18a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a18e:	fbb0 f0fa 	udiv	r0, r0, sl
 800a192:	381e      	subs	r0, #30
 800a194:	4580      	cmp	r8, r0
 800a196:	d90e      	bls.n	800a1b6 <Touchscreen_demo+0x302>
              (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 800a198:	f7f7 fe78 	bl	8001e8c <BSP_LCD_GetXSize>
 800a19c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a1a0:	fbb0 f0fa 	udiv	r0, r0, sl
 800a1a4:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800a1a6:	4580      	cmp	r8, r0
 800a1a8:	d205      	bcs.n	800a1b6 <Touchscreen_demo+0x302>
            if ((radius != radius_previous) || (state != 4))
 800a1aa:	42bc      	cmp	r4, r7
 800a1ac:	f040 8096 	bne.w	800a2dc <Touchscreen_demo+0x428>
 800a1b0:	2e04      	cmp	r6, #4
 800a1b2:	f040 8095 	bne.w	800a2e0 <Touchscreen_demo+0x42c>
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800a1b6:	f7f7 fe69 	bl	8001e8c <BSP_LCD_GetXSize>
 800a1ba:	f04f 0a05 	mov.w	sl, #5
 800a1be:	0080      	lsls	r0, r0, #2
 800a1c0:	fbb0 f0fa 	udiv	r0, r0, sl
 800a1c4:	381e      	subs	r0, #30
 800a1c6:	4580      	cmp	r8, r0
 800a1c8:	d90d      	bls.n	800a1e6 <Touchscreen_demo+0x332>
              (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 800a1ca:	f7f7 fe5f 	bl	8001e8c <BSP_LCD_GetXSize>
 800a1ce:	0080      	lsls	r0, r0, #2
 800a1d0:	fbb0 f0fa 	udiv	r0, r0, sl
 800a1d4:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800a1d6:	4580      	cmp	r8, r0
 800a1d8:	d205      	bcs.n	800a1e6 <Touchscreen_demo+0x332>
            if ((radius != radius_previous) || (state != 8))
 800a1da:	42bc      	cmp	r4, r7
 800a1dc:	f040 809a 	bne.w	800a314 <Touchscreen_demo+0x460>
 800a1e0:	2e08      	cmp	r6, #8
 800a1e2:	f040 8099 	bne.w	800a318 <Touchscreen_demo+0x464>
    if (CheckForUserInput() > 0)
 800a1e6:	f7ff f819 	bl	800921c <CheckForUserInput>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f040 80ad 	bne.w	800a34a <Touchscreen_demo+0x496>
    HAL_Delay(10);
 800a1f0:	200a      	movs	r0, #10
 800a1f2:	f7f9 fb87 	bl	8003904 <HAL_Delay>
    if (status == TS_OK)
 800a1f6:	e6de      	b.n	8009fb6 <Touchscreen_demo+0x102>
    Touchscreen_DrawBackground(state);
 800a1f8:	f7ff fd44 	bl	8009c84 <Touchscreen_DrawBackground>
 800a1fc:	e6d6      	b.n	8009fac <Touchscreen_demo+0xf8>
          sprintf((char*)text, "              ");
 800a1fe:	4917      	ldr	r1, [pc, #92]	; (800a25c <Touchscreen_demo+0x3a8>)
 800a200:	4668      	mov	r0, sp
 800a202:	f000 fbb3 	bl	800a96c <strcpy>
 800a206:	e714      	b.n	800a032 <Touchscreen_demo+0x17e>
          sprintf((char*)text, "              ");
 800a208:	4914      	ldr	r1, [pc, #80]	; (800a25c <Touchscreen_demo+0x3a8>)
 800a20a:	4668      	mov	r0, sp
 800a20c:	f000 fbae 	bl	800a96c <strcpy>
 800a210:	e72a      	b.n	800a068 <Touchscreen_demo+0x1b4>
          sprintf((char*)text, "              ");
 800a212:	4912      	ldr	r1, [pc, #72]	; (800a25c <Touchscreen_demo+0x3a8>)
 800a214:	4668      	mov	r0, sp
 800a216:	f000 fba9 	bl	800a96c <strcpy>
 800a21a:	e741      	b.n	800a0a0 <Touchscreen_demo+0x1ec>
 800a21c:	ff0000ff 	.word	0xff0000ff
 800a220:	20000074 	.word	0x20000074
 800a224:	080127b3 	.word	0x080127b3
 800a228:	20000084 	.word	0x20000084
 800a22c:	080127bf 	.word	0x080127bf
 800a230:	080127dd 	.word	0x080127dd
 800a234:	08012814 	.word	0x08012814
 800a238:	ffff0000 	.word	0xffff0000
 800a23c:	080127ad 	.word	0x080127ad
 800a240:	08011e41 	.word	0x08011e41
 800a244:	200229a0 	.word	0x200229a0
 800a248:	08012843 	.word	0x08012843
 800a24c:	08012867 	.word	0x08012867
 800a250:	08012883 	.word	0x08012883
 800a254:	08012890 	.word	0x08012890
 800a258:	0801289d 	.word	0x0801289d
 800a25c:	08012874 	.word	0x08012874
 800a260:	0801285a 	.word	0x0801285a
          sprintf((char*)text, "              ");
 800a264:	493a      	ldr	r1, [pc, #232]	; (800a350 <Touchscreen_demo+0x49c>)
 800a266:	4668      	mov	r0, sp
 800a268:	f000 fb80 	bl	800a96c <strcpy>
 800a26c:	e735      	b.n	800a0da <Touchscreen_demo+0x226>
          radius = CIRCLE_RADIUS;
 800a26e:	241e      	movs	r4, #30
 800a270:	e74f      	b.n	800a112 <Touchscreen_demo+0x25e>
          radius = 1;
 800a272:	2401      	movs	r4, #1
 800a274:	e74d      	b.n	800a112 <Touchscreen_demo+0x25e>
              if (state != 1) /* Erase previous filled circle */
 800a276:	2e01      	cmp	r6, #1
 800a278:	d002      	beq.n	800a280 <Touchscreen_demo+0x3cc>
                Touchscreen_DrawBackground(state);
 800a27a:	4630      	mov	r0, r6
 800a27c:	f7ff fd02 	bl	8009c84 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a280:	4834      	ldr	r0, [pc, #208]	; (800a354 <Touchscreen_demo+0x4a0>)
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800a282:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a284:	f7f7 fe58 	bl	8001f38 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800a288:	f7f7 fe00 	bl	8001e8c <BSP_LCD_GetXSize>
 800a28c:	4606      	mov	r6, r0
 800a28e:	f7f7 fe09 	bl	8001ea4 <BSP_LCD_GetYSize>
 800a292:	2305      	movs	r3, #5
 800a294:	385a      	subs	r0, #90	; 0x5a
 800a296:	4622      	mov	r2, r4
 800a298:	fbb6 f6f3 	udiv	r6, r6, r3
 800a29c:	b281      	uxth	r1, r0
 800a29e:	b2b0      	uxth	r0, r6
              state = 1;
 800a2a0:	2601      	movs	r6, #1
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800a2a2:	f7f8 fa73 	bl	800278c <BSP_LCD_FillCircle>
              state = 1;
 800a2a6:	e754      	b.n	800a152 <Touchscreen_demo+0x29e>
              if (state != 2) /* Erase previous filled circle */
 800a2a8:	2e02      	cmp	r6, #2
 800a2aa:	d002      	beq.n	800a2b2 <Touchscreen_demo+0x3fe>
                Touchscreen_DrawBackground(state);
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7ff fce9 	bl	8009c84 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a2b2:	4829      	ldr	r0, [pc, #164]	; (800a358 <Touchscreen_demo+0x4a4>)
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800a2b4:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a2b6:	f7f7 fe3f 	bl	8001f38 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800a2ba:	f7f7 fde7 	bl	8001e8c <BSP_LCD_GetXSize>
 800a2be:	4606      	mov	r6, r0
 800a2c0:	f7f7 fdf0 	bl	8001ea4 <BSP_LCD_GetYSize>
 800a2c4:	2305      	movs	r3, #5
 800a2c6:	0076      	lsls	r6, r6, #1
 800a2c8:	385a      	subs	r0, #90	; 0x5a
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	b281      	uxth	r1, r0
 800a2ce:	fbb6 f6f3 	udiv	r6, r6, r3
 800a2d2:	b2b0      	uxth	r0, r6
              state = 2;
 800a2d4:	2602      	movs	r6, #2
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800a2d6:	f7f8 fa59 	bl	800278c <BSP_LCD_FillCircle>
              state = 2;
 800a2da:	e752      	b.n	800a182 <Touchscreen_demo+0x2ce>
              if (state != 4) /* Erase previous filled circle */
 800a2dc:	2e04      	cmp	r6, #4
 800a2de:	d002      	beq.n	800a2e6 <Touchscreen_demo+0x432>
                Touchscreen_DrawBackground(state);
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff fccf 	bl	8009c84 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a2e6:	f06f 00ff 	mvn.w	r0, #255	; 0xff
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800a2ea:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a2ec:	f7f7 fe24 	bl	8001f38 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800a2f0:	f7f7 fdcc 	bl	8001e8c <BSP_LCD_GetXSize>
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	f7f7 fdd5 	bl	8001ea4 <BSP_LCD_GetYSize>
 800a2fa:	2305      	movs	r3, #5
 800a2fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a300:	385a      	subs	r0, #90	; 0x5a
 800a302:	4622      	mov	r2, r4
 800a304:	b281      	uxth	r1, r0
 800a306:	fbb6 f6f3 	udiv	r6, r6, r3
 800a30a:	b2b0      	uxth	r0, r6
              state = 4;
 800a30c:	2604      	movs	r6, #4
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800a30e:	f7f8 fa3d 	bl	800278c <BSP_LCD_FillCircle>
              state = 4;
 800a312:	e750      	b.n	800a1b6 <Touchscreen_demo+0x302>
              if (state != 8) /* Erase previous filled circle */
 800a314:	2e08      	cmp	r6, #8
 800a316:	d002      	beq.n	800a31e <Touchscreen_demo+0x46a>
                Touchscreen_DrawBackground(state);
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff fcb3 	bl	8009c84 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800a31e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800a322:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800a324:	f7f7 fe08 	bl	8001f38 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800a328:	f7f7 fdb0 	bl	8001e8c <BSP_LCD_GetXSize>
 800a32c:	4606      	mov	r6, r0
 800a32e:	f7f7 fdb9 	bl	8001ea4 <BSP_LCD_GetYSize>
 800a332:	2305      	movs	r3, #5
 800a334:	00b6      	lsls	r6, r6, #2
 800a336:	385a      	subs	r0, #90	; 0x5a
 800a338:	4622      	mov	r2, r4
 800a33a:	b281      	uxth	r1, r0
 800a33c:	fbb6 f6f3 	udiv	r6, r6, r3
 800a340:	b2b0      	uxth	r0, r6
              state = 8;
 800a342:	2608      	movs	r6, #8
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800a344:	f7f8 fa22 	bl	800278c <BSP_LCD_FillCircle>
              state = 8;
 800a348:	e74d      	b.n	800a1e6 <Touchscreen_demo+0x332>
}
 800a34a:	b009      	add	sp, #36	; 0x24
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	08012874 	.word	0x08012874
 800a354:	ff0000ff 	.word	0xff0000ff
 800a358:	ffff0000 	.word	0xffff0000

0800a35c <set_variables>:

/*
 * @brief Cette fonction met a jour les variables au demarrage
 * @retval rien
 */
void set_variables(){
 800a35c:	b538      	push	{r3, r4, r5, lr}

	TEX = BSP_LCD_GetXSize();
 800a35e:	4c18      	ldr	r4, [pc, #96]	; (800a3c0 <set_variables+0x64>)
 800a360:	f7f7 fd94 	bl	8001e8c <BSP_LCD_GetXSize>
 800a364:	6020      	str	r0, [r4, #0]
	TEY = BSP_LCD_GetYSize();
 800a366:	f7f7 fd9d 	bl	8001ea4 <BSP_LCD_GetYSize>

	largeur_bande = TEX - marge_droite - marge_gauche;
 800a36a:	4a16      	ldr	r2, [pc, #88]	; (800a3c4 <set_variables+0x68>)
	TEY = BSP_LCD_GetYSize();
 800a36c:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <set_variables+0x6c>)
	largeur_bande = TEX - marge_droite - marge_gauche;
 800a36e:	6811      	ldr	r1, [r2, #0]
	TEY = BSP_LCD_GetYSize();
 800a370:	6018      	str	r0, [r3, #0]
	
	pXbR = 20; // position X bande rouge
	pYbR = TEY/4 * 1 - hauteur_bande/2 + marge_haut; // position Y bande rouge
 800a372:	2800      	cmp	r0, #0
	largeur_bande = TEX - marge_droite - marge_gauche;
 800a374:	6823      	ldr	r3, [r4, #0]
	pYbR = TEY/4 * 1 - hauteur_bande/2 + marge_haut; // position Y bande rouge
 800a376:	bfb8      	it	lt
 800a378:	3003      	addlt	r0, #3
	largeur_bande = TEX - marge_droite - marge_gauche;
 800a37a:	1a5b      	subs	r3, r3, r1
 800a37c:	6851      	ldr	r1, [r2, #4]
 800a37e:	1a5b      	subs	r3, r3, r1
 800a380:	4912      	ldr	r1, [pc, #72]	; (800a3cc <set_variables+0x70>)
 800a382:	600b      	str	r3, [r1, #0]
	pXbR = 20; // position X bande rouge
 800a384:	2114      	movs	r1, #20
 800a386:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <set_variables+0x74>)
 800a388:	6019      	str	r1, [r3, #0]
	pYbR = TEY/4 * 1 - hauteur_bande/2 + marge_haut; // position Y bande rouge
 800a38a:	6893      	ldr	r3, [r2, #8]
 800a38c:	68d2      	ldr	r2, [r2, #12]
 800a38e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a392:	4910      	ldr	r1, [pc, #64]	; (800a3d4 <set_variables+0x78>)
 800a394:	105b      	asrs	r3, r3, #1
 800a396:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 800a39a:	189c      	adds	r4, r3, r2

	pXbV = 20;
	pYbV = TEY/4 * 2 - hauteur_bande/2 + marge_haut;
 800a39c:	eb03 03a0 	add.w	r3, r3, r0, asr #2
	pYbR = TEY/4 * 1 - hauteur_bande/2 + marge_haut; // position Y bande rouge
 800a3a0:	600c      	str	r4, [r1, #0]
	pXbV = 20;
 800a3a2:	2114      	movs	r1, #20
 800a3a4:	4c0c      	ldr	r4, [pc, #48]	; (800a3d8 <set_variables+0x7c>)
	pYbV = TEY/4 * 2 - hauteur_bande/2 + marge_haut;
 800a3a6:	18d5      	adds	r5, r2, r3

	pXbB = 20;
	pYbB = TEY/4 * 3 - hauteur_bande/2 + marge_haut;
 800a3a8:	eb03 03a0 	add.w	r3, r3, r0, asr #2
	pXbV = 20;
 800a3ac:	6021      	str	r1, [r4, #0]
	pYbV = TEY/4 * 2 - hauteur_bande/2 + marge_haut;
 800a3ae:	4c0b      	ldr	r4, [pc, #44]	; (800a3dc <set_variables+0x80>)
	pYbB = TEY/4 * 3 - hauteur_bande/2 + marge_haut;
 800a3b0:	4413      	add	r3, r2
 800a3b2:	4a0b      	ldr	r2, [pc, #44]	; (800a3e0 <set_variables+0x84>)
	pYbV = TEY/4 * 2 - hauteur_bande/2 + marge_haut;
 800a3b4:	6025      	str	r5, [r4, #0]
	pXbB = 20;
 800a3b6:	4c0b      	ldr	r4, [pc, #44]	; (800a3e4 <set_variables+0x88>)
	pYbB = TEY/4 * 3 - hauteur_bande/2 + marge_haut;
 800a3b8:	6013      	str	r3, [r2, #0]
	pXbB = 20;
 800a3ba:	6021      	str	r1, [r4, #0]
}
 800a3bc:	bd38      	pop	{r3, r4, r5, pc}
 800a3be:	bf00      	nop
 800a3c0:	20024448 	.word	0x20024448
 800a3c4:	20000578 	.word	0x20000578
 800a3c8:	20024454 	.word	0x20024454
 800a3cc:	2002443c 	.word	0x2002443c
 800a3d0:	20024458 	.word	0x20024458
 800a3d4:	20024434 	.word	0x20024434
 800a3d8:	20024428 	.word	0x20024428
 800a3dc:	20024450 	.word	0x20024450
 800a3e0:	20024430 	.word	0x20024430
 800a3e4:	20024438 	.word	0x20024438

0800a3e8 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800a3ea:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800a3ec:	4a0c      	ldr	r2, [pc, #48]	; (800a420 <LCD_LOG_DeInit+0x38>)
 800a3ee:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4a0c      	ldr	r2, [pc, #48]	; (800a424 <LCD_LOG_DeInit+0x3c>)
 800a3f4:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <LCD_LOG_DeInit+0x40>)
 800a3f8:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 800a3fa:	4a0c      	ldr	r2, [pc, #48]	; (800a42c <LCD_LOG_DeInit+0x44>)
 800a3fc:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
 800a3fe:	4a0c      	ldr	r2, [pc, #48]	; (800a430 <LCD_LOG_DeInit+0x48>)
 800a400:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800a402:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <LCD_LOG_DeInit+0x4c>)
 800a404:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800a406:	4a0c      	ldr	r2, [pc, #48]	; (800a438 <LCD_LOG_DeInit+0x50>)
 800a408:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 800a40a:	4a0c      	ldr	r2, [pc, #48]	; (800a43c <LCD_LOG_DeInit+0x54>)
 800a40c:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 800a40e:	4a0c      	ldr	r2, [pc, #48]	; (800a440 <LCD_LOG_DeInit+0x58>)
 800a410:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 800a412:	4a0c      	ldr	r2, [pc, #48]	; (800a444 <LCD_LOG_DeInit+0x5c>)
 800a414:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 800a416:	4a0c      	ldr	r2, [pc, #48]	; (800a448 <LCD_LOG_DeInit+0x60>)
 800a418:	8013      	strh	r3, [r2, #0]
}
 800a41a:	4770      	bx	lr
 800a41c:	200280c0 	.word	0x200280c0
 800a420:	ff000080 	.word	0xff000080
 800a424:	20024462 	.word	0x20024462
 800a428:	20024468 	.word	0x20024468
 800a42c:	20024460 	.word	0x20024460
 800a430:	2002445e 	.word	0x2002445e
 800a434:	2002445c 	.word	0x2002445c
 800a438:	20024464 	.word	0x20024464
 800a43c:	2002446a 	.word	0x2002446a
 800a440:	20024465 	.word	0x20024465
 800a444:	20024466 	.word	0x20024466
 800a448:	200280c4 	.word	0x200280c4

0800a44c <LCD_LOG_Init>:
{
 800a44c:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800a44e:	f7ff ffcb 	bl	800a3e8 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800a452:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800a45a:	f7f7 bd95 	b.w	8001f88 <BSP_LCD_Clear>
	...

0800a460 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800a460:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800a462:	4c16      	ldr	r4, [pc, #88]	; (800a4bc <LCD_LOG_SetHeader+0x5c>)
{
 800a464:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a466:	4e16      	ldr	r6, [pc, #88]	; (800a4c0 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800a468:	4620      	mov	r0, r4
 800a46a:	f7f7 fd79 	bl	8001f60 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a46e:	4630      	mov	r0, r6
 800a470:	f7f7 fd62 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 800a474:	f7f7 fd0a 	bl	8001e8c <BSP_LCD_GetXSize>
 800a478:	88e3      	ldrh	r3, [r4, #6]
 800a47a:	2100      	movs	r1, #0
 800a47c:	b282      	uxth	r2, r0
 800a47e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a482:	4608      	mov	r0, r1
 800a484:	b29b      	uxth	r3, r3
 800a486:	f7f8 f93d 	bl	8002704 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295
 800a48e:	f7f7 fd53 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a492:	4630      	mov	r0, r6
 800a494:	f7f7 fd5a 	bl	8001f4c <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800a498:	462a      	mov	r2, r5
 800a49a:	88e1      	ldrh	r1, [r4, #6]
 800a49c:	2301      	movs	r3, #1
 800a49e:	2000      	movs	r0, #0
 800a4a0:	f7f7 fe64 	bl	800216c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	f7f7 fd50 	bl	8001f4c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800a4ac:	4805      	ldr	r0, [pc, #20]	; (800a4c4 <LCD_LOG_SetHeader+0x64>)
 800a4ae:	f7f7 fd43 	bl	8001f38 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800a4b2:	4805      	ldr	r0, [pc, #20]	; (800a4c8 <LCD_LOG_SetHeader+0x68>)
}
 800a4b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800a4b8:	f7f7 bd52 	b.w	8001f60 <BSP_LCD_SetFont>
 800a4bc:	2000008c 	.word	0x2000008c
 800a4c0:	ff0000ff 	.word	0xff0000ff
 800a4c4:	ff000080 	.word	0xff000080
 800a4c8:	20000084 	.word	0x20000084

0800a4cc <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	3401      	adds	r4, #1
 800a4d4:	f7f8 f93a 	bl	800274c <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800a4d8:	2c15      	cmp	r4, #21
 800a4da:	d1f9      	bne.n	800a4d0 <LCD_LOG_ClearTextZone+0x4>
  }
  
  LCD_LOG_DeInit();
}
 800a4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_LOG_DeInit();
 800a4e0:	f7ff bf82 	b.w	800a3e8 <LCD_LOG_DeInit>

0800a4e4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800a4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800a4e8:	4d1c      	ldr	r5, [pc, #112]	; (800a55c <LCD_LOG_UpdateDisplay+0x78>)
 800a4ea:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <LCD_LOG_UpdateDisplay+0x7c>)
 800a4ec:	882b      	ldrh	r3, [r5, #0]
 800a4ee:	8812      	ldrh	r2, [r2, #0]
 800a4f0:	2b0f      	cmp	r3, #15
 800a4f2:	4f1c      	ldr	r7, [pc, #112]	; (800a564 <LCD_LOG_UpdateDisplay+0x80>)
 800a4f4:	d811      	bhi.n	800a51a <LCD_LOG_UpdateDisplay+0x36>
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d311      	bcc.n	800a51e <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800a4fa:	2484      	movs	r4, #132	; 0x84
 800a4fc:	fb04 7303 	mla	r3, r4, r3, r7
 800a500:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a504:	f7f7 fd18 	bl	8001f38 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800a508:	8829      	ldrh	r1, [r5, #0]
 800a50a:	1d08      	adds	r0, r1, #4
 800a50c:	fb04 7101 	mla	r1, r4, r1, r7
 800a510:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 800a512:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800a516:	f7f7 be81 	b.w	800221c <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d201      	bcs.n	800a522 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800a51e:	3375      	adds	r3, #117	; 0x75
 800a520:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 800a522:	3b10      	subs	r3, #16
 800a524:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800a526:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800a52a:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 800a52e:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800a530:	19a1      	adds	r1, r4, r6
 800a532:	fbb1 f5f8 	udiv	r5, r1, r8
 800a536:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800a53a:	fb09 7505 	mla	r5, r9, r5, r7
 800a53e:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800a542:	f7f7 fcf9 	bl	8001f38 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800a546:	1d30      	adds	r0, r6, #4
 800a548:	3601      	adds	r6, #1
 800a54a:	4629      	mov	r1, r5
 800a54c:	b280      	uxth	r0, r0
 800a54e:	f7f7 fe65 	bl	800221c <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800a552:	2e11      	cmp	r6, #17
 800a554:	d1ec      	bne.n	800a530 <LCD_LOG_UpdateDisplay+0x4c>
}
 800a556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55a:	bf00      	nop
 800a55c:	20024460 	.word	0x20024460
 800a560:	20024468 	.word	0x20024468
 800a564:	2002446c 	.word	0x2002446c

0800a568 <__io_putchar>:
{
 800a568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800a56e:	f7f7 fd01 	bl	8001f74 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 800a572:	4b3d      	ldr	r3, [pc, #244]	; (800a668 <__io_putchar+0x100>)
  sFONT *cFont = BSP_LCD_GetFont();
 800a574:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	bb43      	cbnz	r3, 800a5cc <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 800a57a:	4a3c      	ldr	r2, [pc, #240]	; (800a66c <__io_putchar+0x104>)
 800a57c:	4c3c      	ldr	r4, [pc, #240]	; (800a670 <__io_putchar+0x108>)
 800a57e:	7811      	ldrb	r1, [r2, #0]
 800a580:	2901      	cmp	r1, #1
 800a582:	d10b      	bne.n	800a59c <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800a584:	493b      	ldr	r1, [pc, #236]	; (800a674 <__io_putchar+0x10c>)
      LCD_ScrollActive = DISABLE;
 800a586:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800a588:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 800a58a:	4a3b      	ldr	r2, [pc, #236]	; (800a678 <__io_putchar+0x110>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800a58c:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a58e:	493b      	ldr	r1, [pc, #236]	; (800a67c <__io_putchar+0x114>)
      LCD_Scrolled = DISABLE;
 800a590:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a592:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 800a594:	4a3a      	ldr	r2, [pc, #232]	; (800a680 <__io_putchar+0x118>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a596:	493b      	ldr	r1, [pc, #236]	; (800a684 <__io_putchar+0x11c>)
      LCD_ScrollBackStep = 0;
 800a598:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a59a:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800a59c:	4f3a      	ldr	r7, [pc, #232]	; (800a688 <__io_putchar+0x120>)
 800a59e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800a694 <__io_putchar+0x12c>
 800a5a2:	883e      	ldrh	r6, [r7, #0]
 800a5a4:	f7f7 fc72 	bl	8001e8c <BSP_LCD_GetXSize>
 800a5a8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a5ac:	fbb0 f0f3 	udiv	r0, r0, r3
 800a5b0:	4286      	cmp	r6, r0
 800a5b2:	463e      	mov	r6, r7
 800a5b4:	d20d      	bcs.n	800a5d2 <__io_putchar+0x6a>
 800a5b6:	2d0a      	cmp	r5, #10
 800a5b8:	d00b      	beq.n	800a5d2 <__io_putchar+0x6a>
 800a5ba:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a5bc:	8823      	ldrh	r3, [r4, #0]
 800a5be:	1c51      	adds	r1, r2, #1
 800a5c0:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a5c2:	2184      	movs	r1, #132	; 0x84
 800a5c4:	fb01 9903 	mla	r9, r1, r3, r9
 800a5c8:	f809 5002 	strb.w	r5, [r9, r2]
}
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800a5d2:	4f2c      	ldr	r7, [pc, #176]	; (800a684 <__io_putchar+0x11c>)
 800a5d4:	8822      	ldrh	r2, [r4, #0]
 800a5d6:	883b      	ldrh	r3, [r7, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d809      	bhi.n	800a5f0 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800a5dc:	4a2b      	ldr	r2, [pc, #172]	; (800a68c <__io_putchar+0x124>)
 800a5de:	7811      	ldrb	r1, [r2, #0]
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d134      	bne.n	800a64e <__io_putchar+0xe6>
          LCD_CacheBuffer_yptr_top++;
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800a5e8:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 800a5ea:	bf14      	ite	ne
 800a5ec:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 800a5ee:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a5f0:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a5f4:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a5f8:	f7f7 fc48 	bl	8001e8c <BSP_LCD_GetXSize>
 800a5fc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800a600:	2320      	movs	r3, #32
 800a602:	fbb0 f0f2 	udiv	r0, r0, r2
 800a606:	4550      	cmp	r0, sl
 800a608:	d824      	bhi.n	800a654 <__io_putchar+0xec>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a60a:	8823      	ldrh	r3, [r4, #0]
 800a60c:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 800a60e:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a612:	fb02 9303 	mla	r3, r2, r3, r9
 800a616:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <__io_putchar+0x128>)
      LCD_CacheBuffer_xptr = 0;
 800a618:	f8a6 8000 	strh.w	r8, [r6]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 800a622:	f7ff ff5f 	bl	800a4e4 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 800a626:	8823      	ldrh	r3, [r4, #0]
 800a628:	3301      	adds	r3, #1
 800a62a:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800a62c:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 800a62e:	bf05      	ittet	eq
 800a630:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800a632:	4a16      	ldreq	r2, [pc, #88]	; (800a68c <__io_putchar+0x124>)
      LCD_CacheBuffer_yptr_bottom ++; 
 800a634:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
 800a636:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 800a63a:	bf04      	itt	eq
 800a63c:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800a63e:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 800a640:	2d0a      	cmp	r5, #10
 800a642:	d0c3      	beq.n	800a5cc <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a644:	8832      	ldrh	r2, [r6, #0]
 800a646:	8823      	ldrh	r3, [r4, #0]
 800a648:	1c51      	adds	r1, r2, #1
 800a64a:	8031      	strh	r1, [r6, #0]
 800a64c:	e7b9      	b.n	800a5c2 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800a64e:	2300      	movs	r3, #0
 800a650:	7013      	strb	r3, [r2, #0]
 800a652:	e7cd      	b.n	800a5f0 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a654:	8831      	ldrh	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a656:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a65a:	8822      	ldrh	r2, [r4, #0]
 800a65c:	1c48      	adds	r0, r1, #1
 800a65e:	fb0b 9202 	mla	r2, fp, r2, r9
 800a662:	8030      	strh	r0, [r6, #0]
 800a664:	5453      	strb	r3, [r2, r1]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a666:	e7c7      	b.n	800a5f8 <__io_putchar+0x90>
 800a668:	20024465 	.word	0x20024465
 800a66c:	2002446a 	.word	0x2002446a
 800a670:	20024460 	.word	0x20024460
 800a674:	2002445c 	.word	0x2002445c
 800a678:	20024466 	.word	0x20024466
 800a67c:	2002445e 	.word	0x2002445e
 800a680:	200280c4 	.word	0x200280c4
 800a684:	20024468 	.word	0x20024468
 800a688:	20024462 	.word	0x20024462
 800a68c:	20024464 	.word	0x20024464
 800a690:	200280c0 	.word	0x200280c0
 800a694:	2002446c 	.word	0x2002446c

0800a698 <LCD_LOG_ScrollBack>:
  * @retval Status
  */
ErrorStatus LCD_LOG_ScrollBack(void)
{
    
  if(LCD_ScrollActive == DISABLE)
 800a698:	4824      	ldr	r0, [pc, #144]	; (800a72c <LCD_LOG_ScrollBack+0x94>)
{
 800a69a:	b510      	push	{r4, lr}
  if(LCD_ScrollActive == DISABLE)
 800a69c:	7802      	ldrb	r2, [r0, #0]
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	d131      	bne.n	800a706 <LCD_LOG_ScrollBack+0x6e>
  {
    
    LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a6a2:	4a23      	ldr	r2, [pc, #140]	; (800a730 <LCD_LOG_ScrollBack+0x98>)
 800a6a4:	4923      	ldr	r1, [pc, #140]	; (800a734 <LCD_LOG_ScrollBack+0x9c>)
 800a6a6:	8813      	ldrh	r3, [r2, #0]
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a6a8:	4c23      	ldr	r4, [pc, #140]	; (800a738 <LCD_LOG_ScrollBack+0xa0>)
    LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a6aa:	800b      	strh	r3, [r1, #0]
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a6ac:	4923      	ldr	r1, [pc, #140]	; (800a73c <LCD_LOG_ScrollBack+0xa4>)
 800a6ae:	8809      	ldrh	r1, [r1, #0]
    
    
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a6b0:	428b      	cmp	r3, r1
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a6b2:	8021      	strh	r1, [r4, #0]
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a6b4:	d907      	bls.n	800a6c6 <LCD_LOG_ScrollBack+0x2e>
    {
      
      if ((LCD_CacheBuffer_yptr_bottom - LCD_CacheBuffer_yptr_top) <=  YWINDOW_SIZE)
 800a6b6:	1a5c      	subs	r4, r3, r1
 800a6b8:	2c11      	cmp	r4, #17
 800a6ba:	dc04      	bgt.n	800a6c6 <LCD_LOG_ScrollBack+0x2e>
      {
        LCD_Lock = DISABLE;
 800a6bc:	4b20      	ldr	r3, [pc, #128]	; (800a740 <LCD_LOG_ScrollBack+0xa8>)
 800a6be:	2200      	movs	r2, #0
        return ERROR;
 800a6c0:	2001      	movs	r0, #1
        LCD_Lock = DISABLE;
 800a6c2:	701a      	strb	r2, [r3, #0]
    LCD_ScrollBackStep++;
    LCD_LOG_UpdateDisplay();
    LCD_Lock = DISABLE;
  }
  return SUCCESS;
}
 800a6c4:	bd10      	pop	{r4, pc}
    LCD_ScrollActive = ENABLE;
 800a6c6:	2401      	movs	r4, #1
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a6c8:	428b      	cmp	r3, r1
    LCD_ScrollActive = ENABLE;
 800a6ca:	7004      	strb	r4, [r0, #0]
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a6cc:	d905      	bls.n	800a6da <LCD_LOG_ScrollBack+0x42>
       (LCD_Scrolled == DISABLE ))
 800a6ce:	491d      	ldr	r1, [pc, #116]	; (800a744 <LCD_LOG_ScrollBack+0xac>)
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a6d0:	7808      	ldrb	r0, [r1, #0]
 800a6d2:	b910      	cbnz	r0, 800a6da <LCD_LOG_ScrollBack+0x42>
      LCD_CacheBuffer_yptr_bottom--;
 800a6d4:	3b01      	subs	r3, #1
      LCD_Scrolled = ENABLE;
 800a6d6:	700c      	strb	r4, [r1, #0]
      LCD_CacheBuffer_yptr_bottom--;
 800a6d8:	8013      	strh	r3, [r2, #0]
    LCD_Lock = ENABLE;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4c18      	ldr	r4, [pc, #96]	; (800a740 <LCD_LOG_ScrollBack+0xa8>)
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a6de:	4914      	ldr	r1, [pc, #80]	; (800a730 <LCD_LOG_ScrollBack+0x98>)
 800a6e0:	4a16      	ldr	r2, [pc, #88]	; (800a73c <LCD_LOG_ScrollBack+0xa4>)
    LCD_Lock = ENABLE;
 800a6e2:	7023      	strb	r3, [r4, #0]
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a6e4:	8812      	ldrh	r2, [r2, #0]
 800a6e6:	880b      	ldrh	r3, [r1, #0]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d810      	bhi.n	800a70e <LCD_LOG_ScrollBack+0x76>
      if((LCD_CACHE_DEPTH  - LCD_CacheBuffer_yptr_top + LCD_CacheBuffer_yptr_bottom) < YWINDOW_SIZE)
 800a6ec:	f1c2 0275 	rsb	r2, r2, #117	; 0x75
 800a6f0:	441a      	add	r2, r3
 800a6f2:	2a10      	cmp	r2, #16
 800a6f4:	dde2      	ble.n	800a6bc <LCD_LOG_ScrollBack+0x24>
      LCD_CacheBuffer_yptr_bottom --;
 800a6f6:	3b01      	subs	r3, #1
      if(LCD_CacheBuffer_yptr_bottom == 0xFFFF)
 800a6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
      LCD_CacheBuffer_yptr_bottom --;
 800a6fc:	b29b      	uxth	r3, r3
      if(LCD_CacheBuffer_yptr_bottom == 0xFFFF)
 800a6fe:	4293      	cmp	r3, r2
        LCD_CacheBuffer_yptr_bottom = LCD_CACHE_DEPTH - 2;
 800a700:	bf08      	it	eq
 800a702:	2373      	moveq	r3, #115	; 0x73
 800a704:	e007      	b.n	800a716 <LCD_LOG_ScrollBack+0x7e>
  if(LCD_ScrollActive == ENABLE)
 800a706:	2a01      	cmp	r2, #1
 800a708:	d0e7      	beq.n	800a6da <LCD_LOG_ScrollBack+0x42>
  return SUCCESS;
 800a70a:	2000      	movs	r0, #0
 800a70c:	e7da      	b.n	800a6c4 <LCD_LOG_ScrollBack+0x2c>
      if((LCD_CacheBuffer_yptr_bottom  - LCD_CacheBuffer_yptr_top) <  YWINDOW_SIZE )
 800a70e:	1a9a      	subs	r2, r3, r2
 800a710:	2a10      	cmp	r2, #16
 800a712:	ddd3      	ble.n	800a6bc <LCD_LOG_ScrollBack+0x24>
      LCD_CacheBuffer_yptr_bottom --;
 800a714:	3b01      	subs	r3, #1
    LCD_ScrollBackStep++;
 800a716:	4a0c      	ldr	r2, [pc, #48]	; (800a748 <LCD_LOG_ScrollBack+0xb0>)
        LCD_CacheBuffer_yptr_bottom = LCD_CACHE_DEPTH - 2;
 800a718:	800b      	strh	r3, [r1, #0]
    LCD_ScrollBackStep++;
 800a71a:	8813      	ldrh	r3, [r2, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	8013      	strh	r3, [r2, #0]
    LCD_LOG_UpdateDisplay();
 800a720:	f7ff fee0 	bl	800a4e4 <LCD_LOG_UpdateDisplay>
    LCD_Lock = DISABLE;
 800a724:	2000      	movs	r0, #0
 800a726:	7020      	strb	r0, [r4, #0]
 800a728:	e7cc      	b.n	800a6c4 <LCD_LOG_ScrollBack+0x2c>
 800a72a:	bf00      	nop
 800a72c:	2002446a 	.word	0x2002446a
 800a730:	20024460 	.word	0x20024460
 800a734:	2002445c 	.word	0x2002445c
 800a738:	2002445e 	.word	0x2002445e
 800a73c:	20024468 	.word	0x20024468
 800a740:	20024465 	.word	0x20024465
 800a744:	20024466 	.word	0x20024466
 800a748:	200280c4 	.word	0x200280c4

0800a74c <LCD_LOG_ScrollForward>:
  * @brief  Display next text frame
  * @param  None
  * @retval Status
  */
ErrorStatus LCD_LOG_ScrollForward(void)
{
 800a74c:	b570      	push	{r4, r5, r6, lr}
  
  if(LCD_ScrollBackStep != 0)
 800a74e:	4d1c      	ldr	r5, [pc, #112]	; (800a7c0 <LCD_LOG_ScrollForward+0x74>)
 800a750:	882e      	ldrh	r6, [r5, #0]
 800a752:	b17e      	cbz	r6, 800a774 <LCD_LOG_ScrollForward+0x28>
  {
    if(LCD_ScrollActive == DISABLE)
 800a754:	481b      	ldr	r0, [pc, #108]	; (800a7c4 <LCD_LOG_ScrollForward+0x78>)
 800a756:	7801      	ldrb	r1, [r0, #0]
 800a758:	bb69      	cbnz	r1, 800a7b6 <LCD_LOG_ScrollForward+0x6a>
    {
      
      LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a75a:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <LCD_LOG_ScrollForward+0x7c>)
 800a75c:	491b      	ldr	r1, [pc, #108]	; (800a7cc <LCD_LOG_ScrollForward+0x80>)
 800a75e:	8813      	ldrh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a760:	4c1b      	ldr	r4, [pc, #108]	; (800a7d0 <LCD_LOG_ScrollForward+0x84>)
      LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a762:	800b      	strh	r3, [r1, #0]
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a764:	491b      	ldr	r1, [pc, #108]	; (800a7d4 <LCD_LOG_ScrollForward+0x88>)
 800a766:	8809      	ldrh	r1, [r1, #0]
      
      if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a768:	428b      	cmp	r3, r1
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a76a:	8021      	strh	r1, [r4, #0]
      if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a76c:	d907      	bls.n	800a77e <LCD_LOG_ScrollForward+0x32>
      {
        
        if ((LCD_CacheBuffer_yptr_bottom - LCD_CacheBuffer_yptr_top) <=  YWINDOW_SIZE)
 800a76e:	1a5c      	subs	r4, r3, r1
 800a770:	2c11      	cmp	r4, #17
 800a772:	dc04      	bgt.n	800a77e <LCD_LOG_ScrollForward+0x32>
        {
          LCD_Lock = DISABLE;
 800a774:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <LCD_LOG_ScrollForward+0x8c>)
 800a776:	2200      	movs	r2, #0
          return ERROR;
 800a778:	2001      	movs	r0, #1
          LCD_Lock = DISABLE;
 800a77a:	701a      	strb	r2, [r3, #0]
  else // LCD_ScrollBackStep == 0 
  {
    LCD_Lock = DISABLE;
    return ERROR;
  }  
}
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
      LCD_ScrollActive = ENABLE;
 800a77e:	2401      	movs	r4, #1
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a780:	428b      	cmp	r3, r1
      LCD_ScrollActive = ENABLE;
 800a782:	7004      	strb	r4, [r0, #0]
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a784:	d905      	bls.n	800a792 <LCD_LOG_ScrollForward+0x46>
         (LCD_Scrolled == DISABLE ))
 800a786:	4915      	ldr	r1, [pc, #84]	; (800a7dc <LCD_LOG_ScrollForward+0x90>)
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a788:	7808      	ldrb	r0, [r1, #0]
 800a78a:	b910      	cbnz	r0, 800a792 <LCD_LOG_ScrollForward+0x46>
        LCD_CacheBuffer_yptr_bottom--;
 800a78c:	3b01      	subs	r3, #1
        LCD_Scrolled = ENABLE;
 800a78e:	700c      	strb	r4, [r1, #0]
        LCD_CacheBuffer_yptr_bottom--;
 800a790:	8013      	strh	r3, [r2, #0]
      LCD_Lock = ENABLE;
 800a792:	2301      	movs	r3, #1
 800a794:	4c10      	ldr	r4, [pc, #64]	; (800a7d8 <LCD_LOG_ScrollForward+0x8c>)
      if(++LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH)
 800a796:	490c      	ldr	r1, [pc, #48]	; (800a7c8 <LCD_LOG_ScrollForward+0x7c>)
      LCD_Lock = ENABLE;
 800a798:	7023      	strb	r3, [r4, #0]
      LCD_ScrollBackStep--;
 800a79a:	1e73      	subs	r3, r6, #1
 800a79c:	802b      	strh	r3, [r5, #0]
      if(++LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH)
 800a79e:	880b      	ldrh	r3, [r1, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	2b75      	cmp	r3, #117	; 0x75
 800a7a6:	d100      	bne.n	800a7aa <LCD_LOG_ScrollForward+0x5e>
        LCD_CacheBuffer_yptr_bottom = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	800b      	strh	r3, [r1, #0]
      LCD_LOG_UpdateDisplay();
 800a7ac:	f7ff fe9a 	bl	800a4e4 <LCD_LOG_UpdateDisplay>
      LCD_Lock = DISABLE;
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	7020      	strb	r0, [r4, #0]
 800a7b4:	e7e2      	b.n	800a77c <LCD_LOG_ScrollForward+0x30>
    if(LCD_ScrollActive == ENABLE)
 800a7b6:	2901      	cmp	r1, #1
 800a7b8:	d0eb      	beq.n	800a792 <LCD_LOG_ScrollForward+0x46>
    return SUCCESS;
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e7de      	b.n	800a77c <LCD_LOG_ScrollForward+0x30>
 800a7be:	bf00      	nop
 800a7c0:	200280c4 	.word	0x200280c4
 800a7c4:	2002446a 	.word	0x2002446a
 800a7c8:	20024460 	.word	0x20024460
 800a7cc:	2002445c 	.word	0x2002445c
 800a7d0:	2002445e 	.word	0x2002445e
 800a7d4:	20024468 	.word	0x20024468
 800a7d8:	20024465 	.word	0x20024465
 800a7dc:	20024466 	.word	0x20024466

0800a7e0 <__errno>:
 800a7e0:	4b01      	ldr	r3, [pc, #4]	; (800a7e8 <__errno+0x8>)
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000588 	.word	0x20000588

0800a7ec <__libc_init_array>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	4d0d      	ldr	r5, [pc, #52]	; (800a824 <__libc_init_array+0x38>)
 800a7f0:	4c0d      	ldr	r4, [pc, #52]	; (800a828 <__libc_init_array+0x3c>)
 800a7f2:	1b64      	subs	r4, r4, r5
 800a7f4:	10a4      	asrs	r4, r4, #2
 800a7f6:	2600      	movs	r6, #0
 800a7f8:	42a6      	cmp	r6, r4
 800a7fa:	d109      	bne.n	800a810 <__libc_init_array+0x24>
 800a7fc:	4d0b      	ldr	r5, [pc, #44]	; (800a82c <__libc_init_array+0x40>)
 800a7fe:	4c0c      	ldr	r4, [pc, #48]	; (800a830 <__libc_init_array+0x44>)
 800a800:	f001 f9e0 	bl	800bbc4 <_init>
 800a804:	1b64      	subs	r4, r4, r5
 800a806:	10a4      	asrs	r4, r4, #2
 800a808:	2600      	movs	r6, #0
 800a80a:	42a6      	cmp	r6, r4
 800a80c:	d105      	bne.n	800a81a <__libc_init_array+0x2e>
 800a80e:	bd70      	pop	{r4, r5, r6, pc}
 800a810:	f855 3b04 	ldr.w	r3, [r5], #4
 800a814:	4798      	blx	r3
 800a816:	3601      	adds	r6, #1
 800a818:	e7ee      	b.n	800a7f8 <__libc_init_array+0xc>
 800a81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81e:	4798      	blx	r3
 800a820:	3601      	adds	r6, #1
 800a822:	e7f2      	b.n	800a80a <__libc_init_array+0x1e>
 800a824:	08012974 	.word	0x08012974
 800a828:	08012974 	.word	0x08012974
 800a82c:	08012974 	.word	0x08012974
 800a830:	08012978 	.word	0x08012978

0800a834 <__itoa>:
 800a834:	1e93      	subs	r3, r2, #2
 800a836:	2b22      	cmp	r3, #34	; 0x22
 800a838:	b510      	push	{r4, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	d904      	bls.n	800a848 <__itoa+0x14>
 800a83e:	2300      	movs	r3, #0
 800a840:	700b      	strb	r3, [r1, #0]
 800a842:	461c      	mov	r4, r3
 800a844:	4620      	mov	r0, r4
 800a846:	bd10      	pop	{r4, pc}
 800a848:	2a0a      	cmp	r2, #10
 800a84a:	d109      	bne.n	800a860 <__itoa+0x2c>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	da07      	bge.n	800a860 <__itoa+0x2c>
 800a850:	232d      	movs	r3, #45	; 0x2d
 800a852:	700b      	strb	r3, [r1, #0]
 800a854:	4240      	negs	r0, r0
 800a856:	2101      	movs	r1, #1
 800a858:	4421      	add	r1, r4
 800a85a:	f000 f88f 	bl	800a97c <__utoa>
 800a85e:	e7f1      	b.n	800a844 <__itoa+0x10>
 800a860:	2100      	movs	r1, #0
 800a862:	e7f9      	b.n	800a858 <__itoa+0x24>

0800a864 <itoa>:
 800a864:	f7ff bfe6 	b.w	800a834 <__itoa>

0800a868 <memcpy>:
 800a868:	440a      	add	r2, r1
 800a86a:	4291      	cmp	r1, r2
 800a86c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a870:	d100      	bne.n	800a874 <memcpy+0xc>
 800a872:	4770      	bx	lr
 800a874:	b510      	push	{r4, lr}
 800a876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a87e:	4291      	cmp	r1, r2
 800a880:	d1f9      	bne.n	800a876 <memcpy+0xe>
 800a882:	bd10      	pop	{r4, pc}

0800a884 <memset>:
 800a884:	4402      	add	r2, r0
 800a886:	4603      	mov	r3, r0
 800a888:	4293      	cmp	r3, r2
 800a88a:	d100      	bne.n	800a88e <memset+0xa>
 800a88c:	4770      	bx	lr
 800a88e:	f803 1b01 	strb.w	r1, [r3], #1
 800a892:	e7f9      	b.n	800a888 <memset+0x4>

0800a894 <iprintf>:
 800a894:	b40f      	push	{r0, r1, r2, r3}
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <iprintf+0x2c>)
 800a898:	b513      	push	{r0, r1, r4, lr}
 800a89a:	681c      	ldr	r4, [r3, #0]
 800a89c:	b124      	cbz	r4, 800a8a8 <iprintf+0x14>
 800a89e:	69a3      	ldr	r3, [r4, #24]
 800a8a0:	b913      	cbnz	r3, 800a8a8 <iprintf+0x14>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f904 	bl	800aab0 <__sinit>
 800a8a8:	ab05      	add	r3, sp, #20
 800a8aa:	9a04      	ldr	r2, [sp, #16]
 800a8ac:	68a1      	ldr	r1, [r4, #8]
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fb7d 	bl	800afb0 <_vfiprintf_r>
 800a8b6:	b002      	add	sp, #8
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	b004      	add	sp, #16
 800a8be:	4770      	bx	lr
 800a8c0:	20000588 	.word	0x20000588

0800a8c4 <sniprintf>:
 800a8c4:	b40c      	push	{r2, r3}
 800a8c6:	b530      	push	{r4, r5, lr}
 800a8c8:	4b17      	ldr	r3, [pc, #92]	; (800a928 <sniprintf+0x64>)
 800a8ca:	1e0c      	subs	r4, r1, #0
 800a8cc:	681d      	ldr	r5, [r3, #0]
 800a8ce:	b09d      	sub	sp, #116	; 0x74
 800a8d0:	da08      	bge.n	800a8e4 <sniprintf+0x20>
 800a8d2:	238b      	movs	r3, #139	; 0x8b
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8da:	b01d      	add	sp, #116	; 0x74
 800a8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e0:	b002      	add	sp, #8
 800a8e2:	4770      	bx	lr
 800a8e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8ec:	bf14      	ite	ne
 800a8ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8f2:	4623      	moveq	r3, r4
 800a8f4:	9304      	str	r3, [sp, #16]
 800a8f6:	9307      	str	r3, [sp, #28]
 800a8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8fc:	9002      	str	r0, [sp, #8]
 800a8fe:	9006      	str	r0, [sp, #24]
 800a900:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a906:	ab21      	add	r3, sp, #132	; 0x84
 800a908:	a902      	add	r1, sp, #8
 800a90a:	4628      	mov	r0, r5
 800a90c:	9301      	str	r3, [sp, #4]
 800a90e:	f000 fa25 	bl	800ad5c <_svfiprintf_r>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	bfbc      	itt	lt
 800a916:	238b      	movlt	r3, #139	; 0x8b
 800a918:	602b      	strlt	r3, [r5, #0]
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	d0dd      	beq.n	800a8da <sniprintf+0x16>
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e7d9      	b.n	800a8da <sniprintf+0x16>
 800a926:	bf00      	nop
 800a928:	20000588 	.word	0x20000588

0800a92c <siprintf>:
 800a92c:	b40e      	push	{r1, r2, r3}
 800a92e:	b500      	push	{lr}
 800a930:	b09c      	sub	sp, #112	; 0x70
 800a932:	ab1d      	add	r3, sp, #116	; 0x74
 800a934:	9002      	str	r0, [sp, #8]
 800a936:	9006      	str	r0, [sp, #24]
 800a938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <siprintf+0x38>)
 800a93e:	9107      	str	r1, [sp, #28]
 800a940:	9104      	str	r1, [sp, #16]
 800a942:	4909      	ldr	r1, [pc, #36]	; (800a968 <siprintf+0x3c>)
 800a944:	f853 2b04 	ldr.w	r2, [r3], #4
 800a948:	9105      	str	r1, [sp, #20]
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	a902      	add	r1, sp, #8
 800a950:	f000 fa04 	bl	800ad5c <_svfiprintf_r>
 800a954:	9b02      	ldr	r3, [sp, #8]
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	b01c      	add	sp, #112	; 0x70
 800a95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a960:	b003      	add	sp, #12
 800a962:	4770      	bx	lr
 800a964:	20000588 	.word	0x20000588
 800a968:	ffff0208 	.word	0xffff0208

0800a96c <strcpy>:
 800a96c:	4603      	mov	r3, r0
 800a96e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a972:	f803 2b01 	strb.w	r2, [r3], #1
 800a976:	2a00      	cmp	r2, #0
 800a978:	d1f9      	bne.n	800a96e <strcpy+0x2>
 800a97a:	4770      	bx	lr

0800a97c <__utoa>:
 800a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97e:	4c1f      	ldr	r4, [pc, #124]	; (800a9fc <__utoa+0x80>)
 800a980:	b08b      	sub	sp, #44	; 0x2c
 800a982:	4605      	mov	r5, r0
 800a984:	460b      	mov	r3, r1
 800a986:	466e      	mov	r6, sp
 800a988:	f104 0c20 	add.w	ip, r4, #32
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	6861      	ldr	r1, [r4, #4]
 800a990:	4637      	mov	r7, r6
 800a992:	c703      	stmia	r7!, {r0, r1}
 800a994:	3408      	adds	r4, #8
 800a996:	4564      	cmp	r4, ip
 800a998:	463e      	mov	r6, r7
 800a99a:	d1f7      	bne.n	800a98c <__utoa+0x10>
 800a99c:	7921      	ldrb	r1, [r4, #4]
 800a99e:	7139      	strb	r1, [r7, #4]
 800a9a0:	1e91      	subs	r1, r2, #2
 800a9a2:	6820      	ldr	r0, [r4, #0]
 800a9a4:	6038      	str	r0, [r7, #0]
 800a9a6:	2922      	cmp	r1, #34	; 0x22
 800a9a8:	f04f 0100 	mov.w	r1, #0
 800a9ac:	d904      	bls.n	800a9b8 <__utoa+0x3c>
 800a9ae:	7019      	strb	r1, [r3, #0]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	b00b      	add	sp, #44	; 0x2c
 800a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b8:	1e58      	subs	r0, r3, #1
 800a9ba:	4684      	mov	ip, r0
 800a9bc:	fbb5 f7f2 	udiv	r7, r5, r2
 800a9c0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a9c4:	fb02 5617 	mls	r6, r2, r7, r5
 800a9c8:	4476      	add	r6, lr
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a9d0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a9d4:	462e      	mov	r6, r5
 800a9d6:	42b2      	cmp	r2, r6
 800a9d8:	f101 0101 	add.w	r1, r1, #1
 800a9dc:	463d      	mov	r5, r7
 800a9de:	d9ed      	bls.n	800a9bc <__utoa+0x40>
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	545a      	strb	r2, [r3, r1]
 800a9e4:	1919      	adds	r1, r3, r4
 800a9e6:	1aa5      	subs	r5, r4, r2
 800a9e8:	42aa      	cmp	r2, r5
 800a9ea:	dae2      	bge.n	800a9b2 <__utoa+0x36>
 800a9ec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a9f0:	780e      	ldrb	r6, [r1, #0]
 800a9f2:	7006      	strb	r6, [r0, #0]
 800a9f4:	3201      	adds	r2, #1
 800a9f6:	f801 5901 	strb.w	r5, [r1], #-1
 800a9fa:	e7f4      	b.n	800a9e6 <__utoa+0x6a>
 800a9fc:	080128b0 	.word	0x080128b0

0800aa00 <std>:
 800aa00:	2300      	movs	r3, #0
 800aa02:	b510      	push	{r4, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	e9c0 3300 	strd	r3, r3, [r0]
 800aa0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa0e:	6083      	str	r3, [r0, #8]
 800aa10:	8181      	strh	r1, [r0, #12]
 800aa12:	6643      	str	r3, [r0, #100]	; 0x64
 800aa14:	81c2      	strh	r2, [r0, #14]
 800aa16:	6183      	str	r3, [r0, #24]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	305c      	adds	r0, #92	; 0x5c
 800aa1e:	f7ff ff31 	bl	800a884 <memset>
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <std+0x38>)
 800aa24:	6263      	str	r3, [r4, #36]	; 0x24
 800aa26:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <std+0x3c>)
 800aa28:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <std+0x40>)
 800aa2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <std+0x44>)
 800aa30:	6224      	str	r4, [r4, #32]
 800aa32:	6323      	str	r3, [r4, #48]	; 0x30
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	0800b559 	.word	0x0800b559
 800aa3c:	0800b57b 	.word	0x0800b57b
 800aa40:	0800b5b3 	.word	0x0800b5b3
 800aa44:	0800b5d7 	.word	0x0800b5d7

0800aa48 <_cleanup_r>:
 800aa48:	4901      	ldr	r1, [pc, #4]	; (800aa50 <_cleanup_r+0x8>)
 800aa4a:	f000 b8af 	b.w	800abac <_fwalk_reent>
 800aa4e:	bf00      	nop
 800aa50:	0800b8b1 	.word	0x0800b8b1

0800aa54 <__sfmoreglue>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	1e4a      	subs	r2, r1, #1
 800aa58:	2568      	movs	r5, #104	; 0x68
 800aa5a:	4355      	muls	r5, r2
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa62:	f000 f8c5 	bl	800abf0 <_malloc_r>
 800aa66:	4604      	mov	r4, r0
 800aa68:	b140      	cbz	r0, 800aa7c <__sfmoreglue+0x28>
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa70:	300c      	adds	r0, #12
 800aa72:	60a0      	str	r0, [r4, #8]
 800aa74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa78:	f7ff ff04 	bl	800a884 <memset>
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <__sfp_lock_acquire>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__sfp_lock_acquire+0x8>)
 800aa82:	f000 b8b3 	b.w	800abec <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	200280ce 	.word	0x200280ce

0800aa8c <__sfp_lock_release>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__sfp_lock_release+0x8>)
 800aa8e:	f000 b8ae 	b.w	800abee <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	200280ce 	.word	0x200280ce

0800aa98 <__sinit_lock_acquire>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__sinit_lock_acquire+0x8>)
 800aa9a:	f000 b8a7 	b.w	800abec <__retarget_lock_acquire_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	200280c9 	.word	0x200280c9

0800aaa4 <__sinit_lock_release>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__sinit_lock_release+0x8>)
 800aaa6:	f000 b8a2 	b.w	800abee <__retarget_lock_release_recursive>
 800aaaa:	bf00      	nop
 800aaac:	200280c9 	.word	0x200280c9

0800aab0 <__sinit>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	4604      	mov	r4, r0
 800aab4:	f7ff fff0 	bl	800aa98 <__sinit_lock_acquire>
 800aab8:	69a3      	ldr	r3, [r4, #24]
 800aaba:	b11b      	cbz	r3, 800aac4 <__sinit+0x14>
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac0:	f7ff bff0 	b.w	800aaa4 <__sinit_lock_release>
 800aac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aac8:	6523      	str	r3, [r4, #80]	; 0x50
 800aaca:	4b13      	ldr	r3, [pc, #76]	; (800ab18 <__sinit+0x68>)
 800aacc:	4a13      	ldr	r2, [pc, #76]	; (800ab1c <__sinit+0x6c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	bf04      	itt	eq
 800aad6:	2301      	moveq	r3, #1
 800aad8:	61a3      	streq	r3, [r4, #24]
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f820 	bl	800ab20 <__sfp>
 800aae0:	6060      	str	r0, [r4, #4]
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 f81c 	bl	800ab20 <__sfp>
 800aae8:	60a0      	str	r0, [r4, #8]
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 f818 	bl	800ab20 <__sfp>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60e0      	str	r0, [r4, #12]
 800aaf4:	2104      	movs	r1, #4
 800aaf6:	6860      	ldr	r0, [r4, #4]
 800aaf8:	f7ff ff82 	bl	800aa00 <std>
 800aafc:	68a0      	ldr	r0, [r4, #8]
 800aafe:	2201      	movs	r2, #1
 800ab00:	2109      	movs	r1, #9
 800ab02:	f7ff ff7d 	bl	800aa00 <std>
 800ab06:	68e0      	ldr	r0, [r4, #12]
 800ab08:	2202      	movs	r2, #2
 800ab0a:	2112      	movs	r1, #18
 800ab0c:	f7ff ff78 	bl	800aa00 <std>
 800ab10:	2301      	movs	r3, #1
 800ab12:	61a3      	str	r3, [r4, #24]
 800ab14:	e7d2      	b.n	800aabc <__sinit+0xc>
 800ab16:	bf00      	nop
 800ab18:	080128ac 	.word	0x080128ac
 800ab1c:	0800aa49 	.word	0x0800aa49

0800ab20 <__sfp>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	4607      	mov	r7, r0
 800ab24:	f7ff ffac 	bl	800aa80 <__sfp_lock_acquire>
 800ab28:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <__sfp+0x84>)
 800ab2a:	681e      	ldr	r6, [r3, #0]
 800ab2c:	69b3      	ldr	r3, [r6, #24]
 800ab2e:	b913      	cbnz	r3, 800ab36 <__sfp+0x16>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff ffbd 	bl	800aab0 <__sinit>
 800ab36:	3648      	adds	r6, #72	; 0x48
 800ab38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	d503      	bpl.n	800ab48 <__sfp+0x28>
 800ab40:	6833      	ldr	r3, [r6, #0]
 800ab42:	b30b      	cbz	r3, 800ab88 <__sfp+0x68>
 800ab44:	6836      	ldr	r6, [r6, #0]
 800ab46:	e7f7      	b.n	800ab38 <__sfp+0x18>
 800ab48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab4c:	b9d5      	cbnz	r5, 800ab84 <__sfp+0x64>
 800ab4e:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <__sfp+0x88>)
 800ab50:	60e3      	str	r3, [r4, #12]
 800ab52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab56:	6665      	str	r5, [r4, #100]	; 0x64
 800ab58:	f000 f847 	bl	800abea <__retarget_lock_init_recursive>
 800ab5c:	f7ff ff96 	bl	800aa8c <__sfp_lock_release>
 800ab60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab68:	6025      	str	r5, [r4, #0]
 800ab6a:	61a5      	str	r5, [r4, #24]
 800ab6c:	2208      	movs	r2, #8
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab74:	f7ff fe86 	bl	800a884 <memset>
 800ab78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab80:	4620      	mov	r0, r4
 800ab82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab84:	3468      	adds	r4, #104	; 0x68
 800ab86:	e7d9      	b.n	800ab3c <__sfp+0x1c>
 800ab88:	2104      	movs	r1, #4
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f7ff ff62 	bl	800aa54 <__sfmoreglue>
 800ab90:	4604      	mov	r4, r0
 800ab92:	6030      	str	r0, [r6, #0]
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d1d5      	bne.n	800ab44 <__sfp+0x24>
 800ab98:	f7ff ff78 	bl	800aa8c <__sfp_lock_release>
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	e7ee      	b.n	800ab80 <__sfp+0x60>
 800aba2:	bf00      	nop
 800aba4:	080128ac 	.word	0x080128ac
 800aba8:	ffff0001 	.word	0xffff0001

0800abac <_fwalk_reent>:
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	4606      	mov	r6, r0
 800abb2:	4688      	mov	r8, r1
 800abb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abb8:	2700      	movs	r7, #0
 800abba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abbe:	f1b9 0901 	subs.w	r9, r9, #1
 800abc2:	d505      	bpl.n	800abd0 <_fwalk_reent+0x24>
 800abc4:	6824      	ldr	r4, [r4, #0]
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d1f7      	bne.n	800abba <_fwalk_reent+0xe>
 800abca:	4638      	mov	r0, r7
 800abcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd0:	89ab      	ldrh	r3, [r5, #12]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d907      	bls.n	800abe6 <_fwalk_reent+0x3a>
 800abd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abda:	3301      	adds	r3, #1
 800abdc:	d003      	beq.n	800abe6 <_fwalk_reent+0x3a>
 800abde:	4629      	mov	r1, r5
 800abe0:	4630      	mov	r0, r6
 800abe2:	47c0      	blx	r8
 800abe4:	4307      	orrs	r7, r0
 800abe6:	3568      	adds	r5, #104	; 0x68
 800abe8:	e7e9      	b.n	800abbe <_fwalk_reent+0x12>

0800abea <__retarget_lock_init_recursive>:
 800abea:	4770      	bx	lr

0800abec <__retarget_lock_acquire_recursive>:
 800abec:	4770      	bx	lr

0800abee <__retarget_lock_release_recursive>:
 800abee:	4770      	bx	lr

0800abf0 <_malloc_r>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	1ccd      	adds	r5, r1, #3
 800abf4:	f025 0503 	bic.w	r5, r5, #3
 800abf8:	3508      	adds	r5, #8
 800abfa:	2d0c      	cmp	r5, #12
 800abfc:	bf38      	it	cc
 800abfe:	250c      	movcc	r5, #12
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	4606      	mov	r6, r0
 800ac04:	db01      	blt.n	800ac0a <_malloc_r+0x1a>
 800ac06:	42a9      	cmp	r1, r5
 800ac08:	d903      	bls.n	800ac12 <_malloc_r+0x22>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	6033      	str	r3, [r6, #0]
 800ac0e:	2000      	movs	r0, #0
 800ac10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac12:	f000 ff19 	bl	800ba48 <__malloc_lock>
 800ac16:	4921      	ldr	r1, [pc, #132]	; (800ac9c <_malloc_r+0xac>)
 800ac18:	680a      	ldr	r2, [r1, #0]
 800ac1a:	4614      	mov	r4, r2
 800ac1c:	b99c      	cbnz	r4, 800ac46 <_malloc_r+0x56>
 800ac1e:	4f20      	ldr	r7, [pc, #128]	; (800aca0 <_malloc_r+0xb0>)
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	b923      	cbnz	r3, 800ac2e <_malloc_r+0x3e>
 800ac24:	4621      	mov	r1, r4
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 fc86 	bl	800b538 <_sbrk_r>
 800ac2c:	6038      	str	r0, [r7, #0]
 800ac2e:	4629      	mov	r1, r5
 800ac30:	4630      	mov	r0, r6
 800ac32:	f000 fc81 	bl	800b538 <_sbrk_r>
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	d123      	bne.n	800ac82 <_malloc_r+0x92>
 800ac3a:	230c      	movs	r3, #12
 800ac3c:	6033      	str	r3, [r6, #0]
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f000 ff08 	bl	800ba54 <__malloc_unlock>
 800ac44:	e7e3      	b.n	800ac0e <_malloc_r+0x1e>
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	1b5b      	subs	r3, r3, r5
 800ac4a:	d417      	bmi.n	800ac7c <_malloc_r+0x8c>
 800ac4c:	2b0b      	cmp	r3, #11
 800ac4e:	d903      	bls.n	800ac58 <_malloc_r+0x68>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	441c      	add	r4, r3
 800ac54:	6025      	str	r5, [r4, #0]
 800ac56:	e004      	b.n	800ac62 <_malloc_r+0x72>
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	42a2      	cmp	r2, r4
 800ac5c:	bf0c      	ite	eq
 800ac5e:	600b      	streq	r3, [r1, #0]
 800ac60:	6053      	strne	r3, [r2, #4]
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 fef6 	bl	800ba54 <__malloc_unlock>
 800ac68:	f104 000b 	add.w	r0, r4, #11
 800ac6c:	1d23      	adds	r3, r4, #4
 800ac6e:	f020 0007 	bic.w	r0, r0, #7
 800ac72:	1ac2      	subs	r2, r0, r3
 800ac74:	d0cc      	beq.n	800ac10 <_malloc_r+0x20>
 800ac76:	1a1b      	subs	r3, r3, r0
 800ac78:	50a3      	str	r3, [r4, r2]
 800ac7a:	e7c9      	b.n	800ac10 <_malloc_r+0x20>
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	6864      	ldr	r4, [r4, #4]
 800ac80:	e7cc      	b.n	800ac1c <_malloc_r+0x2c>
 800ac82:	1cc4      	adds	r4, r0, #3
 800ac84:	f024 0403 	bic.w	r4, r4, #3
 800ac88:	42a0      	cmp	r0, r4
 800ac8a:	d0e3      	beq.n	800ac54 <_malloc_r+0x64>
 800ac8c:	1a21      	subs	r1, r4, r0
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f000 fc52 	bl	800b538 <_sbrk_r>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d1dd      	bne.n	800ac54 <_malloc_r+0x64>
 800ac98:	e7cf      	b.n	800ac3a <_malloc_r+0x4a>
 800ac9a:	bf00      	nop
 800ac9c:	200229cc 	.word	0x200229cc
 800aca0:	200229d0 	.word	0x200229d0

0800aca4 <__ssputs_r>:
 800aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	688e      	ldr	r6, [r1, #8]
 800acaa:	429e      	cmp	r6, r3
 800acac:	4682      	mov	sl, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	4690      	mov	r8, r2
 800acb2:	461f      	mov	r7, r3
 800acb4:	d838      	bhi.n	800ad28 <__ssputs_r+0x84>
 800acb6:	898a      	ldrh	r2, [r1, #12]
 800acb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acbc:	d032      	beq.n	800ad24 <__ssputs_r+0x80>
 800acbe:	6825      	ldr	r5, [r4, #0]
 800acc0:	6909      	ldr	r1, [r1, #16]
 800acc2:	eba5 0901 	sub.w	r9, r5, r1
 800acc6:	6965      	ldr	r5, [r4, #20]
 800acc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800accc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acd0:	3301      	adds	r3, #1
 800acd2:	444b      	add	r3, r9
 800acd4:	106d      	asrs	r5, r5, #1
 800acd6:	429d      	cmp	r5, r3
 800acd8:	bf38      	it	cc
 800acda:	461d      	movcc	r5, r3
 800acdc:	0553      	lsls	r3, r2, #21
 800acde:	d531      	bpl.n	800ad44 <__ssputs_r+0xa0>
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7ff ff85 	bl	800abf0 <_malloc_r>
 800ace6:	4606      	mov	r6, r0
 800ace8:	b950      	cbnz	r0, 800ad00 <__ssputs_r+0x5c>
 800acea:	230c      	movs	r3, #12
 800acec:	f8ca 3000 	str.w	r3, [sl]
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad00:	6921      	ldr	r1, [r4, #16]
 800ad02:	464a      	mov	r2, r9
 800ad04:	f7ff fdb0 	bl	800a868 <memcpy>
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad12:	81a3      	strh	r3, [r4, #12]
 800ad14:	6126      	str	r6, [r4, #16]
 800ad16:	6165      	str	r5, [r4, #20]
 800ad18:	444e      	add	r6, r9
 800ad1a:	eba5 0509 	sub.w	r5, r5, r9
 800ad1e:	6026      	str	r6, [r4, #0]
 800ad20:	60a5      	str	r5, [r4, #8]
 800ad22:	463e      	mov	r6, r7
 800ad24:	42be      	cmp	r6, r7
 800ad26:	d900      	bls.n	800ad2a <__ssputs_r+0x86>
 800ad28:	463e      	mov	r6, r7
 800ad2a:	4632      	mov	r2, r6
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4641      	mov	r1, r8
 800ad30:	f000 fe70 	bl	800ba14 <memmove>
 800ad34:	68a3      	ldr	r3, [r4, #8]
 800ad36:	6822      	ldr	r2, [r4, #0]
 800ad38:	1b9b      	subs	r3, r3, r6
 800ad3a:	4432      	add	r2, r6
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6022      	str	r2, [r4, #0]
 800ad40:	2000      	movs	r0, #0
 800ad42:	e7db      	b.n	800acfc <__ssputs_r+0x58>
 800ad44:	462a      	mov	r2, r5
 800ad46:	f000 fedb 	bl	800bb00 <_realloc_r>
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d1e1      	bne.n	800ad14 <__ssputs_r+0x70>
 800ad50:	6921      	ldr	r1, [r4, #16]
 800ad52:	4650      	mov	r0, sl
 800ad54:	f000 fe84 	bl	800ba60 <_free_r>
 800ad58:	e7c7      	b.n	800acea <__ssputs_r+0x46>
	...

0800ad5c <_svfiprintf_r>:
 800ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad60:	4698      	mov	r8, r3
 800ad62:	898b      	ldrh	r3, [r1, #12]
 800ad64:	061b      	lsls	r3, r3, #24
 800ad66:	b09d      	sub	sp, #116	; 0x74
 800ad68:	4607      	mov	r7, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	d50e      	bpl.n	800ad8e <_svfiprintf_r+0x32>
 800ad70:	690b      	ldr	r3, [r1, #16]
 800ad72:	b963      	cbnz	r3, 800ad8e <_svfiprintf_r+0x32>
 800ad74:	2140      	movs	r1, #64	; 0x40
 800ad76:	f7ff ff3b 	bl	800abf0 <_malloc_r>
 800ad7a:	6028      	str	r0, [r5, #0]
 800ad7c:	6128      	str	r0, [r5, #16]
 800ad7e:	b920      	cbnz	r0, 800ad8a <_svfiprintf_r+0x2e>
 800ad80:	230c      	movs	r3, #12
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	e0d1      	b.n	800af2e <_svfiprintf_r+0x1d2>
 800ad8a:	2340      	movs	r3, #64	; 0x40
 800ad8c:	616b      	str	r3, [r5, #20]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9309      	str	r3, [sp, #36]	; 0x24
 800ad92:	2320      	movs	r3, #32
 800ad94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad9c:	2330      	movs	r3, #48	; 0x30
 800ad9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af48 <_svfiprintf_r+0x1ec>
 800ada2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada6:	f04f 0901 	mov.w	r9, #1
 800adaa:	4623      	mov	r3, r4
 800adac:	469a      	mov	sl, r3
 800adae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb2:	b10a      	cbz	r2, 800adb8 <_svfiprintf_r+0x5c>
 800adb4:	2a25      	cmp	r2, #37	; 0x25
 800adb6:	d1f9      	bne.n	800adac <_svfiprintf_r+0x50>
 800adb8:	ebba 0b04 	subs.w	fp, sl, r4
 800adbc:	d00b      	beq.n	800add6 <_svfiprintf_r+0x7a>
 800adbe:	465b      	mov	r3, fp
 800adc0:	4622      	mov	r2, r4
 800adc2:	4629      	mov	r1, r5
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7ff ff6d 	bl	800aca4 <__ssputs_r>
 800adca:	3001      	adds	r0, #1
 800adcc:	f000 80aa 	beq.w	800af24 <_svfiprintf_r+0x1c8>
 800add0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add2:	445a      	add	r2, fp
 800add4:	9209      	str	r2, [sp, #36]	; 0x24
 800add6:	f89a 3000 	ldrb.w	r3, [sl]
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 80a2 	beq.w	800af24 <_svfiprintf_r+0x1c8>
 800ade0:	2300      	movs	r3, #0
 800ade2:	f04f 32ff 	mov.w	r2, #4294967295
 800ade6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adea:	f10a 0a01 	add.w	sl, sl, #1
 800adee:	9304      	str	r3, [sp, #16]
 800adf0:	9307      	str	r3, [sp, #28]
 800adf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adf6:	931a      	str	r3, [sp, #104]	; 0x68
 800adf8:	4654      	mov	r4, sl
 800adfa:	2205      	movs	r2, #5
 800adfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae00:	4851      	ldr	r0, [pc, #324]	; (800af48 <_svfiprintf_r+0x1ec>)
 800ae02:	f7f5 fa05 	bl	8000210 <memchr>
 800ae06:	9a04      	ldr	r2, [sp, #16]
 800ae08:	b9d8      	cbnz	r0, 800ae42 <_svfiprintf_r+0xe6>
 800ae0a:	06d0      	lsls	r0, r2, #27
 800ae0c:	bf44      	itt	mi
 800ae0e:	2320      	movmi	r3, #32
 800ae10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae14:	0711      	lsls	r1, r2, #28
 800ae16:	bf44      	itt	mi
 800ae18:	232b      	movmi	r3, #43	; 0x2b
 800ae1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae22:	2b2a      	cmp	r3, #42	; 0x2a
 800ae24:	d015      	beq.n	800ae52 <_svfiprintf_r+0xf6>
 800ae26:	9a07      	ldr	r2, [sp, #28]
 800ae28:	4654      	mov	r4, sl
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	f04f 0c0a 	mov.w	ip, #10
 800ae30:	4621      	mov	r1, r4
 800ae32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	2b09      	cmp	r3, #9
 800ae3a:	d94e      	bls.n	800aeda <_svfiprintf_r+0x17e>
 800ae3c:	b1b0      	cbz	r0, 800ae6c <_svfiprintf_r+0x110>
 800ae3e:	9207      	str	r2, [sp, #28]
 800ae40:	e014      	b.n	800ae6c <_svfiprintf_r+0x110>
 800ae42:	eba0 0308 	sub.w	r3, r0, r8
 800ae46:	fa09 f303 	lsl.w	r3, r9, r3
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	46a2      	mov	sl, r4
 800ae50:	e7d2      	b.n	800adf8 <_svfiprintf_r+0x9c>
 800ae52:	9b03      	ldr	r3, [sp, #12]
 800ae54:	1d19      	adds	r1, r3, #4
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	9103      	str	r1, [sp, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bfbb      	ittet	lt
 800ae5e:	425b      	neglt	r3, r3
 800ae60:	f042 0202 	orrlt.w	r2, r2, #2
 800ae64:	9307      	strge	r3, [sp, #28]
 800ae66:	9307      	strlt	r3, [sp, #28]
 800ae68:	bfb8      	it	lt
 800ae6a:	9204      	strlt	r2, [sp, #16]
 800ae6c:	7823      	ldrb	r3, [r4, #0]
 800ae6e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae70:	d10c      	bne.n	800ae8c <_svfiprintf_r+0x130>
 800ae72:	7863      	ldrb	r3, [r4, #1]
 800ae74:	2b2a      	cmp	r3, #42	; 0x2a
 800ae76:	d135      	bne.n	800aee4 <_svfiprintf_r+0x188>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	1d1a      	adds	r2, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9203      	str	r2, [sp, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfb8      	it	lt
 800ae84:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae88:	3402      	adds	r4, #2
 800ae8a:	9305      	str	r3, [sp, #20]
 800ae8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af58 <_svfiprintf_r+0x1fc>
 800ae90:	7821      	ldrb	r1, [r4, #0]
 800ae92:	2203      	movs	r2, #3
 800ae94:	4650      	mov	r0, sl
 800ae96:	f7f5 f9bb 	bl	8000210 <memchr>
 800ae9a:	b140      	cbz	r0, 800aeae <_svfiprintf_r+0x152>
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	eba0 000a 	sub.w	r0, r0, sl
 800aea2:	fa03 f000 	lsl.w	r0, r3, r0
 800aea6:	9b04      	ldr	r3, [sp, #16]
 800aea8:	4303      	orrs	r3, r0
 800aeaa:	3401      	adds	r4, #1
 800aeac:	9304      	str	r3, [sp, #16]
 800aeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb2:	4826      	ldr	r0, [pc, #152]	; (800af4c <_svfiprintf_r+0x1f0>)
 800aeb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeb8:	2206      	movs	r2, #6
 800aeba:	f7f5 f9a9 	bl	8000210 <memchr>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d038      	beq.n	800af34 <_svfiprintf_r+0x1d8>
 800aec2:	4b23      	ldr	r3, [pc, #140]	; (800af50 <_svfiprintf_r+0x1f4>)
 800aec4:	bb1b      	cbnz	r3, 800af0e <_svfiprintf_r+0x1b2>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	3307      	adds	r3, #7
 800aeca:	f023 0307 	bic.w	r3, r3, #7
 800aece:	3308      	adds	r3, #8
 800aed0:	9303      	str	r3, [sp, #12]
 800aed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed4:	4433      	add	r3, r6
 800aed6:	9309      	str	r3, [sp, #36]	; 0x24
 800aed8:	e767      	b.n	800adaa <_svfiprintf_r+0x4e>
 800aeda:	fb0c 3202 	mla	r2, ip, r2, r3
 800aede:	460c      	mov	r4, r1
 800aee0:	2001      	movs	r0, #1
 800aee2:	e7a5      	b.n	800ae30 <_svfiprintf_r+0xd4>
 800aee4:	2300      	movs	r3, #0
 800aee6:	3401      	adds	r4, #1
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	4619      	mov	r1, r3
 800aeec:	f04f 0c0a 	mov.w	ip, #10
 800aef0:	4620      	mov	r0, r4
 800aef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef6:	3a30      	subs	r2, #48	; 0x30
 800aef8:	2a09      	cmp	r2, #9
 800aefa:	d903      	bls.n	800af04 <_svfiprintf_r+0x1a8>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0c5      	beq.n	800ae8c <_svfiprintf_r+0x130>
 800af00:	9105      	str	r1, [sp, #20]
 800af02:	e7c3      	b.n	800ae8c <_svfiprintf_r+0x130>
 800af04:	fb0c 2101 	mla	r1, ip, r1, r2
 800af08:	4604      	mov	r4, r0
 800af0a:	2301      	movs	r3, #1
 800af0c:	e7f0      	b.n	800aef0 <_svfiprintf_r+0x194>
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	462a      	mov	r2, r5
 800af14:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <_svfiprintf_r+0x1f8>)
 800af16:	a904      	add	r1, sp, #16
 800af18:	4638      	mov	r0, r7
 800af1a:	f3af 8000 	nop.w
 800af1e:	1c42      	adds	r2, r0, #1
 800af20:	4606      	mov	r6, r0
 800af22:	d1d6      	bne.n	800aed2 <_svfiprintf_r+0x176>
 800af24:	89ab      	ldrh	r3, [r5, #12]
 800af26:	065b      	lsls	r3, r3, #25
 800af28:	f53f af2c 	bmi.w	800ad84 <_svfiprintf_r+0x28>
 800af2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af2e:	b01d      	add	sp, #116	; 0x74
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	ab03      	add	r3, sp, #12
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	462a      	mov	r2, r5
 800af3a:	4b06      	ldr	r3, [pc, #24]	; (800af54 <_svfiprintf_r+0x1f8>)
 800af3c:	a904      	add	r1, sp, #16
 800af3e:	4638      	mov	r0, r7
 800af40:	f000 f9d4 	bl	800b2ec <_printf_i>
 800af44:	e7eb      	b.n	800af1e <_svfiprintf_r+0x1c2>
 800af46:	bf00      	nop
 800af48:	08012938 	.word	0x08012938
 800af4c:	08012942 	.word	0x08012942
 800af50:	00000000 	.word	0x00000000
 800af54:	0800aca5 	.word	0x0800aca5
 800af58:	0801293e 	.word	0x0801293e

0800af5c <__sfputc_r>:
 800af5c:	6893      	ldr	r3, [r2, #8]
 800af5e:	3b01      	subs	r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	b410      	push	{r4}
 800af64:	6093      	str	r3, [r2, #8]
 800af66:	da08      	bge.n	800af7a <__sfputc_r+0x1e>
 800af68:	6994      	ldr	r4, [r2, #24]
 800af6a:	42a3      	cmp	r3, r4
 800af6c:	db01      	blt.n	800af72 <__sfputc_r+0x16>
 800af6e:	290a      	cmp	r1, #10
 800af70:	d103      	bne.n	800af7a <__sfputc_r+0x1e>
 800af72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af76:	f000 bb33 	b.w	800b5e0 <__swbuf_r>
 800af7a:	6813      	ldr	r3, [r2, #0]
 800af7c:	1c58      	adds	r0, r3, #1
 800af7e:	6010      	str	r0, [r2, #0]
 800af80:	7019      	strb	r1, [r3, #0]
 800af82:	4608      	mov	r0, r1
 800af84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <__sfputs_r>:
 800af8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8c:	4606      	mov	r6, r0
 800af8e:	460f      	mov	r7, r1
 800af90:	4614      	mov	r4, r2
 800af92:	18d5      	adds	r5, r2, r3
 800af94:	42ac      	cmp	r4, r5
 800af96:	d101      	bne.n	800af9c <__sfputs_r+0x12>
 800af98:	2000      	movs	r0, #0
 800af9a:	e007      	b.n	800afac <__sfputs_r+0x22>
 800af9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa0:	463a      	mov	r2, r7
 800afa2:	4630      	mov	r0, r6
 800afa4:	f7ff ffda 	bl	800af5c <__sfputc_r>
 800afa8:	1c43      	adds	r3, r0, #1
 800afaa:	d1f3      	bne.n	800af94 <__sfputs_r+0xa>
 800afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afb0 <_vfiprintf_r>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	460d      	mov	r5, r1
 800afb6:	b09d      	sub	sp, #116	; 0x74
 800afb8:	4614      	mov	r4, r2
 800afba:	4698      	mov	r8, r3
 800afbc:	4606      	mov	r6, r0
 800afbe:	b118      	cbz	r0, 800afc8 <_vfiprintf_r+0x18>
 800afc0:	6983      	ldr	r3, [r0, #24]
 800afc2:	b90b      	cbnz	r3, 800afc8 <_vfiprintf_r+0x18>
 800afc4:	f7ff fd74 	bl	800aab0 <__sinit>
 800afc8:	4b89      	ldr	r3, [pc, #548]	; (800b1f0 <_vfiprintf_r+0x240>)
 800afca:	429d      	cmp	r5, r3
 800afcc:	d11b      	bne.n	800b006 <_vfiprintf_r+0x56>
 800afce:	6875      	ldr	r5, [r6, #4]
 800afd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afd2:	07d9      	lsls	r1, r3, #31
 800afd4:	d405      	bmi.n	800afe2 <_vfiprintf_r+0x32>
 800afd6:	89ab      	ldrh	r3, [r5, #12]
 800afd8:	059a      	lsls	r2, r3, #22
 800afda:	d402      	bmi.n	800afe2 <_vfiprintf_r+0x32>
 800afdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afde:	f7ff fe05 	bl	800abec <__retarget_lock_acquire_recursive>
 800afe2:	89ab      	ldrh	r3, [r5, #12]
 800afe4:	071b      	lsls	r3, r3, #28
 800afe6:	d501      	bpl.n	800afec <_vfiprintf_r+0x3c>
 800afe8:	692b      	ldr	r3, [r5, #16]
 800afea:	b9eb      	cbnz	r3, 800b028 <_vfiprintf_r+0x78>
 800afec:	4629      	mov	r1, r5
 800afee:	4630      	mov	r0, r6
 800aff0:	f000 fb5a 	bl	800b6a8 <__swsetup_r>
 800aff4:	b1c0      	cbz	r0, 800b028 <_vfiprintf_r+0x78>
 800aff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aff8:	07dc      	lsls	r4, r3, #31
 800affa:	d50e      	bpl.n	800b01a <_vfiprintf_r+0x6a>
 800affc:	f04f 30ff 	mov.w	r0, #4294967295
 800b000:	b01d      	add	sp, #116	; 0x74
 800b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b006:	4b7b      	ldr	r3, [pc, #492]	; (800b1f4 <_vfiprintf_r+0x244>)
 800b008:	429d      	cmp	r5, r3
 800b00a:	d101      	bne.n	800b010 <_vfiprintf_r+0x60>
 800b00c:	68b5      	ldr	r5, [r6, #8]
 800b00e:	e7df      	b.n	800afd0 <_vfiprintf_r+0x20>
 800b010:	4b79      	ldr	r3, [pc, #484]	; (800b1f8 <_vfiprintf_r+0x248>)
 800b012:	429d      	cmp	r5, r3
 800b014:	bf08      	it	eq
 800b016:	68f5      	ldreq	r5, [r6, #12]
 800b018:	e7da      	b.n	800afd0 <_vfiprintf_r+0x20>
 800b01a:	89ab      	ldrh	r3, [r5, #12]
 800b01c:	0598      	lsls	r0, r3, #22
 800b01e:	d4ed      	bmi.n	800affc <_vfiprintf_r+0x4c>
 800b020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b022:	f7ff fde4 	bl	800abee <__retarget_lock_release_recursive>
 800b026:	e7e9      	b.n	800affc <_vfiprintf_r+0x4c>
 800b028:	2300      	movs	r3, #0
 800b02a:	9309      	str	r3, [sp, #36]	; 0x24
 800b02c:	2320      	movs	r3, #32
 800b02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b032:	f8cd 800c 	str.w	r8, [sp, #12]
 800b036:	2330      	movs	r3, #48	; 0x30
 800b038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1fc <_vfiprintf_r+0x24c>
 800b03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b040:	f04f 0901 	mov.w	r9, #1
 800b044:	4623      	mov	r3, r4
 800b046:	469a      	mov	sl, r3
 800b048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b04c:	b10a      	cbz	r2, 800b052 <_vfiprintf_r+0xa2>
 800b04e:	2a25      	cmp	r2, #37	; 0x25
 800b050:	d1f9      	bne.n	800b046 <_vfiprintf_r+0x96>
 800b052:	ebba 0b04 	subs.w	fp, sl, r4
 800b056:	d00b      	beq.n	800b070 <_vfiprintf_r+0xc0>
 800b058:	465b      	mov	r3, fp
 800b05a:	4622      	mov	r2, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	4630      	mov	r0, r6
 800b060:	f7ff ff93 	bl	800af8a <__sfputs_r>
 800b064:	3001      	adds	r0, #1
 800b066:	f000 80aa 	beq.w	800b1be <_vfiprintf_r+0x20e>
 800b06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b06c:	445a      	add	r2, fp
 800b06e:	9209      	str	r2, [sp, #36]	; 0x24
 800b070:	f89a 3000 	ldrb.w	r3, [sl]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80a2 	beq.w	800b1be <_vfiprintf_r+0x20e>
 800b07a:	2300      	movs	r3, #0
 800b07c:	f04f 32ff 	mov.w	r2, #4294967295
 800b080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b084:	f10a 0a01 	add.w	sl, sl, #1
 800b088:	9304      	str	r3, [sp, #16]
 800b08a:	9307      	str	r3, [sp, #28]
 800b08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b090:	931a      	str	r3, [sp, #104]	; 0x68
 800b092:	4654      	mov	r4, sl
 800b094:	2205      	movs	r2, #5
 800b096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09a:	4858      	ldr	r0, [pc, #352]	; (800b1fc <_vfiprintf_r+0x24c>)
 800b09c:	f7f5 f8b8 	bl	8000210 <memchr>
 800b0a0:	9a04      	ldr	r2, [sp, #16]
 800b0a2:	b9d8      	cbnz	r0, 800b0dc <_vfiprintf_r+0x12c>
 800b0a4:	06d1      	lsls	r1, r2, #27
 800b0a6:	bf44      	itt	mi
 800b0a8:	2320      	movmi	r3, #32
 800b0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ae:	0713      	lsls	r3, r2, #28
 800b0b0:	bf44      	itt	mi
 800b0b2:	232b      	movmi	r3, #43	; 0x2b
 800b0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b0be:	d015      	beq.n	800b0ec <_vfiprintf_r+0x13c>
 800b0c0:	9a07      	ldr	r2, [sp, #28]
 800b0c2:	4654      	mov	r4, sl
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	f04f 0c0a 	mov.w	ip, #10
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0d0:	3b30      	subs	r3, #48	; 0x30
 800b0d2:	2b09      	cmp	r3, #9
 800b0d4:	d94e      	bls.n	800b174 <_vfiprintf_r+0x1c4>
 800b0d6:	b1b0      	cbz	r0, 800b106 <_vfiprintf_r+0x156>
 800b0d8:	9207      	str	r2, [sp, #28]
 800b0da:	e014      	b.n	800b106 <_vfiprintf_r+0x156>
 800b0dc:	eba0 0308 	sub.w	r3, r0, r8
 800b0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	9304      	str	r3, [sp, #16]
 800b0e8:	46a2      	mov	sl, r4
 800b0ea:	e7d2      	b.n	800b092 <_vfiprintf_r+0xe2>
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	1d19      	adds	r1, r3, #4
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	9103      	str	r1, [sp, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bfbb      	ittet	lt
 800b0f8:	425b      	neglt	r3, r3
 800b0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b0fe:	9307      	strge	r3, [sp, #28]
 800b100:	9307      	strlt	r3, [sp, #28]
 800b102:	bfb8      	it	lt
 800b104:	9204      	strlt	r2, [sp, #16]
 800b106:	7823      	ldrb	r3, [r4, #0]
 800b108:	2b2e      	cmp	r3, #46	; 0x2e
 800b10a:	d10c      	bne.n	800b126 <_vfiprintf_r+0x176>
 800b10c:	7863      	ldrb	r3, [r4, #1]
 800b10e:	2b2a      	cmp	r3, #42	; 0x2a
 800b110:	d135      	bne.n	800b17e <_vfiprintf_r+0x1ce>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	1d1a      	adds	r2, r3, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	9203      	str	r2, [sp, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bfb8      	it	lt
 800b11e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b122:	3402      	adds	r4, #2
 800b124:	9305      	str	r3, [sp, #20]
 800b126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b20c <_vfiprintf_r+0x25c>
 800b12a:	7821      	ldrb	r1, [r4, #0]
 800b12c:	2203      	movs	r2, #3
 800b12e:	4650      	mov	r0, sl
 800b130:	f7f5 f86e 	bl	8000210 <memchr>
 800b134:	b140      	cbz	r0, 800b148 <_vfiprintf_r+0x198>
 800b136:	2340      	movs	r3, #64	; 0x40
 800b138:	eba0 000a 	sub.w	r0, r0, sl
 800b13c:	fa03 f000 	lsl.w	r0, r3, r0
 800b140:	9b04      	ldr	r3, [sp, #16]
 800b142:	4303      	orrs	r3, r0
 800b144:	3401      	adds	r4, #1
 800b146:	9304      	str	r3, [sp, #16]
 800b148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14c:	482c      	ldr	r0, [pc, #176]	; (800b200 <_vfiprintf_r+0x250>)
 800b14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b152:	2206      	movs	r2, #6
 800b154:	f7f5 f85c 	bl	8000210 <memchr>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d03f      	beq.n	800b1dc <_vfiprintf_r+0x22c>
 800b15c:	4b29      	ldr	r3, [pc, #164]	; (800b204 <_vfiprintf_r+0x254>)
 800b15e:	bb1b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x1f8>
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	3307      	adds	r3, #7
 800b164:	f023 0307 	bic.w	r3, r3, #7
 800b168:	3308      	adds	r3, #8
 800b16a:	9303      	str	r3, [sp, #12]
 800b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16e:	443b      	add	r3, r7
 800b170:	9309      	str	r3, [sp, #36]	; 0x24
 800b172:	e767      	b.n	800b044 <_vfiprintf_r+0x94>
 800b174:	fb0c 3202 	mla	r2, ip, r2, r3
 800b178:	460c      	mov	r4, r1
 800b17a:	2001      	movs	r0, #1
 800b17c:	e7a5      	b.n	800b0ca <_vfiprintf_r+0x11a>
 800b17e:	2300      	movs	r3, #0
 800b180:	3401      	adds	r4, #1
 800b182:	9305      	str	r3, [sp, #20]
 800b184:	4619      	mov	r1, r3
 800b186:	f04f 0c0a 	mov.w	ip, #10
 800b18a:	4620      	mov	r0, r4
 800b18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b190:	3a30      	subs	r2, #48	; 0x30
 800b192:	2a09      	cmp	r2, #9
 800b194:	d903      	bls.n	800b19e <_vfiprintf_r+0x1ee>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0c5      	beq.n	800b126 <_vfiprintf_r+0x176>
 800b19a:	9105      	str	r1, [sp, #20]
 800b19c:	e7c3      	b.n	800b126 <_vfiprintf_r+0x176>
 800b19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e7f0      	b.n	800b18a <_vfiprintf_r+0x1da>
 800b1a8:	ab03      	add	r3, sp, #12
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	462a      	mov	r2, r5
 800b1ae:	4b16      	ldr	r3, [pc, #88]	; (800b208 <_vfiprintf_r+0x258>)
 800b1b0:	a904      	add	r1, sp, #16
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f3af 8000 	nop.w
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	1c78      	adds	r0, r7, #1
 800b1bc:	d1d6      	bne.n	800b16c <_vfiprintf_r+0x1bc>
 800b1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c0:	07d9      	lsls	r1, r3, #31
 800b1c2:	d405      	bmi.n	800b1d0 <_vfiprintf_r+0x220>
 800b1c4:	89ab      	ldrh	r3, [r5, #12]
 800b1c6:	059a      	lsls	r2, r3, #22
 800b1c8:	d402      	bmi.n	800b1d0 <_vfiprintf_r+0x220>
 800b1ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1cc:	f7ff fd0f 	bl	800abee <__retarget_lock_release_recursive>
 800b1d0:	89ab      	ldrh	r3, [r5, #12]
 800b1d2:	065b      	lsls	r3, r3, #25
 800b1d4:	f53f af12 	bmi.w	800affc <_vfiprintf_r+0x4c>
 800b1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1da:	e711      	b.n	800b000 <_vfiprintf_r+0x50>
 800b1dc:	ab03      	add	r3, sp, #12
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <_vfiprintf_r+0x258>)
 800b1e4:	a904      	add	r1, sp, #16
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f000 f880 	bl	800b2ec <_printf_i>
 800b1ec:	e7e4      	b.n	800b1b8 <_vfiprintf_r+0x208>
 800b1ee:	bf00      	nop
 800b1f0:	080128f8 	.word	0x080128f8
 800b1f4:	08012918 	.word	0x08012918
 800b1f8:	080128d8 	.word	0x080128d8
 800b1fc:	08012938 	.word	0x08012938
 800b200:	08012942 	.word	0x08012942
 800b204:	00000000 	.word	0x00000000
 800b208:	0800af8b 	.word	0x0800af8b
 800b20c:	0801293e 	.word	0x0801293e

0800b210 <_printf_common>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	4616      	mov	r6, r2
 800b216:	4699      	mov	r9, r3
 800b218:	688a      	ldr	r2, [r1, #8]
 800b21a:	690b      	ldr	r3, [r1, #16]
 800b21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b220:	4293      	cmp	r3, r2
 800b222:	bfb8      	it	lt
 800b224:	4613      	movlt	r3, r2
 800b226:	6033      	str	r3, [r6, #0]
 800b228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b22c:	4607      	mov	r7, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	b10a      	cbz	r2, 800b236 <_printf_common+0x26>
 800b232:	3301      	adds	r3, #1
 800b234:	6033      	str	r3, [r6, #0]
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	0699      	lsls	r1, r3, #26
 800b23a:	bf42      	ittt	mi
 800b23c:	6833      	ldrmi	r3, [r6, #0]
 800b23e:	3302      	addmi	r3, #2
 800b240:	6033      	strmi	r3, [r6, #0]
 800b242:	6825      	ldr	r5, [r4, #0]
 800b244:	f015 0506 	ands.w	r5, r5, #6
 800b248:	d106      	bne.n	800b258 <_printf_common+0x48>
 800b24a:	f104 0a19 	add.w	sl, r4, #25
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	6832      	ldr	r2, [r6, #0]
 800b252:	1a9b      	subs	r3, r3, r2
 800b254:	42ab      	cmp	r3, r5
 800b256:	dc26      	bgt.n	800b2a6 <_printf_common+0x96>
 800b258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b25c:	1e13      	subs	r3, r2, #0
 800b25e:	6822      	ldr	r2, [r4, #0]
 800b260:	bf18      	it	ne
 800b262:	2301      	movne	r3, #1
 800b264:	0692      	lsls	r2, r2, #26
 800b266:	d42b      	bmi.n	800b2c0 <_printf_common+0xb0>
 800b268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b26c:	4649      	mov	r1, r9
 800b26e:	4638      	mov	r0, r7
 800b270:	47c0      	blx	r8
 800b272:	3001      	adds	r0, #1
 800b274:	d01e      	beq.n	800b2b4 <_printf_common+0xa4>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	68e5      	ldr	r5, [r4, #12]
 800b27a:	6832      	ldr	r2, [r6, #0]
 800b27c:	f003 0306 	and.w	r3, r3, #6
 800b280:	2b04      	cmp	r3, #4
 800b282:	bf08      	it	eq
 800b284:	1aad      	subeq	r5, r5, r2
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	6922      	ldr	r2, [r4, #16]
 800b28a:	bf0c      	ite	eq
 800b28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b290:	2500      	movne	r5, #0
 800b292:	4293      	cmp	r3, r2
 800b294:	bfc4      	itt	gt
 800b296:	1a9b      	subgt	r3, r3, r2
 800b298:	18ed      	addgt	r5, r5, r3
 800b29a:	2600      	movs	r6, #0
 800b29c:	341a      	adds	r4, #26
 800b29e:	42b5      	cmp	r5, r6
 800b2a0:	d11a      	bne.n	800b2d8 <_printf_common+0xc8>
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e008      	b.n	800b2b8 <_printf_common+0xa8>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	47c0      	blx	r8
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d103      	bne.n	800b2bc <_printf_common+0xac>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2bc:	3501      	adds	r5, #1
 800b2be:	e7c6      	b.n	800b24e <_printf_common+0x3e>
 800b2c0:	18e1      	adds	r1, r4, r3
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	2030      	movs	r0, #48	; 0x30
 800b2c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2ca:	4422      	add	r2, r4
 800b2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	e7c7      	b.n	800b268 <_printf_common+0x58>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4622      	mov	r2, r4
 800b2dc:	4649      	mov	r1, r9
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c0      	blx	r8
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d0e6      	beq.n	800b2b4 <_printf_common+0xa4>
 800b2e6:	3601      	adds	r6, #1
 800b2e8:	e7d9      	b.n	800b29e <_printf_common+0x8e>
	...

0800b2ec <_printf_i>:
 800b2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	4691      	mov	r9, r2
 800b2f4:	7e27      	ldrb	r7, [r4, #24]
 800b2f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2f8:	2f78      	cmp	r7, #120	; 0x78
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	469a      	mov	sl, r3
 800b2fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b302:	d807      	bhi.n	800b314 <_printf_i+0x28>
 800b304:	2f62      	cmp	r7, #98	; 0x62
 800b306:	d80a      	bhi.n	800b31e <_printf_i+0x32>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	f000 80d8 	beq.w	800b4be <_printf_i+0x1d2>
 800b30e:	2f58      	cmp	r7, #88	; 0x58
 800b310:	f000 80a3 	beq.w	800b45a <_printf_i+0x16e>
 800b314:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b31c:	e03a      	b.n	800b394 <_printf_i+0xa8>
 800b31e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b322:	2b15      	cmp	r3, #21
 800b324:	d8f6      	bhi.n	800b314 <_printf_i+0x28>
 800b326:	a001      	add	r0, pc, #4	; (adr r0, 800b32c <_printf_i+0x40>)
 800b328:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b399 	.word	0x0800b399
 800b334:	0800b315 	.word	0x0800b315
 800b338:	0800b315 	.word	0x0800b315
 800b33c:	0800b315 	.word	0x0800b315
 800b340:	0800b315 	.word	0x0800b315
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b315 	.word	0x0800b315
 800b34c:	0800b315 	.word	0x0800b315
 800b350:	0800b315 	.word	0x0800b315
 800b354:	0800b315 	.word	0x0800b315
 800b358:	0800b4a5 	.word	0x0800b4a5
 800b35c:	0800b3c9 	.word	0x0800b3c9
 800b360:	0800b487 	.word	0x0800b487
 800b364:	0800b315 	.word	0x0800b315
 800b368:	0800b315 	.word	0x0800b315
 800b36c:	0800b4c7 	.word	0x0800b4c7
 800b370:	0800b315 	.word	0x0800b315
 800b374:	0800b3c9 	.word	0x0800b3c9
 800b378:	0800b315 	.word	0x0800b315
 800b37c:	0800b315 	.word	0x0800b315
 800b380:	0800b48f 	.word	0x0800b48f
 800b384:	680b      	ldr	r3, [r1, #0]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	600a      	str	r2, [r1, #0]
 800b38c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b394:	2301      	movs	r3, #1
 800b396:	e0a3      	b.n	800b4e0 <_printf_i+0x1f4>
 800b398:	6825      	ldr	r5, [r4, #0]
 800b39a:	6808      	ldr	r0, [r1, #0]
 800b39c:	062e      	lsls	r6, r5, #24
 800b39e:	f100 0304 	add.w	r3, r0, #4
 800b3a2:	d50a      	bpl.n	800b3ba <_printf_i+0xce>
 800b3a4:	6805      	ldr	r5, [r0, #0]
 800b3a6:	600b      	str	r3, [r1, #0]
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	da03      	bge.n	800b3b4 <_printf_i+0xc8>
 800b3ac:	232d      	movs	r3, #45	; 0x2d
 800b3ae:	426d      	negs	r5, r5
 800b3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3b4:	485e      	ldr	r0, [pc, #376]	; (800b530 <_printf_i+0x244>)
 800b3b6:	230a      	movs	r3, #10
 800b3b8:	e019      	b.n	800b3ee <_printf_i+0x102>
 800b3ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b3be:	6805      	ldr	r5, [r0, #0]
 800b3c0:	600b      	str	r3, [r1, #0]
 800b3c2:	bf18      	it	ne
 800b3c4:	b22d      	sxthne	r5, r5
 800b3c6:	e7ef      	b.n	800b3a8 <_printf_i+0xbc>
 800b3c8:	680b      	ldr	r3, [r1, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	1d18      	adds	r0, r3, #4
 800b3ce:	6008      	str	r0, [r1, #0]
 800b3d0:	0628      	lsls	r0, r5, #24
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_i+0xec>
 800b3d4:	681d      	ldr	r5, [r3, #0]
 800b3d6:	e002      	b.n	800b3de <_printf_i+0xf2>
 800b3d8:	0669      	lsls	r1, r5, #25
 800b3da:	d5fb      	bpl.n	800b3d4 <_printf_i+0xe8>
 800b3dc:	881d      	ldrh	r5, [r3, #0]
 800b3de:	4854      	ldr	r0, [pc, #336]	; (800b530 <_printf_i+0x244>)
 800b3e0:	2f6f      	cmp	r7, #111	; 0x6f
 800b3e2:	bf0c      	ite	eq
 800b3e4:	2308      	moveq	r3, #8
 800b3e6:	230a      	movne	r3, #10
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ee:	6866      	ldr	r6, [r4, #4]
 800b3f0:	60a6      	str	r6, [r4, #8]
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	bfa2      	ittt	ge
 800b3f6:	6821      	ldrge	r1, [r4, #0]
 800b3f8:	f021 0104 	bicge.w	r1, r1, #4
 800b3fc:	6021      	strge	r1, [r4, #0]
 800b3fe:	b90d      	cbnz	r5, 800b404 <_printf_i+0x118>
 800b400:	2e00      	cmp	r6, #0
 800b402:	d04d      	beq.n	800b4a0 <_printf_i+0x1b4>
 800b404:	4616      	mov	r6, r2
 800b406:	fbb5 f1f3 	udiv	r1, r5, r3
 800b40a:	fb03 5711 	mls	r7, r3, r1, r5
 800b40e:	5dc7      	ldrb	r7, [r0, r7]
 800b410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b414:	462f      	mov	r7, r5
 800b416:	42bb      	cmp	r3, r7
 800b418:	460d      	mov	r5, r1
 800b41a:	d9f4      	bls.n	800b406 <_printf_i+0x11a>
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	d10b      	bne.n	800b438 <_printf_i+0x14c>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	07df      	lsls	r7, r3, #31
 800b424:	d508      	bpl.n	800b438 <_printf_i+0x14c>
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	6861      	ldr	r1, [r4, #4]
 800b42a:	4299      	cmp	r1, r3
 800b42c:	bfde      	ittt	le
 800b42e:	2330      	movle	r3, #48	; 0x30
 800b430:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b434:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b438:	1b92      	subs	r2, r2, r6
 800b43a:	6122      	str	r2, [r4, #16]
 800b43c:	f8cd a000 	str.w	sl, [sp]
 800b440:	464b      	mov	r3, r9
 800b442:	aa03      	add	r2, sp, #12
 800b444:	4621      	mov	r1, r4
 800b446:	4640      	mov	r0, r8
 800b448:	f7ff fee2 	bl	800b210 <_printf_common>
 800b44c:	3001      	adds	r0, #1
 800b44e:	d14c      	bne.n	800b4ea <_printf_i+0x1fe>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	b004      	add	sp, #16
 800b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45a:	4835      	ldr	r0, [pc, #212]	; (800b530 <_printf_i+0x244>)
 800b45c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	680e      	ldr	r6, [r1, #0]
 800b464:	061f      	lsls	r7, r3, #24
 800b466:	f856 5b04 	ldr.w	r5, [r6], #4
 800b46a:	600e      	str	r6, [r1, #0]
 800b46c:	d514      	bpl.n	800b498 <_printf_i+0x1ac>
 800b46e:	07d9      	lsls	r1, r3, #31
 800b470:	bf44      	itt	mi
 800b472:	f043 0320 	orrmi.w	r3, r3, #32
 800b476:	6023      	strmi	r3, [r4, #0]
 800b478:	b91d      	cbnz	r5, 800b482 <_printf_i+0x196>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	f023 0320 	bic.w	r3, r3, #32
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	2310      	movs	r3, #16
 800b484:	e7b0      	b.n	800b3e8 <_printf_i+0xfc>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	f043 0320 	orr.w	r3, r3, #32
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	2378      	movs	r3, #120	; 0x78
 800b490:	4828      	ldr	r0, [pc, #160]	; (800b534 <_printf_i+0x248>)
 800b492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b496:	e7e3      	b.n	800b460 <_printf_i+0x174>
 800b498:	065e      	lsls	r6, r3, #25
 800b49a:	bf48      	it	mi
 800b49c:	b2ad      	uxthmi	r5, r5
 800b49e:	e7e6      	b.n	800b46e <_printf_i+0x182>
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	e7bb      	b.n	800b41c <_printf_i+0x130>
 800b4a4:	680b      	ldr	r3, [r1, #0]
 800b4a6:	6826      	ldr	r6, [r4, #0]
 800b4a8:	6960      	ldr	r0, [r4, #20]
 800b4aa:	1d1d      	adds	r5, r3, #4
 800b4ac:	600d      	str	r5, [r1, #0]
 800b4ae:	0635      	lsls	r5, r6, #24
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	d501      	bpl.n	800b4b8 <_printf_i+0x1cc>
 800b4b4:	6018      	str	r0, [r3, #0]
 800b4b6:	e002      	b.n	800b4be <_printf_i+0x1d2>
 800b4b8:	0671      	lsls	r1, r6, #25
 800b4ba:	d5fb      	bpl.n	800b4b4 <_printf_i+0x1c8>
 800b4bc:	8018      	strh	r0, [r3, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	4616      	mov	r6, r2
 800b4c4:	e7ba      	b.n	800b43c <_printf_i+0x150>
 800b4c6:	680b      	ldr	r3, [r1, #0]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	600a      	str	r2, [r1, #0]
 800b4cc:	681e      	ldr	r6, [r3, #0]
 800b4ce:	6862      	ldr	r2, [r4, #4]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7f4 fe9c 	bl	8000210 <memchr>
 800b4d8:	b108      	cbz	r0, 800b4de <_printf_i+0x1f2>
 800b4da:	1b80      	subs	r0, r0, r6
 800b4dc:	6060      	str	r0, [r4, #4]
 800b4de:	6863      	ldr	r3, [r4, #4]
 800b4e0:	6123      	str	r3, [r4, #16]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e8:	e7a8      	b.n	800b43c <_printf_i+0x150>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	47d0      	blx	sl
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d0ab      	beq.n	800b450 <_printf_i+0x164>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	079b      	lsls	r3, r3, #30
 800b4fc:	d413      	bmi.n	800b526 <_printf_i+0x23a>
 800b4fe:	68e0      	ldr	r0, [r4, #12]
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	4298      	cmp	r0, r3
 800b504:	bfb8      	it	lt
 800b506:	4618      	movlt	r0, r3
 800b508:	e7a4      	b.n	800b454 <_printf_i+0x168>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4632      	mov	r2, r6
 800b50e:	4649      	mov	r1, r9
 800b510:	4640      	mov	r0, r8
 800b512:	47d0      	blx	sl
 800b514:	3001      	adds	r0, #1
 800b516:	d09b      	beq.n	800b450 <_printf_i+0x164>
 800b518:	3501      	adds	r5, #1
 800b51a:	68e3      	ldr	r3, [r4, #12]
 800b51c:	9903      	ldr	r1, [sp, #12]
 800b51e:	1a5b      	subs	r3, r3, r1
 800b520:	42ab      	cmp	r3, r5
 800b522:	dcf2      	bgt.n	800b50a <_printf_i+0x21e>
 800b524:	e7eb      	b.n	800b4fe <_printf_i+0x212>
 800b526:	2500      	movs	r5, #0
 800b528:	f104 0619 	add.w	r6, r4, #25
 800b52c:	e7f5      	b.n	800b51a <_printf_i+0x22e>
 800b52e:	bf00      	nop
 800b530:	08012949 	.word	0x08012949
 800b534:	0801295a 	.word	0x0801295a

0800b538 <_sbrk_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d06      	ldr	r5, [pc, #24]	; (800b554 <_sbrk_r+0x1c>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	f7fc fb0e 	bl	8007b64 <_sbrk>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_sbrk_r+0x1a>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_sbrk_r+0x1a>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	200280d0 	.word	0x200280d0

0800b558 <__sread>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	460c      	mov	r4, r1
 800b55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b560:	f000 faf4 	bl	800bb4c <_read_r>
 800b564:	2800      	cmp	r0, #0
 800b566:	bfab      	itete	ge
 800b568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b56a:	89a3      	ldrhlt	r3, [r4, #12]
 800b56c:	181b      	addge	r3, r3, r0
 800b56e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b572:	bfac      	ite	ge
 800b574:	6563      	strge	r3, [r4, #84]	; 0x54
 800b576:	81a3      	strhlt	r3, [r4, #12]
 800b578:	bd10      	pop	{r4, pc}

0800b57a <__swrite>:
 800b57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57e:	461f      	mov	r7, r3
 800b580:	898b      	ldrh	r3, [r1, #12]
 800b582:	05db      	lsls	r3, r3, #23
 800b584:	4605      	mov	r5, r0
 800b586:	460c      	mov	r4, r1
 800b588:	4616      	mov	r6, r2
 800b58a:	d505      	bpl.n	800b598 <__swrite+0x1e>
 800b58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b590:	2302      	movs	r3, #2
 800b592:	2200      	movs	r2, #0
 800b594:	f000 f9c8 	bl	800b928 <_lseek_r>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b59e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	463b      	mov	r3, r7
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ae:	f000 b869 	b.w	800b684 <_write_r>

0800b5b2 <__sseek>:
 800b5b2:	b510      	push	{r4, lr}
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ba:	f000 f9b5 	bl	800b928 <_lseek_r>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	bf15      	itete	ne
 800b5c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5ce:	81a3      	strheq	r3, [r4, #12]
 800b5d0:	bf18      	it	ne
 800b5d2:	81a3      	strhne	r3, [r4, #12]
 800b5d4:	bd10      	pop	{r4, pc}

0800b5d6 <__sclose>:
 800b5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5da:	f000 b8d3 	b.w	800b784 <_close_r>
	...

0800b5e0 <__swbuf_r>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	460e      	mov	r6, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b118      	cbz	r0, 800b5f2 <__swbuf_r+0x12>
 800b5ea:	6983      	ldr	r3, [r0, #24]
 800b5ec:	b90b      	cbnz	r3, 800b5f2 <__swbuf_r+0x12>
 800b5ee:	f7ff fa5f 	bl	800aab0 <__sinit>
 800b5f2:	4b21      	ldr	r3, [pc, #132]	; (800b678 <__swbuf_r+0x98>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	d12b      	bne.n	800b650 <__swbuf_r+0x70>
 800b5f8:	686c      	ldr	r4, [r5, #4]
 800b5fa:	69a3      	ldr	r3, [r4, #24]
 800b5fc:	60a3      	str	r3, [r4, #8]
 800b5fe:	89a3      	ldrh	r3, [r4, #12]
 800b600:	071a      	lsls	r2, r3, #28
 800b602:	d52f      	bpl.n	800b664 <__swbuf_r+0x84>
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	b36b      	cbz	r3, 800b664 <__swbuf_r+0x84>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	6820      	ldr	r0, [r4, #0]
 800b60c:	1ac0      	subs	r0, r0, r3
 800b60e:	6963      	ldr	r3, [r4, #20]
 800b610:	b2f6      	uxtb	r6, r6
 800b612:	4283      	cmp	r3, r0
 800b614:	4637      	mov	r7, r6
 800b616:	dc04      	bgt.n	800b622 <__swbuf_r+0x42>
 800b618:	4621      	mov	r1, r4
 800b61a:	4628      	mov	r0, r5
 800b61c:	f000 f948 	bl	800b8b0 <_fflush_r>
 800b620:	bb30      	cbnz	r0, 800b670 <__swbuf_r+0x90>
 800b622:	68a3      	ldr	r3, [r4, #8]
 800b624:	3b01      	subs	r3, #1
 800b626:	60a3      	str	r3, [r4, #8]
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	6022      	str	r2, [r4, #0]
 800b62e:	701e      	strb	r6, [r3, #0]
 800b630:	6963      	ldr	r3, [r4, #20]
 800b632:	3001      	adds	r0, #1
 800b634:	4283      	cmp	r3, r0
 800b636:	d004      	beq.n	800b642 <__swbuf_r+0x62>
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	07db      	lsls	r3, r3, #31
 800b63c:	d506      	bpl.n	800b64c <__swbuf_r+0x6c>
 800b63e:	2e0a      	cmp	r6, #10
 800b640:	d104      	bne.n	800b64c <__swbuf_r+0x6c>
 800b642:	4621      	mov	r1, r4
 800b644:	4628      	mov	r0, r5
 800b646:	f000 f933 	bl	800b8b0 <_fflush_r>
 800b64a:	b988      	cbnz	r0, 800b670 <__swbuf_r+0x90>
 800b64c:	4638      	mov	r0, r7
 800b64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b650:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <__swbuf_r+0x9c>)
 800b652:	429c      	cmp	r4, r3
 800b654:	d101      	bne.n	800b65a <__swbuf_r+0x7a>
 800b656:	68ac      	ldr	r4, [r5, #8]
 800b658:	e7cf      	b.n	800b5fa <__swbuf_r+0x1a>
 800b65a:	4b09      	ldr	r3, [pc, #36]	; (800b680 <__swbuf_r+0xa0>)
 800b65c:	429c      	cmp	r4, r3
 800b65e:	bf08      	it	eq
 800b660:	68ec      	ldreq	r4, [r5, #12]
 800b662:	e7ca      	b.n	800b5fa <__swbuf_r+0x1a>
 800b664:	4621      	mov	r1, r4
 800b666:	4628      	mov	r0, r5
 800b668:	f000 f81e 	bl	800b6a8 <__swsetup_r>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d0cb      	beq.n	800b608 <__swbuf_r+0x28>
 800b670:	f04f 37ff 	mov.w	r7, #4294967295
 800b674:	e7ea      	b.n	800b64c <__swbuf_r+0x6c>
 800b676:	bf00      	nop
 800b678:	080128f8 	.word	0x080128f8
 800b67c:	08012918 	.word	0x08012918
 800b680:	080128d8 	.word	0x080128d8

0800b684 <_write_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	; (800b6a4 <_write_r+0x20>)
 800b688:	4604      	mov	r4, r0
 800b68a:	4608      	mov	r0, r1
 800b68c:	4611      	mov	r1, r2
 800b68e:	2200      	movs	r2, #0
 800b690:	602a      	str	r2, [r5, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	f7fc fa58 	bl	8007b48 <_write>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_write_r+0x1e>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_write_r+0x1e>
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	200280d0 	.word	0x200280d0

0800b6a8 <__swsetup_r>:
 800b6a8:	4b32      	ldr	r3, [pc, #200]	; (800b774 <__swsetup_r+0xcc>)
 800b6aa:	b570      	push	{r4, r5, r6, lr}
 800b6ac:	681d      	ldr	r5, [r3, #0]
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	b125      	cbz	r5, 800b6be <__swsetup_r+0x16>
 800b6b4:	69ab      	ldr	r3, [r5, #24]
 800b6b6:	b913      	cbnz	r3, 800b6be <__swsetup_r+0x16>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f7ff f9f9 	bl	800aab0 <__sinit>
 800b6be:	4b2e      	ldr	r3, [pc, #184]	; (800b778 <__swsetup_r+0xd0>)
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	d10f      	bne.n	800b6e4 <__swsetup_r+0x3c>
 800b6c4:	686c      	ldr	r4, [r5, #4]
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6cc:	0719      	lsls	r1, r3, #28
 800b6ce:	d42c      	bmi.n	800b72a <__swsetup_r+0x82>
 800b6d0:	06dd      	lsls	r5, r3, #27
 800b6d2:	d411      	bmi.n	800b6f8 <__swsetup_r+0x50>
 800b6d4:	2309      	movs	r3, #9
 800b6d6:	6033      	str	r3, [r6, #0]
 800b6d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e2:	e03e      	b.n	800b762 <__swsetup_r+0xba>
 800b6e4:	4b25      	ldr	r3, [pc, #148]	; (800b77c <__swsetup_r+0xd4>)
 800b6e6:	429c      	cmp	r4, r3
 800b6e8:	d101      	bne.n	800b6ee <__swsetup_r+0x46>
 800b6ea:	68ac      	ldr	r4, [r5, #8]
 800b6ec:	e7eb      	b.n	800b6c6 <__swsetup_r+0x1e>
 800b6ee:	4b24      	ldr	r3, [pc, #144]	; (800b780 <__swsetup_r+0xd8>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	bf08      	it	eq
 800b6f4:	68ec      	ldreq	r4, [r5, #12]
 800b6f6:	e7e6      	b.n	800b6c6 <__swsetup_r+0x1e>
 800b6f8:	0758      	lsls	r0, r3, #29
 800b6fa:	d512      	bpl.n	800b722 <__swsetup_r+0x7a>
 800b6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6fe:	b141      	cbz	r1, 800b712 <__swsetup_r+0x6a>
 800b700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b704:	4299      	cmp	r1, r3
 800b706:	d002      	beq.n	800b70e <__swsetup_r+0x66>
 800b708:	4630      	mov	r0, r6
 800b70a:	f000 f9a9 	bl	800ba60 <_free_r>
 800b70e:	2300      	movs	r3, #0
 800b710:	6363      	str	r3, [r4, #52]	; 0x34
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	2300      	movs	r3, #0
 800b71c:	6063      	str	r3, [r4, #4]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	f043 0308 	orr.w	r3, r3, #8
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	b94b      	cbnz	r3, 800b742 <__swsetup_r+0x9a>
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b738:	d003      	beq.n	800b742 <__swsetup_r+0x9a>
 800b73a:	4621      	mov	r1, r4
 800b73c:	4630      	mov	r0, r6
 800b73e:	f000 f929 	bl	800b994 <__smakebuf_r>
 800b742:	89a0      	ldrh	r0, [r4, #12]
 800b744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b748:	f010 0301 	ands.w	r3, r0, #1
 800b74c:	d00a      	beq.n	800b764 <__swsetup_r+0xbc>
 800b74e:	2300      	movs	r3, #0
 800b750:	60a3      	str	r3, [r4, #8]
 800b752:	6963      	ldr	r3, [r4, #20]
 800b754:	425b      	negs	r3, r3
 800b756:	61a3      	str	r3, [r4, #24]
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	b943      	cbnz	r3, 800b76e <__swsetup_r+0xc6>
 800b75c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b760:	d1ba      	bne.n	800b6d8 <__swsetup_r+0x30>
 800b762:	bd70      	pop	{r4, r5, r6, pc}
 800b764:	0781      	lsls	r1, r0, #30
 800b766:	bf58      	it	pl
 800b768:	6963      	ldrpl	r3, [r4, #20]
 800b76a:	60a3      	str	r3, [r4, #8]
 800b76c:	e7f4      	b.n	800b758 <__swsetup_r+0xb0>
 800b76e:	2000      	movs	r0, #0
 800b770:	e7f7      	b.n	800b762 <__swsetup_r+0xba>
 800b772:	bf00      	nop
 800b774:	20000588 	.word	0x20000588
 800b778:	080128f8 	.word	0x080128f8
 800b77c:	08012918 	.word	0x08012918
 800b780:	080128d8 	.word	0x080128d8

0800b784 <_close_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	; (800b7a0 <_close_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7fc fa02 	bl	8007b98 <_close>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_close_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_close_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	200280d0 	.word	0x200280d0

0800b7a4 <__sflush_r>:
 800b7a4:	898a      	ldrh	r2, [r1, #12]
 800b7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	0710      	lsls	r0, r2, #28
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	d458      	bmi.n	800b864 <__sflush_r+0xc0>
 800b7b2:	684b      	ldr	r3, [r1, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dc05      	bgt.n	800b7c4 <__sflush_r+0x20>
 800b7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dc02      	bgt.n	800b7c4 <__sflush_r+0x20>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7c6:	2e00      	cmp	r6, #0
 800b7c8:	d0f9      	beq.n	800b7be <__sflush_r+0x1a>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7d0:	682f      	ldr	r7, [r5, #0]
 800b7d2:	602b      	str	r3, [r5, #0]
 800b7d4:	d032      	beq.n	800b83c <__sflush_r+0x98>
 800b7d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	075a      	lsls	r2, r3, #29
 800b7dc:	d505      	bpl.n	800b7ea <__sflush_r+0x46>
 800b7de:	6863      	ldr	r3, [r4, #4]
 800b7e0:	1ac0      	subs	r0, r0, r3
 800b7e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7e4:	b10b      	cbz	r3, 800b7ea <__sflush_r+0x46>
 800b7e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7e8:	1ac0      	subs	r0, r0, r3
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7f0:	6a21      	ldr	r1, [r4, #32]
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b0      	blx	r6
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	d106      	bne.n	800b80a <__sflush_r+0x66>
 800b7fc:	6829      	ldr	r1, [r5, #0]
 800b7fe:	291d      	cmp	r1, #29
 800b800:	d82c      	bhi.n	800b85c <__sflush_r+0xb8>
 800b802:	4a2a      	ldr	r2, [pc, #168]	; (800b8ac <__sflush_r+0x108>)
 800b804:	40ca      	lsrs	r2, r1
 800b806:	07d6      	lsls	r6, r2, #31
 800b808:	d528      	bpl.n	800b85c <__sflush_r+0xb8>
 800b80a:	2200      	movs	r2, #0
 800b80c:	6062      	str	r2, [r4, #4]
 800b80e:	04d9      	lsls	r1, r3, #19
 800b810:	6922      	ldr	r2, [r4, #16]
 800b812:	6022      	str	r2, [r4, #0]
 800b814:	d504      	bpl.n	800b820 <__sflush_r+0x7c>
 800b816:	1c42      	adds	r2, r0, #1
 800b818:	d101      	bne.n	800b81e <__sflush_r+0x7a>
 800b81a:	682b      	ldr	r3, [r5, #0]
 800b81c:	b903      	cbnz	r3, 800b820 <__sflush_r+0x7c>
 800b81e:	6560      	str	r0, [r4, #84]	; 0x54
 800b820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b822:	602f      	str	r7, [r5, #0]
 800b824:	2900      	cmp	r1, #0
 800b826:	d0ca      	beq.n	800b7be <__sflush_r+0x1a>
 800b828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b82c:	4299      	cmp	r1, r3
 800b82e:	d002      	beq.n	800b836 <__sflush_r+0x92>
 800b830:	4628      	mov	r0, r5
 800b832:	f000 f915 	bl	800ba60 <_free_r>
 800b836:	2000      	movs	r0, #0
 800b838:	6360      	str	r0, [r4, #52]	; 0x34
 800b83a:	e7c1      	b.n	800b7c0 <__sflush_r+0x1c>
 800b83c:	6a21      	ldr	r1, [r4, #32]
 800b83e:	2301      	movs	r3, #1
 800b840:	4628      	mov	r0, r5
 800b842:	47b0      	blx	r6
 800b844:	1c41      	adds	r1, r0, #1
 800b846:	d1c7      	bne.n	800b7d8 <__sflush_r+0x34>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0c4      	beq.n	800b7d8 <__sflush_r+0x34>
 800b84e:	2b1d      	cmp	r3, #29
 800b850:	d001      	beq.n	800b856 <__sflush_r+0xb2>
 800b852:	2b16      	cmp	r3, #22
 800b854:	d101      	bne.n	800b85a <__sflush_r+0xb6>
 800b856:	602f      	str	r7, [r5, #0]
 800b858:	e7b1      	b.n	800b7be <__sflush_r+0x1a>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	e7ad      	b.n	800b7c0 <__sflush_r+0x1c>
 800b864:	690f      	ldr	r7, [r1, #16]
 800b866:	2f00      	cmp	r7, #0
 800b868:	d0a9      	beq.n	800b7be <__sflush_r+0x1a>
 800b86a:	0793      	lsls	r3, r2, #30
 800b86c:	680e      	ldr	r6, [r1, #0]
 800b86e:	bf08      	it	eq
 800b870:	694b      	ldreq	r3, [r1, #20]
 800b872:	600f      	str	r7, [r1, #0]
 800b874:	bf18      	it	ne
 800b876:	2300      	movne	r3, #0
 800b878:	eba6 0807 	sub.w	r8, r6, r7
 800b87c:	608b      	str	r3, [r1, #8]
 800b87e:	f1b8 0f00 	cmp.w	r8, #0
 800b882:	dd9c      	ble.n	800b7be <__sflush_r+0x1a>
 800b884:	6a21      	ldr	r1, [r4, #32]
 800b886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b888:	4643      	mov	r3, r8
 800b88a:	463a      	mov	r2, r7
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b0      	blx	r6
 800b890:	2800      	cmp	r0, #0
 800b892:	dc06      	bgt.n	800b8a2 <__sflush_r+0xfe>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a0:	e78e      	b.n	800b7c0 <__sflush_r+0x1c>
 800b8a2:	4407      	add	r7, r0
 800b8a4:	eba8 0800 	sub.w	r8, r8, r0
 800b8a8:	e7e9      	b.n	800b87e <__sflush_r+0xda>
 800b8aa:	bf00      	nop
 800b8ac:	20400001 	.word	0x20400001

0800b8b0 <_fflush_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	690b      	ldr	r3, [r1, #16]
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	b913      	cbnz	r3, 800b8c0 <_fflush_r+0x10>
 800b8ba:	2500      	movs	r5, #0
 800b8bc:	4628      	mov	r0, r5
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	b118      	cbz	r0, 800b8ca <_fflush_r+0x1a>
 800b8c2:	6983      	ldr	r3, [r0, #24]
 800b8c4:	b90b      	cbnz	r3, 800b8ca <_fflush_r+0x1a>
 800b8c6:	f7ff f8f3 	bl	800aab0 <__sinit>
 800b8ca:	4b14      	ldr	r3, [pc, #80]	; (800b91c <_fflush_r+0x6c>)
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	d11b      	bne.n	800b908 <_fflush_r+0x58>
 800b8d0:	686c      	ldr	r4, [r5, #4]
 800b8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0ef      	beq.n	800b8ba <_fflush_r+0xa>
 800b8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8dc:	07d0      	lsls	r0, r2, #31
 800b8de:	d404      	bmi.n	800b8ea <_fflush_r+0x3a>
 800b8e0:	0599      	lsls	r1, r3, #22
 800b8e2:	d402      	bmi.n	800b8ea <_fflush_r+0x3a>
 800b8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e6:	f7ff f981 	bl	800abec <__retarget_lock_acquire_recursive>
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	f7ff ff59 	bl	800b7a4 <__sflush_r>
 800b8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8f4:	07da      	lsls	r2, r3, #31
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	d4e0      	bmi.n	800b8bc <_fflush_r+0xc>
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	059b      	lsls	r3, r3, #22
 800b8fe:	d4dd      	bmi.n	800b8bc <_fflush_r+0xc>
 800b900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b902:	f7ff f974 	bl	800abee <__retarget_lock_release_recursive>
 800b906:	e7d9      	b.n	800b8bc <_fflush_r+0xc>
 800b908:	4b05      	ldr	r3, [pc, #20]	; (800b920 <_fflush_r+0x70>)
 800b90a:	429c      	cmp	r4, r3
 800b90c:	d101      	bne.n	800b912 <_fflush_r+0x62>
 800b90e:	68ac      	ldr	r4, [r5, #8]
 800b910:	e7df      	b.n	800b8d2 <_fflush_r+0x22>
 800b912:	4b04      	ldr	r3, [pc, #16]	; (800b924 <_fflush_r+0x74>)
 800b914:	429c      	cmp	r4, r3
 800b916:	bf08      	it	eq
 800b918:	68ec      	ldreq	r4, [r5, #12]
 800b91a:	e7da      	b.n	800b8d2 <_fflush_r+0x22>
 800b91c:	080128f8 	.word	0x080128f8
 800b920:	08012918 	.word	0x08012918
 800b924:	080128d8 	.word	0x080128d8

0800b928 <_lseek_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d07      	ldr	r5, [pc, #28]	; (800b948 <_lseek_r+0x20>)
 800b92c:	4604      	mov	r4, r0
 800b92e:	4608      	mov	r0, r1
 800b930:	4611      	mov	r1, r2
 800b932:	2200      	movs	r2, #0
 800b934:	602a      	str	r2, [r5, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	f7fc f938 	bl	8007bac <_lseek>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_lseek_r+0x1e>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_lseek_r+0x1e>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	200280d0 	.word	0x200280d0

0800b94c <__swhatbuf_r>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	460e      	mov	r6, r1
 800b950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b954:	2900      	cmp	r1, #0
 800b956:	b096      	sub	sp, #88	; 0x58
 800b958:	4614      	mov	r4, r2
 800b95a:	461d      	mov	r5, r3
 800b95c:	da07      	bge.n	800b96e <__swhatbuf_r+0x22>
 800b95e:	2300      	movs	r3, #0
 800b960:	602b      	str	r3, [r5, #0]
 800b962:	89b3      	ldrh	r3, [r6, #12]
 800b964:	061a      	lsls	r2, r3, #24
 800b966:	d410      	bmi.n	800b98a <__swhatbuf_r+0x3e>
 800b968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b96c:	e00e      	b.n	800b98c <__swhatbuf_r+0x40>
 800b96e:	466a      	mov	r2, sp
 800b970:	f000 f8fe 	bl	800bb70 <_fstat_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	dbf2      	blt.n	800b95e <__swhatbuf_r+0x12>
 800b978:	9a01      	ldr	r2, [sp, #4]
 800b97a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b97e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b982:	425a      	negs	r2, r3
 800b984:	415a      	adcs	r2, r3
 800b986:	602a      	str	r2, [r5, #0]
 800b988:	e7ee      	b.n	800b968 <__swhatbuf_r+0x1c>
 800b98a:	2340      	movs	r3, #64	; 0x40
 800b98c:	2000      	movs	r0, #0
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	b016      	add	sp, #88	; 0x58
 800b992:	bd70      	pop	{r4, r5, r6, pc}

0800b994 <__smakebuf_r>:
 800b994:	898b      	ldrh	r3, [r1, #12]
 800b996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b998:	079d      	lsls	r5, r3, #30
 800b99a:	4606      	mov	r6, r0
 800b99c:	460c      	mov	r4, r1
 800b99e:	d507      	bpl.n	800b9b0 <__smakebuf_r+0x1c>
 800b9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	6163      	str	r3, [r4, #20]
 800b9ac:	b002      	add	sp, #8
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	ab01      	add	r3, sp, #4
 800b9b2:	466a      	mov	r2, sp
 800b9b4:	f7ff ffca 	bl	800b94c <__swhatbuf_r>
 800b9b8:	9900      	ldr	r1, [sp, #0]
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff f917 	bl	800abf0 <_malloc_r>
 800b9c2:	b948      	cbnz	r0, 800b9d8 <__smakebuf_r+0x44>
 800b9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c8:	059a      	lsls	r2, r3, #22
 800b9ca:	d4ef      	bmi.n	800b9ac <__smakebuf_r+0x18>
 800b9cc:	f023 0303 	bic.w	r3, r3, #3
 800b9d0:	f043 0302 	orr.w	r3, r3, #2
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	e7e3      	b.n	800b9a0 <__smakebuf_r+0xc>
 800b9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <__smakebuf_r+0x7c>)
 800b9da:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	6020      	str	r0, [r4, #0]
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	9b00      	ldr	r3, [sp, #0]
 800b9e8:	6163      	str	r3, [r4, #20]
 800b9ea:	9b01      	ldr	r3, [sp, #4]
 800b9ec:	6120      	str	r0, [r4, #16]
 800b9ee:	b15b      	cbz	r3, 800ba08 <__smakebuf_r+0x74>
 800b9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f000 f8cd 	bl	800bb94 <_isatty_r>
 800b9fa:	b128      	cbz	r0, 800ba08 <__smakebuf_r+0x74>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f023 0303 	bic.w	r3, r3, #3
 800ba02:	f043 0301 	orr.w	r3, r3, #1
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	89a0      	ldrh	r0, [r4, #12]
 800ba0a:	4305      	orrs	r5, r0
 800ba0c:	81a5      	strh	r5, [r4, #12]
 800ba0e:	e7cd      	b.n	800b9ac <__smakebuf_r+0x18>
 800ba10:	0800aa49 	.word	0x0800aa49

0800ba14 <memmove>:
 800ba14:	4288      	cmp	r0, r1
 800ba16:	b510      	push	{r4, lr}
 800ba18:	eb01 0402 	add.w	r4, r1, r2
 800ba1c:	d902      	bls.n	800ba24 <memmove+0x10>
 800ba1e:	4284      	cmp	r4, r0
 800ba20:	4623      	mov	r3, r4
 800ba22:	d807      	bhi.n	800ba34 <memmove+0x20>
 800ba24:	1e43      	subs	r3, r0, #1
 800ba26:	42a1      	cmp	r1, r4
 800ba28:	d008      	beq.n	800ba3c <memmove+0x28>
 800ba2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba32:	e7f8      	b.n	800ba26 <memmove+0x12>
 800ba34:	4402      	add	r2, r0
 800ba36:	4601      	mov	r1, r0
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d100      	bne.n	800ba3e <memmove+0x2a>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba46:	e7f7      	b.n	800ba38 <memmove+0x24>

0800ba48 <__malloc_lock>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__malloc_lock+0x8>)
 800ba4a:	f7ff b8cf 	b.w	800abec <__retarget_lock_acquire_recursive>
 800ba4e:	bf00      	nop
 800ba50:	200280ca 	.word	0x200280ca

0800ba54 <__malloc_unlock>:
 800ba54:	4801      	ldr	r0, [pc, #4]	; (800ba5c <__malloc_unlock+0x8>)
 800ba56:	f7ff b8ca 	b.w	800abee <__retarget_lock_release_recursive>
 800ba5a:	bf00      	nop
 800ba5c:	200280ca 	.word	0x200280ca

0800ba60 <_free_r>:
 800ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba62:	2900      	cmp	r1, #0
 800ba64:	d048      	beq.n	800baf8 <_free_r+0x98>
 800ba66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba6a:	9001      	str	r0, [sp, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba72:	bfb8      	it	lt
 800ba74:	18e4      	addlt	r4, r4, r3
 800ba76:	f7ff ffe7 	bl	800ba48 <__malloc_lock>
 800ba7a:	4a20      	ldr	r2, [pc, #128]	; (800bafc <_free_r+0x9c>)
 800ba7c:	9801      	ldr	r0, [sp, #4]
 800ba7e:	6813      	ldr	r3, [r2, #0]
 800ba80:	4615      	mov	r5, r2
 800ba82:	b933      	cbnz	r3, 800ba92 <_free_r+0x32>
 800ba84:	6063      	str	r3, [r4, #4]
 800ba86:	6014      	str	r4, [r2, #0]
 800ba88:	b003      	add	sp, #12
 800ba8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba8e:	f7ff bfe1 	b.w	800ba54 <__malloc_unlock>
 800ba92:	42a3      	cmp	r3, r4
 800ba94:	d90b      	bls.n	800baae <_free_r+0x4e>
 800ba96:	6821      	ldr	r1, [r4, #0]
 800ba98:	1862      	adds	r2, r4, r1
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	bf04      	itt	eq
 800ba9e:	681a      	ldreq	r2, [r3, #0]
 800baa0:	685b      	ldreq	r3, [r3, #4]
 800baa2:	6063      	str	r3, [r4, #4]
 800baa4:	bf04      	itt	eq
 800baa6:	1852      	addeq	r2, r2, r1
 800baa8:	6022      	streq	r2, [r4, #0]
 800baaa:	602c      	str	r4, [r5, #0]
 800baac:	e7ec      	b.n	800ba88 <_free_r+0x28>
 800baae:	461a      	mov	r2, r3
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	b10b      	cbz	r3, 800bab8 <_free_r+0x58>
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	d9fa      	bls.n	800baae <_free_r+0x4e>
 800bab8:	6811      	ldr	r1, [r2, #0]
 800baba:	1855      	adds	r5, r2, r1
 800babc:	42a5      	cmp	r5, r4
 800babe:	d10b      	bne.n	800bad8 <_free_r+0x78>
 800bac0:	6824      	ldr	r4, [r4, #0]
 800bac2:	4421      	add	r1, r4
 800bac4:	1854      	adds	r4, r2, r1
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	6011      	str	r1, [r2, #0]
 800baca:	d1dd      	bne.n	800ba88 <_free_r+0x28>
 800bacc:	681c      	ldr	r4, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	6053      	str	r3, [r2, #4]
 800bad2:	4421      	add	r1, r4
 800bad4:	6011      	str	r1, [r2, #0]
 800bad6:	e7d7      	b.n	800ba88 <_free_r+0x28>
 800bad8:	d902      	bls.n	800bae0 <_free_r+0x80>
 800bada:	230c      	movs	r3, #12
 800badc:	6003      	str	r3, [r0, #0]
 800bade:	e7d3      	b.n	800ba88 <_free_r+0x28>
 800bae0:	6825      	ldr	r5, [r4, #0]
 800bae2:	1961      	adds	r1, r4, r5
 800bae4:	428b      	cmp	r3, r1
 800bae6:	bf04      	itt	eq
 800bae8:	6819      	ldreq	r1, [r3, #0]
 800baea:	685b      	ldreq	r3, [r3, #4]
 800baec:	6063      	str	r3, [r4, #4]
 800baee:	bf04      	itt	eq
 800baf0:	1949      	addeq	r1, r1, r5
 800baf2:	6021      	streq	r1, [r4, #0]
 800baf4:	6054      	str	r4, [r2, #4]
 800baf6:	e7c7      	b.n	800ba88 <_free_r+0x28>
 800baf8:	b003      	add	sp, #12
 800bafa:	bd30      	pop	{r4, r5, pc}
 800bafc:	200229cc 	.word	0x200229cc

0800bb00 <_realloc_r>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	4607      	mov	r7, r0
 800bb04:	4614      	mov	r4, r2
 800bb06:	460e      	mov	r6, r1
 800bb08:	b921      	cbnz	r1, 800bb14 <_realloc_r+0x14>
 800bb0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb0e:	4611      	mov	r1, r2
 800bb10:	f7ff b86e 	b.w	800abf0 <_malloc_r>
 800bb14:	b922      	cbnz	r2, 800bb20 <_realloc_r+0x20>
 800bb16:	f7ff ffa3 	bl	800ba60 <_free_r>
 800bb1a:	4625      	mov	r5, r4
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb20:	f000 f848 	bl	800bbb4 <_malloc_usable_size_r>
 800bb24:	42a0      	cmp	r0, r4
 800bb26:	d20f      	bcs.n	800bb48 <_realloc_r+0x48>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	f7ff f860 	bl	800abf0 <_malloc_r>
 800bb30:	4605      	mov	r5, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0f2      	beq.n	800bb1c <_realloc_r+0x1c>
 800bb36:	4631      	mov	r1, r6
 800bb38:	4622      	mov	r2, r4
 800bb3a:	f7fe fe95 	bl	800a868 <memcpy>
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4638      	mov	r0, r7
 800bb42:	f7ff ff8d 	bl	800ba60 <_free_r>
 800bb46:	e7e9      	b.n	800bb1c <_realloc_r+0x1c>
 800bb48:	4635      	mov	r5, r6
 800bb4a:	e7e7      	b.n	800bb1c <_realloc_r+0x1c>

0800bb4c <_read_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d07      	ldr	r5, [pc, #28]	; (800bb6c <_read_r+0x20>)
 800bb50:	4604      	mov	r4, r0
 800bb52:	4608      	mov	r0, r1
 800bb54:	4611      	mov	r1, r2
 800bb56:	2200      	movs	r2, #0
 800bb58:	602a      	str	r2, [r5, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f7fb ffe7 	bl	8007b2e <_read>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_read_r+0x1e>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_read_r+0x1e>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	200280d0 	.word	0x200280d0

0800bb70 <_fstat_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d07      	ldr	r5, [pc, #28]	; (800bb90 <_fstat_r+0x20>)
 800bb74:	2300      	movs	r3, #0
 800bb76:	4604      	mov	r4, r0
 800bb78:	4608      	mov	r0, r1
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	602b      	str	r3, [r5, #0]
 800bb7e:	f7fc f80e 	bl	8007b9e <_fstat>
 800bb82:	1c43      	adds	r3, r0, #1
 800bb84:	d102      	bne.n	800bb8c <_fstat_r+0x1c>
 800bb86:	682b      	ldr	r3, [r5, #0]
 800bb88:	b103      	cbz	r3, 800bb8c <_fstat_r+0x1c>
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	bd38      	pop	{r3, r4, r5, pc}
 800bb8e:	bf00      	nop
 800bb90:	200280d0 	.word	0x200280d0

0800bb94 <_isatty_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d06      	ldr	r5, [pc, #24]	; (800bbb0 <_isatty_r+0x1c>)
 800bb98:	2300      	movs	r3, #0
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	602b      	str	r3, [r5, #0]
 800bba0:	f7fc f802 	bl	8007ba8 <_isatty>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d102      	bne.n	800bbae <_isatty_r+0x1a>
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	b103      	cbz	r3, 800bbae <_isatty_r+0x1a>
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	200280d0 	.word	0x200280d0

0800bbb4 <_malloc_usable_size_r>:
 800bbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb8:	1f18      	subs	r0, r3, #4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bfbc      	itt	lt
 800bbbe:	580b      	ldrlt	r3, [r1, r0]
 800bbc0:	18c0      	addlt	r0, r0, r3
 800bbc2:	4770      	bx	lr

0800bbc4 <_init>:
 800bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc6:	bf00      	nop
 800bbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbca:	bc08      	pop	{r3}
 800bbcc:	469e      	mov	lr, r3
 800bbce:	4770      	bx	lr

0800bbd0 <_fini>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	bf00      	nop
 800bbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd6:	bc08      	pop	{r3}
 800bbd8:	469e      	mov	lr, r3
 800bbda:	4770      	bx	lr
